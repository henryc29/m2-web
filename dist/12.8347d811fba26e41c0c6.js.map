{"version":3,"sources":["webpack:///./components/color_input.tsx","webpack:///./node_modules/mattermost-redux/actions/timezone.js","webpack:///./actions/views/mfa.js","webpack:///./components/audit_table/audit_table.tsx","webpack:///./components/audit_table/index.ts","webpack:///./node_modules/mattermost-redux/utils/notify_props.js","webpack:///./components/user_settings/advanced/join_leave_section/join_leave_section.jsx","webpack:///./components/user_settings/advanced/join_leave_section/index.js","webpack:///./components/user_settings/advanced/user_settings_advanced.jsx","webpack:///./components/user_settings/advanced/index.js","webpack:///./components/user_settings/display/user_settings_theme/color_chooser.tsx","webpack:///./components/user_settings/display/user_settings_theme/custom_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/premade_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/index.js","webpack:///./components/user_settings/display/user_settings_theme/user_settings_theme.jsx","webpack:///./components/user_settings/display/user_settings_theme/index.js","webpack:///./components/suggestion/timezone_provider.jsx","webpack:///./components/user_settings/display/manage_timezones/manage_timezones.tsx","webpack:///./components/user_settings/display/manage_timezones/index.ts","webpack:///./components/user_settings/display/manage_languages/manage_languages.tsx","webpack:///./components/user_settings/display/manage_languages/index.ts","webpack:///./components/user_settings/display/user_settings_display.tsx","webpack:///./components/user_settings/display/index.ts","webpack:///./components/user_settings/general/user_settings_general.tsx","webpack:///./components/user_settings/general/index.ts","webpack:///./components/user_settings/notifications/desktop_notification_settings.jsx","webpack:///./components/user_settings/notifications/email_notification_setting/email_notification_setting.tsx","webpack:///./components/user_settings/notifications/email_notification_setting/index.ts","webpack:///./components/user_settings/notifications/manage_auto_responder.jsx","webpack:///./components/user_settings/notifications/user_settings_notifications.jsx","webpack:///./components/user_settings/notifications/index.js","webpack:///./components/access_history_modal/access_history_modal.tsx","webpack:///./components/access_history_modal/index.ts","webpack:///./components/activity_log_modal/components/more_info.tsx","webpack:///./components/activity_log_modal/components/activity_log.jsx","webpack:///./components/activity_log_modal/activity_log_modal.jsx","webpack:///./components/activity_log_modal/index.js","webpack:///./components/user_settings/security/mfa_section/mfa_section.tsx","webpack:///./components/user_settings/security/mfa_section/index.ts","webpack:///./components/user_settings/security/user_access_token_section/user_access_token_section.tsx","webpack:///./components/user_settings/security/user_access_token_section/index.ts","webpack:///./components/user_settings/security/user_settings_security.tsx","webpack:///./components/user_settings/security/index.ts","webpack:///./components/user_settings/sidebar/user_settings_sidebar.tsx","webpack:///./components/user_settings/sidebar/index.ts","webpack:///./components/user_settings/user_settings.tsx","webpack:///./components/user_settings/index.ts"],"names":["ColorInput","React","PureComponent","constructor","props","super","e","this","colorPicker","current","contains","target","setState","isOpened","state","colorInput","focus","newColorData","onChange","hex","event","value","color","tinycolor","normalizedColor","toHex","isValid","focused","setSelectionRange","length","key","togglePicker","createRef","componentDidUpdate","prevProps","prevState","prevIsOpened","document","addEventListener","checkClick","removeEventListener","render","id","className","ref","type","onBlur","onFocus","onKeyDown","maxLength","disabled","isDisabled","onClick","style","backgroundColor","handleColorChange","disableAlpha","Object","defineProperty","exports","tslib_1","users_1","timezone_1","users_2","autoUpdateTimezone","deviceTimezone","_this","dispatch","getState","__awaiter","currentUer","currentTimezone","newTimezoneExists","timezone","updatedUser","__generator","_a","getCurrentUser","getUserTimezone","automaticTimezone","useAutomaticTimezone","manualTimezone","__assign","updateMe","activateMfa","code","currentUserId","getCurrentUserId","UserActions","deactivateMfa","generateMfaSecret","holders","defineMessages","sessionRevoked","t","defaultMessage","channelCreated","establishedDM","nameUpdated","headerUpdated","channelDeleted","userAdded","userRemoved","attemptedRegisterApp","attemptedAllowOAuthAccess","successfullOAuthAccess","failedOAuthAccess","attemptedOAuthToken","successfullOAuthToken","oauthTokenFailed","attemptedLogin","authenticated","successfullLogin","failedLogin","updatePicture","updateGeneral","attemptedPassword","successfullPassword","failedPassword","updatedRol","member","accountActive","accountInactive","by","byAdmin","sentEmail","attemptedReset","successfullReset","updateGlobalNotifications","attemptedWebhookCreate","succcessfullWebhookCreate","failedWebhookCreate","attemptedWebhookDelete","successfullWebhookDelete","failedWebhookDelete","logout","verified","revokedAll","loginAttempt","loginFailure","attemptedLicenseAdd","successfullLicenseAdd","failedExpiredLicenseAdd","failedInvalidLicenseAdd","licenseRemoved","AuditTable","componentDidMount","ids","audits","map","audit","user_id","actions","getMissingProfilesByIds","showUserId","showIp","showSession","accessList","i","entries","auditInfo","formatAuditInfo","uContent","iContent","sContent","userId","ip","sessionId","descStyle","desc","toLowerCase","indexOf","timestamp","userIdContent","ipContent","sessionContent","data-testid","formatMessage","intl","actionURL","action","replace","auditDesc","channelInfo","extra_info","split","channelNameField","channelObj","channelURL","channelName","getByName","display_name","username","getDirectTeammate","userIdField","profile","getUser","test","url","oauthInfo","clientIdField","oauthTokenFailure","trim","token","userInfo","userRoles","updateType","updateField","actingUserInfo","actingUser","user","currentUser","isSystemAdmin","roles","email","webhookInfo","licenseInfo","toTitleCase","actionDesc","lastIndexOf","substring","extraInfoDesc","date","Date","create_at","day","month","year","hour","minute","auditProfile","ip_address","session_id","injectIntl","connect","getChannelByName","channelId","bindActionCreators","constants_1","getEmailInterval","enableEmailNotification","enableEmailBatching","emailIntervalPreference","INTERVAL_NEVER","Preferences","INTERVAL_IMMEDIATE","INTERVAL_FIFTEEN_MINUTES","INTERVAL_HOUR","validValuesWithoutEmailBatching","JoinLeaveSection","currentTarget","joinLeaveState","section","joinLeave","onUpdateSection","joinLeavePreference","category","CATEGORY_ADVANCED_SETTINGS","name","ADVANCED_FILTER_JOIN_LEAVE","savePreferences","activeSection","AdvancedSections","JOIN_LEAVE","title","inputs","checked","handleOnChange","setting","submit","handleSubmit","saving","isSaving","server_error","serverError","updateSection","handleUpdateSection","describe","renderOnOffLabel","PropTypes","string","isRequired","func","shape","getPreference","PreReleaseFeatures","Constants","PRE_RELEASE_FEATURES","AdvancedSettingsDisplay","advancedSettings","advancedSettingsCategory","settings","send_on_ctrl_enter","sendOnCtrlEnter","code_block_ctrl_enter","codeBlockOnCtrlEnter","formatting","join_leave","preReleaseFeaturesKeys","keys","enabledFeatures","as","feature","FeatureTogglePrefix","label","previewFeaturesEnabled","enablePreviewFeatures","preReleaseFeatures","showDeactivateAccountModal","String","forEach","features","push","async","preferences","Array","isArray","updateUserActive","then","error","message","data","revokeAllSessionsForUser","emitUserLoggedOutEvent","getStateFromProps","description","default","mac","Utils","ctrlSendTitle","ctrlSendDesc","updateSetting","bind","enabled","renderCtrlEnterLabel","ctrlEnter","codeBlockCtrlEnter","renderFeatureLabel","ctrlSendSection","getCtrlSendText","ctrlSendActive","formattingSection","renderFormattingSection","previewFeaturesSection","previewFeaturesSectionDivider","formattingSectionDivider","toggleFeature","saveEnabledFeatures","values","count","deactivateAccountSection","makeConfirmationModal","auth_service","enableUserDeactivation","saveButtonText","handleShowDeactivateAccountModal","confirmButtonClass","deactivateMemberButton","show","confirmButtonText","onConfirm","handleDeactivateAccountSubmit","onCancel","handleHideDeactivateAccountModal","data-dismiss","aria-label","closeModal","aria-hidden","collapseModal","object","array","bool","getAdvancedSettingsCategory","makeGetCategory","config","getConfig","EnablePreviewFeatures","EnableUserDeactivation","get","ColorChooser","Fragment","newColor","messages","sidebarBg","sidebarText","sidebarHeaderBg","sidebarHeaderTextColor","sidebarUnreadText","sidebarTextHoverBg","sidebarTextActiveBorder","sidebarTextActiveColor","onlineIndicator","awayIndicator","dndIndicator","mentionBg","mentionColor","centerChannelBg","centerChannelColor","newMessageSeparator","linkColor","buttonBg","buttonColor","errorTextColor","mentionHighlightBg","mentionHighlightLink","codeTheme","CustomThemeChooser","settingId","updateTheme","theme","newTheme","mentionBj","copyTheme","setCopyTheme","text","window","clipboardData","getData","JSON","parse","err","setThemeDefaults","stringify","stopPropagation","textarea","refs","preventDefault","sidebarStylesHeader","classList","toggle","toggleSection","sidebarStyles","centerChannelStylesHeader","centerChannelStyles","linkAndButtonStylesHeader","linkAndButtonStyles","selectTheme","execCommand","showCopySuccess","copySuccess","querySelector","display","setTimeout","assign","image","node","ontransitionend","overflowY","sidebarElements","centerChannelElements","linkAndButtonElements","THEME_ELEMENTS","element","index","codeThemeOptions","codeThemeURL","themes","codeThemeIndex","iconURL","uiName","popoverContent","popoverStyle","width","alt","src","defaultValue","onCodeThemeChange","placement","overlay","group","pasteBox","onCopy","onPaste","pasteBoxChange","onChangeHandle","role","toggleSidebarStyles","toggleCenterChannelStyles","toggleLinkAndButtonStyles","PremadeThemeChooser","premadeThemes","allowedThemes","hasAllowedThemes","k","THEMES","hasOwnProperty","premadeTheme","activeClass","propTypes","arrayOf","defaultProps","AllowedThemes","ThemeSetting","teamId","applyToAllTeams","currentTeamId","saveTheme","deleteTeamSpecificThemes","setRequireConfirm","originalTheme","themeChanged","field","AppDispatcher","handleViewAction","ActionTypes","TOGGLE_IMPORT_THEME_MODAL","callback","setEnforceFocus","selected","$","ReactDOM","findDOMNode","addClass","resetFields","removeClass","componentWillUnmount","DEFAULT_CODE_THEME","showAllTeamsCheckbox","displayCustom","custom","premade","themeUI","allowCustomThemes","href","rel","handleImportModal","allTeamsCheckbox","submitExtra","submitTheme","disableEnterSubmit","getThemeCategory","getCurrentTeamId","getTheme","CATEGORY_THEME","getMyTeamsCount","UserSettingsTheme","TimezoneSuggestion","Suggestion","item","isSelection","handleClick","baseProps","TimezoneProvider","Provider","handlePretextChanged","timezonePrefix","resultsCallback","displayAllTimezones","filterTimezones","matchedPretext","terms","getSupportedTimezones","items","component","filteredTimezones","filter","getTimezoneRegion","ManageTimezones","manualTimezoneInput","oldUseAutomaticTimezone","oldAutomaticTimezone","oldManualTimezone","timezoneNotChanged","submitUser","toString","res","Error","getBrowserTimezone","timezones","timezoneRegion","noTimezonesFromServer","automaticTimezoneInput","handleAutomaticTimezone","providers","onItemSelected","handleTimezoneSelected","listComponent","SuggestionList","requiredCharacters","listStyle","completeOnTab","renderDividers","openOnFocus","containerStyle","changeTimezone","ManageLanguage","modalBody","isKeyPressed","KeyCodes","ESCAPE","openMenu","remove","ENTER","add","selectedOption","locale","locales","I18n","userLocale","reactSelectContainer","handleContainerKeyDown","options","l","order","sort","a","b","lang","reactStyles","menuPortal","provided","zIndex","input","classNamePrefix","menuIsOpen","menuPortalTarget","body","styles","clearable","setLanguage","handleKeyDown","onMenuClose","handleMenuClose","onMenuOpen","handleMenuOpen","aria-labelledby","changeLanguage","ManageLanguages","getDisplayStateFromProps","militaryTime","teammateNameDisplay","channelDisplayMode","messageDisplay","collapseDisplay","linkPreviewDisplay","UserSettingsDisplay","timePreference","CATEGORY_DISPLAY_SETTINGS","USE_MILITARY_TIME","teammateNameDisplayPreference","NAME_NAME_FORMAT","channelDisplayModePreference","CHANNEL_DISPLAY_MODE","messageDisplayPreference","MESSAGE_DISPLAY","collapseDisplayPreference","COLLAPSE_DISPLAY","linkPreviewDisplayPreference","LINK_PREVIEW_DISPLAY","updateState","newState","prevSections","clock","linkpreview","message_display","channel_display_mode","languages","enableTimezone","shouldAutoUpdateTimezone","handleChannelDisplayModeRadio","handlemessageDisplayRadio","handleCollapseRadio","handleLinkPreviewRadio","createSection","firstOption","secondOption","thirdOption","extraInfo","firstMessage","radionButtonText","moreColon","firstMessageMore","moreId","moreMessage","secondMessage","secondMessageMore","thirdMessage","messageTitle","messageDesc","format","firstDisplay","secondDisplay","thirdSection","thirdDisplay","collapseSection","defaultDisplay","linkPreviewSection","enableLinkPreviews","clockSection","teammateNameDisplaySection","lockTeammateNameDisplay","configTeammateNameDisplay","TEAMMATE_NAME_DISPLAY","SHOW_USERNAME","SHOW_NICKNAME_FULLNAME","SHOW_FULLNAME","timezoneSelection","userTimezone","Boolean","currentUserTimezone","messageDisplaySection","MESSAGE_DISPLAY_CLEAN","MESSAGE_DISPLAY_COMPACT","channelDisplayModeSection","CHANNEL_DISPLAY_MODE_FULL_SCREEN","CHANNEL_DISPLAY_MODE_CENTERED","languagesSection","themeSection","defaultClientLocale","enableThemeSelection","getTimezones","automaticTimezoneNotSet","AllowCustomThemes","EnableLinkPreviews","DefaultClientLocale","EnableThemeSelection","ExperimentalTimezone","getLicense","LockTeammateNameDisplay","TeammateNameDisplay","getUserCurrentTimezone","USE_MILITARY_TIME_DEFAULT","CHANNEL_DISPLAY_MODE_DEFAULT","MESSAGE_DISPLAY_DEFAULT","COLLAPSE_DISPLAY_DEFAULT","LINK_PREVIEW_DISPLAY_DEFAULT","usernameReserved","usernameRestrictions","validEmail","emailMatch","incorrectPassword","emptyPassword","validImage","imageTooLarge","uploadImage","uploadImageMobile","fullName","nickname","profilePicture","close","position","UserSettingsGeneralTab","Component","resendStatus","showSpinner","sendVerificationEmail","loading","handleEmailResend","usernameError","errObj","ValidationErrors","RESERVED_NAME","clientError","min","MIN_USERNAME_LENGTH","max","MAX_USERNAME_LENGTH","trackEvent","firstName","lastName","first_name","last_name","confirmEmail","currentPassword","isEmail","password","emailError","emailUpdated","sectionIsSaving","getMe","requireEmailVerification","clearErrors","logError","AnnouncementBarMessages","EMAIL_VERIFICATION_REQUIRED","AnnouncementBarTypes","SUCCESS","server_error_id","setDefaultProfileImage","submitActive","pictureFile","file","AcceptedProfileImageTypes","includes","size","maxFileSize","loadingPicture","uploadProfileImage","setupInitialState","files","originalEmail","createEmailSection","emailSection","emailVerificationEnabled","helpText","autoFocus","updateEmail","MAX_EMAIL_LENGTH","updateConfirmEmail","updateCurrentPassword","submitEmail","GITLAB_SERVICE","GOOGLE_SERVICE","OFFICE365_SERVICE","OPENID_SERVICE","LDAP_SERVICE","SAML_SERVICE","nameSection","ldapFirstNameAttributeSet","ldapLastNameAttributeSet","samlFirstNameAttributeSet","samlLastNameAttributeSet","OAUTH_SERVICES","updateFirstName","MAX_FIRSTNAME_LENGTH","updateLastName","MAX_LASTNAME_LENGTH","notifClick","updateTab","notifLink","notify","submitName","nicknameSection","usernameSection","positionSection","ldapNicknameAttributeSet","samlNicknameAttributeSet","nicknameLabel","updateNickname","MAX_NICKNAME_LENGTH","autoCapitalize","submitNickname","usernameLabel","updateUsername","submitUsername","ldapPositionAttributeSet","samlPositionAttributeSet","positionLabel","updatePosition","MAX_POSITION_LENGTH","submitPosition","pictureSection","setDefault","imgSrc","ldapPictureAttributeSet","submitPicture","last_picture_update","setDefaultProfilePicture","onSubmit","onSetDefault","defaultImageSrc","onFileChange","minMessage","RequireEmailVerification","parseInt","MaxFileSize","LdapFirstNameAttributeSet","LdapLastNameAttributeSet","SamlFirstNameAttributeSet","SamlLastNameAttributeSet","LdapNicknameAttributeSet","SamlNicknameAttributeSet","SamlPositionAttributeSet","LdapPositionAttributeSet","LdapPictureAttributeSet","DesktopNotificationSettings","cancel","getAttribute","setParentState","activityRadio","soundSection","notificationSelection","activity","NotificationLevels","MENTION","NONE","soundRadio","sound","from","isDesktopApp","desktop","semver","gte","version","setDesktopNotificationSound","isSearchable","dropdownSoundRef","data-key","data-value","ALL","handleMaxUpdateSection","formattedMessageProps","hasSoundOption","handleMinUpdateSection","selectedSound","blurDropdown","blur","active","buildMaximizedSetting","buildMinimizedSetting","EmailNotificationSetting","enableEmail","newInterval","emailInterval","CATEGORY_NOTIFICATIONS","EMAIL_INTERVAL","sendEmailNotifications","localizeMessage","batchingOptions","batchingInfo","data-enable-email","data-email-interval","handleChange","nextProps","renderMinSettingView","renderMaxSettingView","INTERVAL_NOT_SET","EnableEmailBatching","SendEmailNotifications","ManageAutoResponder","autoResponderActive","autoResponderMessage","activeToggle","handleAutoResponderChecked","resize","rows","placeholder","onMessageChanged","shiftEnter","getNotificationsStateFromProps","desktopNotificationSound","comments","pushActivity","pushStatus","UserStatuses","AWAY","notify_props","desktop_sound","desktop_notification_sound","push_status","auto_responder_active","auto_responder_message","usernameKey","customKeys","firstNameKey","channelKey","mention_keys","splice","join","channel","desktopActivity","desktopSound","customKeysChecked","notifyCommentsLevel","NotificationsTab","mentionKeys","stringKeys","result","handleCancel","val","customCheckRef","customMentionsRef","updateCustomMentionKeys","sendPushNotifications","pushActivityRadio","pushStatusRadio","pushStatusSettings","ONLINE","handlePushStatusRadio","OFFLINE","handlePushRadio","drawerRef","wrapperRef","handleNotifyCommentsRadio","keysSection","commentsSection","autoResponderSection","handleUpdateFirstNameKey","updateFirstNameKey","handleUpdateUsernameKey","updateUsernameKey","handleUpdateChannelKey","updateChannelKey","onCustomChange","concat","commentsActive","enableAutoResponder","setStateValue","pushNotificationSection","createPushNotificationSection","handleEmailRadio","activeTab","SendPushNotifications","ExperimentalEnableAutomaticReplies","UserSettingsNotifications","AccessHistoryModal","getUserAudits","onShow","content","userAudits","Modal","dialogClassName","onHide","onExited","bsSize","Header","closeButton","Title","componentClass","Body","Footer","getCurrentUserAudits","MoreInfo","currentSession","handleMoreInfo","moreInfo","firstAccessTime","getMonthLong","time","os","browser","platform","last_activity_at","ActivityLog","submitRevoke","session","device_id","deviceTypeId","deviceTypeMessage","devicePicture","deviceTitle","General","PUSH_NOTIFY_APPLE_REACT_NATIVE","PUSH_NOTIFY_ANDROID_REACT_NATIVE","devicePlatform","lastAccessTime","isMobileSession","sessionInfo","mobileSessionInfo","number","ActivityLogModal","altId","modalContent","closest","revokeSession","getSessions","sessions","activityList","reduce","oneOfType","getUserSessions","getCurrentLocale","MfaSection","browserHistory","mfaEnforced","mfaActive","buttonText","removeMfa","setupMfa","renderTitle","mfaAvailable","renderContent","renderHelpText","renderDescription","license","mfaLicensed","IsLicensed","MFA","mfaEnabled","EnableMultifactorAuthentication","EnforceMultifactorAuthentication","mfa_active","UserAccessTokenSection","tokenCreationState","handleCancelConfirm","newtokendescriptionRef","tokenError","confirmCopyToken","createUserAccessToken","newToken","confirmAction","showConfirmModal","confirmTitle","confirmMessage","confirmButton","confirmComplete","confirmHideCancel","UserUtils","handleCreateToken","confirmCreateToken","tokenId","userAccessTokens","revokeToken","revokeUserAccessToken","enableUserAccessToken","disableUserAccessToken","clearUserAccessTokens","getUserAccessTokensForUser","tokenListClass","tokenList","noTokenText","newTokenSection","activeLink","activeStatus","is_active","deactivateToken","activateToken","confirmRevokeToken","isMobile","onKeyPress","saveTokenKeyPress","btnClass","savingMessage","stopCreatingToken","additionalClassName","startCreatingToken","infoPosition","cancelButtonText","hideCancel","entities","users","myUserAccessTokens","SecurityTab","getAuthorizedOAuthApps","authorizedApps","newPassword","confirmPassword","passwordError","valid","passwordConfig","defaultState","getDefaultState","savingPassword","updateUserPassword","appId","deauthorizeOAuthApp","app","submitPassword","updateNewPassword","updateConfirmPassword","d","last_password_update","hour12","emailOption","gitlabOption","googleOption","office365Option","openidOption","ldapOption","samlOption","enableSignUpWithGitLab","to","encodeURIComponent","enableSignUpWithGoogle","enableSignUpWithOffice365","enableSignUpWithOpenId","enableLdap","enableSaml","enableSignUpWithEmail","link","apps","homepage","data-app","deauthorizeApp","icon_url","icon50","wrapperClass","authService","enableOAuthServiceProvider","loadAuthorizedOAuthApps","passwordSection","createPasswordSection","signInSection","oauthSection","tokensSection","numMethods","experimentalEnableAuthenticationTransfer","createSignInSection","createOAuthAppsSection","canUseAccessTokens","ariaLabel","dialogType","Settings","ownProps","tokensEnabled","EnableUserAccessTokens","userHasTokenRole","EnableOAuthServiceProvider","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOpenId","EnableLdap","EnableSaml","EnableSignUpWithOffice365","ExperimentalEnableAuthenticationTransfer","getPasswordConfig","getBool","UserSettingsSidebar","closeUnusedDirectMessages","channelSwitcherOption","channelSidebarOrganizationOption","sidebarPreference","grouping","sorting","unreadsAtTop","favoriteAtTop","close_unused_direct_messages","channel_switcher_section","channel_sidebar_organization","ChannelGrouping","ChannelSorting","updatedSidebarSettings","unreads_at_top","favorite_at_top","CATEGORY_SIDEBAR_SETTINGS","trackSettingChangeIfNecessary","Grouping","Sorting","UnreadsAtTop","FavoriteAtTop","NewSidebar","sectionName","showChannelOrganization","contents","CloseUnusedDirectMessages","renderAutoCloseDMLabel","sortingId","sortingDefaultMessage","atTopId","atTopDefaultMessage","helpChannelSidebarOrganizationText","renderChannelSwitcherLabel","ChannelSidebarOrganization","renderOrganizationLabel","channelSwitcherSectionDescId","channelSwitcherSectionDescDefault","isMac","helpChannelSwitcherText","ChannelSwitcherSection","showUnusedOption","showChannelSidebarOrganization","channelSidebarOrganizationDisabled","channelOrganizationSection","renderChannelOrganizationSection","channelSidebarOrganizationSection","renderChannelSidebarOrganizationSection","autoCloseDMSection","renderAutoCloseDMSection","channelSwitcherSection","renderChannelSwitcherSection","getNewSidebarPreference","getSidebarPreferences","ExperimentalChannelOrganization","ExperimentalChannelSidebarOrganization","UserSettings"],"mappings":"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","file":"12.8347d811fba26e41c0c6.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {ChromePicker, ColorResult} from 'react-color';\nimport tinycolor from 'tinycolor2';\n\ntype Props = {\n    id: string;\n    onChange: (color: string) => void;\n    value: string;\n    isDisabled?: boolean;\n}\n\ntype State = {\n    focused: boolean;\n    isOpened: boolean;\n    value: string;\n}\n\nexport default class ColorInput extends React.PureComponent<Props, State> {\n    private colorPicker: React.RefObject<HTMLDivElement>;\n    private colorInput: React.RefObject<HTMLInputElement>;\n\n    public constructor(props: Props) {\n        super(props);\n        this.colorPicker = React.createRef();\n        this.colorInput = React.createRef();\n\n        this.state = {\n            focused: false,\n            isOpened: false,\n            value: props.value,\n        };\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (!state.focused && props.value !== state.value) {\n            return {\n                value: props.value,\n            };\n        }\n\n        return null;\n    }\n\n    public componentDidUpdate(prevProps: Props, prevState: State) {\n        const {isOpened: prevIsOpened} = prevState;\n        const {isOpened} = this.state;\n\n        if (isOpened !== prevIsOpened) {\n            if (isOpened) {\n                document.addEventListener('click', this.checkClick);\n            } else {\n                document.removeEventListener('click', this.checkClick);\n            }\n        }\n    }\n\n    private checkClick = (e: MouseEvent): void => {\n        if (!this.colorPicker.current || !this.colorPicker.current.contains(e.target as Element)) {\n            this.setState({isOpened: false});\n        }\n    };\n\n    private togglePicker = () => {\n        if (!this.state.isOpened && this.colorInput.current) {\n            this.colorInput.current.focus();\n        }\n        this.setState({isOpened: !this.state.isOpened});\n    };\n\n    public handleColorChange = (newColorData: ColorResult) => {\n        this.props.onChange(newColorData.hex);\n    };\n\n    private onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value;\n\n        const color = tinycolor(value);\n        const normalizedColor = '#' + color.toHex();\n\n        if (color.isValid()) {\n            this.props.onChange(normalizedColor);\n        }\n\n        this.setState({value});\n    };\n\n    private onFocus = (event: React.FocusEvent<HTMLInputElement>): void => {\n        this.setState({\n            focused: true,\n        });\n\n        if (event.target) {\n            event.target.setSelectionRange(1, event.target.value.length);\n        }\n    }\n\n    private onBlur = () => {\n        const value = this.state.value;\n\n        const color = tinycolor(value);\n        const normalizedColor = '#' + color.toHex();\n\n        if (color.isValid()) {\n            this.props.onChange(normalizedColor);\n\n            this.setState({\n                value: normalizedColor,\n            });\n        } else {\n            this.setState({\n                value: this.props.value,\n            });\n        }\n\n        this.setState({\n            focused: false,\n        });\n    };\n\n    private onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        // open picker on enter or space\n        if (event.key === 'Enter' || event.key === ' ') {\n            this.togglePicker();\n        }\n    };\n\n    public render() {\n        const {id} = this.props;\n        const {isOpened, value} = this.state;\n\n        return (\n            <div className='color-input input-group'>\n                <input\n                    id={`${id}-inputColorValue`}\n                    ref={this.colorInput}\n                    className='form-control'\n                    type='text'\n                    value={value}\n                    onChange={this.onChange}\n                    onBlur={this.onBlur}\n                    onFocus={this.onFocus}\n                    onKeyDown={this.onKeyDown}\n                    maxLength={7}\n                    disabled={this.props.isDisabled}\n\n                />\n                {!this.props.isDisabled &&\n                    <span\n                        id={`${id}-squareColorIcon`}\n                        className='input-group-addon color-pad'\n                        onClick={this.togglePicker}\n                    >\n                        <i\n                            id={`${id}-squareColorIconValue`}\n                            className='color-icon'\n                            style={{\n                                backgroundColor: value,\n                            }}\n                        />\n                    </span>\n                }\n                {isOpened && (\n                    <div\n                        ref={this.colorPicker}\n                        className='color-popover'\n                        id={`${id}-ChromePickerModal`}\n                    >\n                        <ChromePicker\n                            color={value}\n                            onChange={this.handleColorChange}\n                            disableAlpha={true}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\n// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nvar users_1 = require(\"../selectors/entities/users\");\nvar timezone_1 = require(\"../selectors/entities/timezone\");\nvar users_2 = require(\"./users\");\nfunction autoUpdateTimezone(deviceTimezone) {\n    var _this = this;\n    return function (dispatch, getState) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var currentUer, currentTimezone, newTimezoneExists, timezone, updatedUser;\n        return tslib_1.__generator(this, function (_a) {\n            currentUer = users_1.getCurrentUser(getState());\n            currentTimezone = timezone_1.getUserTimezone(getState(), currentUer.id);\n            newTimezoneExists = currentTimezone.automaticTimezone !== deviceTimezone;\n            if (currentTimezone.useAutomaticTimezone && newTimezoneExists) {\n                timezone = {\n                    useAutomaticTimezone: 'true',\n                    automaticTimezone: deviceTimezone,\n                    manualTimezone: currentTimezone.manualTimezone,\n                };\n                updatedUser = tslib_1.__assign(tslib_1.__assign({}, currentUer), { timezone: timezone });\n                users_2.updateMe(updatedUser)(dispatch, getState);\n            }\n            return [2 /*return*/];\n        });\n    }); };\n}\nexports.autoUpdateTimezone = autoUpdateTimezone;\n//# sourceMappingURL=timezone.js.map","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nexport function activateMfa(code) {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, true, code));\n    };\n}\n\nexport function deactivateMfa() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, false));\n    };\n}\n\nexport function generateMfaSecret() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.generateMfaSecret(currentUserId));\n    };\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, FormattedTime, injectIntl, IntlShape} from 'react-intl';\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\nimport {Audit} from 'mattermost-redux/types/audits';\nimport {Channel} from 'mattermost-redux/types/channels';\n\nimport {t} from 'utils/i18n';\nimport {isSystemAdmin, toTitleCase} from 'utils/utils.jsx';\n\nconst holders = defineMessages({\n    sessionRevoked: {\n        id: t('audit_table.sessionRevoked'),\n        defaultMessage: 'The session with id {sessionId} was revoked',\n    },\n    channelCreated: {\n        id: t('audit_table.channelCreated'),\n        defaultMessage: 'Created the {channelName} channel',\n    },\n    establishedDM: {\n        id: t('audit_table.establishedDM'),\n        defaultMessage: 'Established a direct message channel with {username}',\n    },\n    nameUpdated: {\n        id: t('audit_table.nameUpdated'),\n        defaultMessage: 'Updated the {channelName} channel name',\n    },\n    headerUpdated: {\n        id: t('audit_table.headerUpdated'),\n        defaultMessage: 'Updated the {channelName} channel header',\n    },\n    channelDeleted: {\n        id: t('audit_table.channelDeleted'),\n        defaultMessage: 'Archived the channel with the URL {url}',\n    },\n    userAdded: {\n        id: t('audit_table.userAdded'),\n        defaultMessage: 'Added {username} to the {channelName} channel',\n    },\n    userRemoved: {\n        id: t('audit_table.userRemoved'),\n        defaultMessage: 'Removed {username} to the {channelName} channel',\n    },\n    attemptedRegisterApp: {\n        id: t('audit_table.attemptedRegisterApp'),\n        defaultMessage: 'Attempted to register a new OAuth Application with ID {id}',\n    },\n    attemptedAllowOAuthAccess: {\n        id: t('audit_table.attemptedAllowOAuthAccess'),\n        defaultMessage: 'Attempted to allow a new OAuth service access',\n    },\n    successfullOAuthAccess: {\n        id: t('audit_table.successfullOAuthAccess'),\n        defaultMessage: 'Successfully gave a new OAuth service access',\n    },\n    failedOAuthAccess: {\n        id: t('audit_table.failedOAuthAccess'),\n        defaultMessage: 'Failed to allow a new OAuth service access - the redirect URI did not match the previously registered callback',\n    },\n    attemptedOAuthToken: {\n        id: t('audit_table.attemptedOAuthToken'),\n        defaultMessage: 'Attempted to get an OAuth access token',\n    },\n    successfullOAuthToken: {\n        id: t('audit_table.successfullOAuthToken'),\n        defaultMessage: 'Successfully added a new OAuth service',\n    },\n    oauthTokenFailed: {\n        id: t('audit_table.oauthTokenFailed'),\n        defaultMessage: 'Failed to get an OAuth access token - {token}',\n    },\n    attemptedLogin: {\n        id: t('audit_table.attemptedLogin'),\n        defaultMessage: 'Attempted to login',\n    },\n    authenticated: {\n        id: t('audit_table.authenticated'),\n        defaultMessage: 'Successfully authenticated',\n    },\n    successfullLogin: {\n        id: t('audit_table.successfullLogin'),\n        defaultMessage: 'Successfully logged in',\n    },\n    failedLogin: {\n        id: t('audit_table.failedLogin'),\n        defaultMessage: 'FAILED login attempt',\n    },\n    updatePicture: {\n        id: t('audit_table.updatePicture'),\n        defaultMessage: 'Updated your profile picture',\n    },\n    updateGeneral: {\n        id: t('audit_table.updateGeneral'),\n        defaultMessage: 'Updated the general settings of your account',\n    },\n    attemptedPassword: {\n        id: t('audit_table.attemptedPassword'),\n        defaultMessage: 'Attempted to change password',\n    },\n    successfullPassword: {\n        id: t('audit_table.successfullPassword'),\n        defaultMessage: 'Successfully changed password',\n    },\n    failedPassword: {\n        id: t('audit_table.failedPassword'),\n        defaultMessage: 'Failed to change password - tried to update user password who was logged in through OAuth',\n    },\n    updatedRol: {\n        id: t('audit_table.updatedRol'),\n        defaultMessage: 'Updated user role(s) to ',\n    },\n    member: {\n        id: t('audit_table.member'),\n        defaultMessage: 'member',\n    },\n    accountActive: {\n        id: t('audit_table.accountActive'),\n        defaultMessage: 'Account activated',\n    },\n    accountInactive: {\n        id: t('audit_table.accountInactive'),\n        defaultMessage: 'Account deactivated',\n    },\n    by: {\n        id: t('audit_table.by'),\n        defaultMessage: ' by {username}',\n    },\n    byAdmin: {\n        id: t('audit_table.byAdmin'),\n        defaultMessage: ' by an admin',\n    },\n    sentEmail: {\n        id: t('audit_table.sentEmail'),\n        defaultMessage: 'Sent an email to {email} to reset your password',\n    },\n    attemptedReset: {\n        id: t('audit_table.attemptedReset'),\n        defaultMessage: 'Attempted to reset password',\n    },\n    successfullReset: {\n        id: t('audit_table.successfullReset'),\n        defaultMessage: 'Successfully reset password',\n    },\n    updateGlobalNotifications: {\n        id: t('audit_table.updateGlobalNotifications'),\n        defaultMessage: 'Updated your global notification settings',\n    },\n    attemptedWebhookCreate: {\n        id: t('audit_table.attemptedWebhookCreate'),\n        defaultMessage: 'Attempted to create a webhook',\n    },\n    succcessfullWebhookCreate: {\n        id: t('audit_table.successfullWebhookCreate'),\n        defaultMessage: 'Successfully created a webhook',\n    },\n    failedWebhookCreate: {\n        id: t('audit_table.failedWebhookCreate'),\n        defaultMessage: 'Failed to create a webhook - bad channel permissions',\n    },\n    attemptedWebhookDelete: {\n        id: t('audit_table.attemptedWebhookDelete'),\n        defaultMessage: 'Attempted to delete a webhook',\n    },\n    successfullWebhookDelete: {\n        id: t('audit_table.successfullWebhookDelete'),\n        defaultMessage: 'Successfully deleted a webhook',\n    },\n    failedWebhookDelete: {\n        id: t('audit_table.failedWebhookDelete'),\n        defaultMessage: 'Failed to delete a webhook - inappropriate conditions',\n    },\n    logout: {\n        id: t('audit_table.logout'),\n        defaultMessage: 'Logged out of your account',\n    },\n    verified: {\n        id: t('audit_table.verified'),\n        defaultMessage: 'Successfully verified your email address',\n    },\n    revokedAll: {\n        id: t('audit_table.revokedAll'),\n        defaultMessage: 'Revoked all current sessions for the team',\n    },\n    loginAttempt: {\n        id: t('audit_table.loginAttempt'),\n        defaultMessage: ' (Login attempt)',\n    },\n    loginFailure: {\n        id: t('audit_table.loginFailure'),\n        defaultMessage: ' (Login failure)',\n    },\n    attemptedLicenseAdd: {\n        id: t('audit_table.attemptedLicenseAdd'),\n        defaultMessage: 'Attempted to add new license',\n    },\n    successfullLicenseAdd: {\n        id: t('audit_table.successfullLicenseAdd'),\n        defaultMessage: 'Successfully added new license',\n    },\n    failedExpiredLicenseAdd: {\n        id: t('audit_table.failedExpiredLicenseAdd'),\n        defaultMessage: 'Failed to add a new license as it has either expired or not yet been started',\n    },\n    failedInvalidLicenseAdd: {\n        id: t('audit_table.failedInvalidLicenseAdd'),\n        defaultMessage: 'Failed to add an invalid license',\n    },\n    licenseRemoved: {\n        id: t('audit_table.licenseRemoved'),\n        defaultMessage: 'Successfully removed a license',\n    },\n});\n\ntype Props = {\n    intl: IntlShape;\n    audits: Audit[];\n    showUserId?: boolean;\n    showIp?: boolean;\n    showSession?: boolean;\n    currentUser: UserProfile;\n    getUser: (userId: string) => UserProfile;\n    getByName: (channelURL: string) => Channel | null | undefined;\n    actions: {\n        getMissingProfilesByIds: (userIds: string[]) => ActionFunc;\n    };\n    getDirectTeammate: (channelId: string) => any;\n};\n\ntype AuditInfo = {\n    userId: string;\n    desc: string;\n    ip: string;\n    sessionId: string;\n    timestamp: JSX.Element;\n};\n\nexport class AuditTable extends React.PureComponent<Props> {\n    componentDidMount() {\n        const ids = this.props.audits.map((audit) => audit.user_id);\n        this.props.actions.getMissingProfilesByIds(ids);\n    }\n\n    render() {\n        const {audits, showUserId, showIp, showSession} = this.props;\n        const accessList = [];\n\n        for (const [i, audit] of audits.entries()) {\n            const auditInfo = this.formatAuditInfo(audit);\n\n            let uContent;\n            if (showUserId) {\n                uContent = <td className='word-break--all'>{auditInfo.userId}</td>;\n            }\n\n            let iContent;\n            if (showIp) {\n                iContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.ip}</td>;\n            }\n\n            let sContent;\n            if (showSession) {\n                sContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.sessionId}</td>;\n            }\n\n            let descStyle = '';\n            if (auditInfo.desc.toLowerCase().indexOf('fail') !== -1) {\n                descStyle = ' color--error';\n            }\n\n            accessList[i] = (\n                <tr key={audit.id}>\n                    <td className='whitespace--nowrap word-break--all'>{auditInfo.timestamp}</td>\n                    {uContent}\n                    <td\n                        className={'word-break--all' + descStyle}\n                    >\n                        {auditInfo.desc}\n                    </td>\n                    {iContent}\n                    {sContent}\n                </tr>\n            );\n        }\n\n        let userIdContent;\n        if (showUserId) {\n            userIdContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.userId'\n                        defaultMessage='User ID'\n                    />\n                </th>\n            );\n        }\n\n        let ipContent;\n        if (showIp) {\n            ipContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.ip'\n                        defaultMessage='IP Address'\n                    />\n                </th>\n            );\n        }\n\n        let sessionContent;\n        if (showSession) {\n            sessionContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.session'\n                        defaultMessage='Session ID'\n                    />\n                </th>\n            );\n        }\n\n        return (\n            <table className='table'>\n                <thead>\n                    <tr>\n                        <th>\n                            <FormattedMessage\n                                id='audit_table.timestamp'\n                                defaultMessage='Timestamp'\n                            />\n                        </th>\n                        {userIdContent}\n                        <th>\n                            <FormattedMessage\n                                id='audit_table.action'\n                                defaultMessage='Action'\n                            />\n                        </th>\n                        {ipContent}\n                        {sessionContent}\n                    </tr>\n                </thead>\n                <tbody data-testid='auditTableBody'>\n                    {accessList}\n                </tbody>\n            </table>\n        );\n    }\n\n    formatAuditInfo(audit: Audit): AuditInfo {\n        const {formatMessage} = this.props.intl;\n        const actionURL = audit.action.replace(/\\/api\\/v[1-9]/, '');\n        let auditDesc = '';\n\n        if (actionURL.indexOf('/channels') === 0) {\n            const channelInfo = audit.extra_info.split(' ');\n            const channelNameField = channelInfo[0].split('=');\n\n            let channelURL = '';\n            let channelObj;\n            let channelName = '';\n            if (channelNameField.indexOf('name') >= 0) {\n                channelURL = channelNameField[channelNameField.indexOf('name') + 1];\n                channelObj = this.props.getByName(channelURL);\n                if (channelObj) {\n                    channelName = channelObj.display_name;\n                } else {\n                    channelName = channelURL;\n                }\n            }\n\n            switch (actionURL) {\n            case '/channels/create':\n                auditDesc = formatMessage(holders.channelCreated, {channelName});\n                break;\n            case '/channels/create_direct':\n                if (channelObj) {\n                    auditDesc = formatMessage(holders.establishedDM, {username: this.props.getDirectTeammate(channelObj.id).username});\n                }\n                break;\n            case '/channels/update':\n                auditDesc = formatMessage(holders.nameUpdated, {channelName});\n                break;\n            case '/channels/update_desc': // support the old path\n            case '/channels/update_header':\n                auditDesc = formatMessage(holders.headerUpdated, {channelName});\n                break;\n            default: {\n                let userIdField = [];\n                let userId = '';\n                let username = '';\n\n                if (channelInfo[1]) {\n                    userIdField = channelInfo[1].split('=');\n\n                    if (userIdField.indexOf('user_id') >= 0) {\n                        userId = userIdField[userIdField.indexOf('user_id') + 1];\n                        const profile = this.props.getUser(userId);\n                        if (profile) {\n                            username = profile.username;\n                        }\n                    }\n                }\n\n                if ((/\\/channels\\/[A-Za-z0-9]+\\/delete/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.channelDeleted, {url: channelURL});\n                } else if ((/\\/channels\\/[A-Za-z0-9]+\\/add/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.userAdded, {username, channelName});\n                } else if ((/\\/channels\\/[A-Za-z0-9]+\\/remove/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.userRemoved, {username, channelName});\n                }\n\n                break;\n            }\n            }\n        } else if (actionURL.indexOf('/oauth') === 0) {\n            const oauthInfo = audit.extra_info.split(' ');\n\n            switch (actionURL) {\n            case '/oauth/register': {\n                const clientIdField = oauthInfo[0].split('=');\n\n                if (clientIdField[0] === 'client_id') {\n                    auditDesc = formatMessage(holders.attemptedRegisterApp, {id: clientIdField[1]});\n                }\n\n                break;\n            }\n            case '/oauth/allow':\n                if (oauthInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedAllowOAuthAccess);\n                } else if (oauthInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullOAuthAccess);\n                } else if (oauthInfo[0] === 'fail - redirect_uri did not match registered callback') {\n                    auditDesc = formatMessage(holders.failedOAuthAccess);\n                }\n\n                break;\n            case '/oauth/access_token':\n                if (oauthInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedOAuthToken);\n                } else if (oauthInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullOAuthToken);\n                } else {\n                    const oauthTokenFailure = oauthInfo[0].split('-');\n\n                    if (oauthTokenFailure[0].trim() === 'fail' && oauthTokenFailure[1]) {\n                        auditDesc = formatMessage(holders.oauthTokenFailed, {token: oauthTokenFailure[1].trim()});\n                    }\n                }\n\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/users') === 0) {\n            const userInfo = audit.extra_info.split(' ');\n\n            switch (actionURL) {\n            case '/users/login':\n                if (userInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedLogin);\n                } else if (userInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullLogin);\n                } else if (userInfo[0] === 'authenticated') {\n                    auditDesc = formatMessage(holders.authenticated);\n                } else if (userInfo[0]) {\n                    auditDesc = formatMessage(holders.failedLogin);\n                }\n\n                break;\n            case '/users/revoke_session':\n                auditDesc = formatMessage(holders.sessionRevoked, {sessionId: userInfo[0].split('=')[1]});\n                break;\n            case '/users/newimage':\n                auditDesc = formatMessage(holders.updatePicture);\n                break;\n            case '/users/update':\n                auditDesc = formatMessage(holders.updateGeneral);\n                break;\n            case '/users/newpassword':\n                if (userInfo[0] === 'attempted') {\n                    auditDesc = formatMessage(holders.attemptedPassword);\n                } else if (userInfo[0] === 'completed') {\n                    auditDesc = formatMessage(holders.successfullPassword);\n                } else if (userInfo[0] === 'failed - tried to update user password who was logged in through oauth') {\n                    auditDesc = formatMessage(holders.failedPassword);\n                }\n\n                break;\n            case '/users/update_roles': {\n                const userRoles = userInfo[0].split('=')[1];\n\n                auditDesc = formatMessage(holders.updatedRol);\n                if (userRoles.trim()) {\n                    auditDesc += userRoles;\n                } else {\n                    auditDesc += formatMessage(holders.member);\n                }\n\n                break;\n            }\n            case '/users/update_active': {\n                const updateType = userInfo[0].split('=')[0];\n                const updateField = userInfo[0].split('=')[1];\n\n                /* Either describes account activation/deactivation or a revoked session as part of an account deactivation */\n                if (updateType === 'active') {\n                    if (updateField === 'true') {\n                        auditDesc = formatMessage(holders.accountActive);\n                    } else if (updateField === 'false') {\n                        auditDesc = formatMessage(holders.accountInactive);\n                    }\n\n                    const actingUserInfo = userInfo[1].split('=');\n                    if (actingUserInfo[0] === 'session_user') {\n                        const actingUser = this.props.getUser(actingUserInfo[1]);\n                        const user = this.props.currentUser;\n                        if (user && actingUser && isSystemAdmin(user.roles)) {\n                            auditDesc += formatMessage(holders.by, {username: actingUser.username});\n                        } else if (user && actingUser) {\n                            auditDesc += formatMessage(holders.byAdmin);\n                        }\n                    }\n                } else if (updateType === 'session_id') {\n                    auditDesc = formatMessage(holders.sessionRevoked, {sessionId: updateField});\n                }\n\n                break;\n            }\n            case '/users/send_password_reset':\n                auditDesc = formatMessage(holders.sentEmail, {email: userInfo[0].split('=')[1]});\n                break;\n            case '/users/reset_password':\n                if (userInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedReset);\n                } else if (userInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullReset);\n                }\n\n                break;\n            case '/users/update_notify':\n                auditDesc = formatMessage(holders.updateGlobalNotifications);\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/hooks') === 0) {\n            const webhookInfo = audit.extra_info;\n\n            switch (actionURL) {\n            case '/hooks/incoming/create':\n                if (webhookInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedWebhookCreate);\n                } else if (webhookInfo === 'success') {\n                    auditDesc = formatMessage(holders.succcessfullWebhookCreate);\n                } else if (webhookInfo === 'fail - bad channel permissions') {\n                    auditDesc = formatMessage(holders.failedWebhookCreate);\n                }\n\n                break;\n            case '/hooks/incoming/delete':\n                if (webhookInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedWebhookDelete);\n                } else if (webhookInfo === 'success') {\n                    auditDesc = formatMessage(holders.successfullWebhookDelete);\n                } else if (webhookInfo === 'fail - inappropriate conditions') {\n                    auditDesc = formatMessage(holders.failedWebhookDelete);\n                }\n\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/license') === 0) {\n            const licenseInfo = audit.extra_info;\n\n            switch (actionURL) {\n            case '/license/add':\n                if (licenseInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedLicenseAdd);\n                } else if (licenseInfo === 'success') {\n                    auditDesc = formatMessage(holders.successfullLicenseAdd);\n                } else if (licenseInfo === 'failed - expired or non-started license') {\n                    auditDesc = formatMessage(holders.failedExpiredLicenseAdd);\n                } else if (licenseInfo === 'failed - invalid license') {\n                    auditDesc = formatMessage(holders.failedInvalidLicenseAdd);\n                }\n\n                break;\n            case '/license/remove':\n                auditDesc = formatMessage(holders.licenseRemoved);\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/admin/download_compliance_report') === 0) {\n            auditDesc = toTitleCase(audit.extra_info);\n        } else {\n            switch (actionURL) {\n            case '/logout':\n                auditDesc = formatMessage(holders.logout);\n                break;\n            case '/verify_email':\n                auditDesc = formatMessage(holders.verified);\n                break;\n            default:\n                break;\n            }\n        }\n\n        /* If all else fails... */\n        if (!auditDesc) {\n            /* Currently not called anywhere */\n            if (audit.extra_info.indexOf('revoked_all=') >= 0) {\n                auditDesc = formatMessage(holders.revokedAll);\n            } else {\n                let actionDesc = '';\n                if (actionURL && actionURL.lastIndexOf('/') !== -1) {\n                    actionDesc = actionURL.substring(actionURL.lastIndexOf('/') + 1).replace('_', ' ');\n                    actionDesc = toTitleCase(actionDesc);\n                }\n\n                let extraInfoDesc = '';\n                if (audit.extra_info) {\n                    extraInfoDesc = audit.extra_info;\n\n                    if (extraInfoDesc.indexOf('=') !== -1) {\n                        extraInfoDesc = extraInfoDesc.substring(extraInfoDesc.indexOf('=') + 1);\n                    }\n                }\n                auditDesc = actionDesc + ' ' + extraInfoDesc;\n            }\n        }\n\n        const date = new Date(audit.create_at);\n        const timestamp = (\n            <div>\n                <div>\n                    <FormattedDate\n                        value={date}\n                        day='2-digit'\n                        month='short'\n                        year='numeric'\n                    />\n                </div>\n                <div>\n                    <FormattedTime\n                        value={date}\n                        hour='2-digit'\n                        minute='2-digit'\n                    />\n                </div>\n            </div>\n        );\n\n        const auditProfile = this.props.getUser(audit.user_id);\n\n        const userId = auditProfile ? auditProfile.email : audit.user_id;\n        const desc = auditDesc;\n        const ip = audit.ip_address;\n        const sessionId = audit.session_id;\n\n        return {\n            timestamp,\n            userId,\n            desc,\n            ip,\n            sessionId,\n        };\n    }\n}\n\nexport default injectIntl(AuditTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {getMissingProfilesByIds} from 'mattermost-redux/actions/users';\nimport {getUser, getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getChannelByName} from 'mattermost-redux/selectors/entities/channels';\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {getDirectTeammate} from 'utils/utils.jsx';\n\nimport {GlobalState} from 'types/store';\n\nimport AuditTable from './audit_table';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUser: getCurrentUser(state),\n        getUser: (userId: string) => getUser(state, userId),\n        getByName: (channelName: string) => getChannelByName(state, channelName),\n        getDirectTeammate: (channelId: string) => getDirectTeammate(state, channelId),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            getMissingProfilesByIds,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuditTable);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nvar constants_1 = require(\"../constants\");\nfunction getEmailInterval(enableEmailNotification, enableEmailBatching, emailIntervalPreference) {\n    var INTERVAL_NEVER = constants_1.Preferences.INTERVAL_NEVER, INTERVAL_IMMEDIATE = constants_1.Preferences.INTERVAL_IMMEDIATE, INTERVAL_FIFTEEN_MINUTES = constants_1.Preferences.INTERVAL_FIFTEEN_MINUTES, INTERVAL_HOUR = constants_1.Preferences.INTERVAL_HOUR;\n    var validValuesWithEmailBatching = [INTERVAL_IMMEDIATE, INTERVAL_NEVER, INTERVAL_FIFTEEN_MINUTES, INTERVAL_HOUR];\n    var validValuesWithoutEmailBatching = [INTERVAL_IMMEDIATE, INTERVAL_NEVER];\n    if (!enableEmailNotification) {\n        return INTERVAL_NEVER;\n    }\n    else if (enableEmailBatching && validValuesWithEmailBatching.indexOf(emailIntervalPreference) === -1) {\n        // When email batching is enabled, the default interval is 15 minutes\n        return INTERVAL_FIFTEEN_MINUTES;\n    }\n    else if (!enableEmailBatching && validValuesWithoutEmailBatching.indexOf(emailIntervalPreference) === -1) {\n        // When email batching is not enabled, the default interval is immediately\n        return INTERVAL_IMMEDIATE;\n    }\n    else if (enableEmailNotification && emailIntervalPreference === INTERVAL_NEVER) {\n        // When email notification is enabled, the default interval is immediately\n        return INTERVAL_IMMEDIATE;\n    }\n    return emailIntervalPreference;\n}\nexports.getEmailInterval = getEmailInterval;\n//# sourceMappingURL=notify_props.js.map","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport {AdvancedSections} from 'utils/constants';\n\nexport default class JoinLeaveSection extends React.PureComponent {\n    static propTypes = {\n        activeSection: PropTypes.string,\n        currentUserId: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string,\n        onUpdateSection: PropTypes.func.isRequired,\n        renderOnOffLabel: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            joinLeaveState: props.joinLeave,\n        };\n    }\n\n    handleOnChange = (e) => {\n        const value = e.currentTarget.value;\n\n        this.setState({joinLeaveState: value});\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState({joinLeaveState: this.props.joinLeave});\n        }\n\n        this.props.onUpdateSection(section);\n    }\n\n    handleSubmit = () => {\n        const {actions, currentUserId, onUpdateSection} = this.props;\n        const joinLeavePreference = {category: Preferences.CATEGORY_ADVANCED_SETTINGS, user_id: currentUserId, name: Preferences.ADVANCED_FILTER_JOIN_LEAVE, value: this.state.joinLeaveState};\n        actions.savePreferences(currentUserId, [joinLeavePreference]);\n\n        onUpdateSection();\n    }\n\n    render() {\n        const {joinLeaveState} = this.state;\n        if (this.props.activeSection === AdvancedSections.JOIN_LEAVE) {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.joinLeaveTitle'\n                            defaultMessage='Enable Join/Leave Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='joinLeaveSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveTitle'\n                                    defaultMessage='Enable Join/Leave Messages'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOn'\n                                        type='radio'\n                                        value={'true'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'true'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOff'\n                                        type='radio'\n                                        value={'false'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'false'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveDesc'\n                                    defaultMessage='When \"On\", System Messages saying a user has joined or left a channel will be visible. When \"Off\", the System Messages about joining or leaving a channel will be hidden. A message will still show up when you are added to a channel, so you can receive a notification.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={AdvancedSections.JOIN_LEAVE}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.joinLeaveTitle'\n                        defaultMessage='Enable Join/Leave Messages'\n                    />\n                }\n                describe={this.props.renderOnOffLabel(joinLeaveState)}\n                section={AdvancedSections.JOIN_LEAVE}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport JoinLeaveSection from './join_leave_section.jsx';\n\nfunction mapStateToProps(state) {\n    const joinLeave = getPreference(\n        state,\n        Preferences.CATEGORY_ADVANCED_SETTINGS,\n        Preferences.ADVANCED_FILTER_JOIN_LEAVE,\n        'true',\n    );\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        joinLeave,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JoinLeaveSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ConfirmModal from 'components/confirm_modal';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport JoinLeaveSection from './join_leave_section';\n\nconst PreReleaseFeatures = Constants.PRE_RELEASE_FEATURES;\n\nexport default class AdvancedSettingsDisplay extends React.PureComponent {\n    static propTypes = {\n        currentUser: PropTypes.object.isRequired,\n        advancedSettingsCategory: PropTypes.array.isRequired,\n        sendOnCtrlEnter: PropTypes.string.isRequired,\n        codeBlockOnCtrlEnter: PropTypes.bool,\n        formatting: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string.isRequired,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        enablePreviewFeatures: PropTypes.bool,\n        enableUserDeactivation: PropTypes.bool,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n            updateUserActive: PropTypes.func.isRequired,\n            revokeAllSessionsForUser: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = () => {\n        const advancedSettings = this.props.advancedSettingsCategory;\n        const settings = {\n            send_on_ctrl_enter: this.props.sendOnCtrlEnter,\n            code_block_ctrl_enter: this.props.codeBlockOnCtrlEnter,\n            formatting: this.props.formatting,\n            join_leave: this.props.joinLeave,\n        };\n\n        const preReleaseFeaturesKeys = Object.keys(PreReleaseFeatures);\n        let enabledFeatures = 0;\n        for (const as of advancedSettings) {\n            for (const key of preReleaseFeaturesKeys) {\n                const feature = PreReleaseFeatures[key];\n\n                if (as.name === Constants.FeatureTogglePrefix + feature.label) {\n                    settings[as.name] = as.value;\n\n                    if (as.value === 'true') {\n                        enabledFeatures += 1;\n                    }\n                }\n            }\n        }\n\n        const isSaving = false;\n\n        const previewFeaturesEnabled = this.props.enablePreviewFeatures;\n        const showDeactivateAccountModal = false;\n\n        return {\n            preReleaseFeatures: PreReleaseFeatures,\n            settings,\n            preReleaseFeaturesKeys,\n            enabledFeatures,\n            isSaving,\n            previewFeaturesEnabled,\n            showDeactivateAccountModal,\n        };\n    }\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n        this.setState(settings);\n    }\n\n    toggleFeature = (feature, checked) => {\n        const settings = this.state.settings;\n        settings[Constants.FeatureTogglePrefix + feature] = String(checked);\n\n        let enabledFeatures = 0;\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0 && this.state.settings[setting] === 'true') {\n                enabledFeatures++;\n            }\n        });\n\n        this.setState({settings, enabledFeatures});\n    }\n\n    saveEnabledFeatures = () => {\n        const features = [];\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0) {\n                features.push(setting);\n            }\n        });\n\n        this.handleSubmit(features);\n    }\n\n    handleSubmit = async (settings) => {\n        const preferences = [];\n        const {actions, currentUser} = this.props;\n        const userId = currentUser.id;\n\n        // this should be refactored so we can actually be certain about what type everything is\n        (Array.isArray(settings) ? settings : [settings]).forEach((setting) => {\n            preferences.push({\n                user_id: userId,\n                category: Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n        });\n\n        this.setState({isSaving: true});\n        await actions.savePreferences(userId, preferences);\n\n        this.handleUpdateSection('');\n    }\n\n    handleDeactivateAccountSubmit = async () => {\n        const userId = this.props.currentUser.id;\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateUserActive(userId, false).\n            then(({error}) => {\n                if (error) {\n                    this.setState({serverError: error.message});\n                }\n            });\n\n        const {data, error} = await this.props.actions.revokeAllSessionsForUser(userId);\n        if (data) {\n            emitUserLoggedOutEvent();\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleShowDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: true,\n        });\n    }\n\n    handleHideDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: false,\n        });\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState(this.getStateFromProps());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    }\n\n    // This function changes ctrl to cmd when OS is mac\n    getCtrlSendText = () => {\n        const description = {\n            default: {\n                id: t('user.settings.advance.sendDesc'),\n                defaultMessage: 'When enabled, CTRL + ENTER will send the message and ENTER inserts a new line.',\n            },\n            mac: {\n                id: t('user.settings.advance.sendDesc.mac'),\n                defaultMessage: 'When enabled, ⌘ + ENTER will send the message and ENTER inserts a new line.',\n            },\n        };\n        const title = {\n            default: {\n                id: t('user.settings.advance.sendTitle'),\n                defaultMessage: 'Send Messages on CTRL+ENTER',\n            },\n            mac: {\n                id: t('user.settings.advance.sendTitle.mac'),\n                defaultMessage: 'Send Messages on ⌘+ENTER',\n            },\n        };\n        if (Utils.isMac()) {\n            return {\n                ctrlSendTitle: title.mac,\n                ctrlSendDesc: description.mac,\n            };\n        }\n        return {\n            ctrlSendTitle: title.default,\n            ctrlSendDesc: description.default,\n        };\n    }\n\n    renderOnOffLabel(enabled) {\n        if (enabled === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.on'\n                defaultMessage='On'\n            />\n        );\n    }\n\n    renderCtrlEnterLabel() {\n        const ctrlEnter = this.state.settings.send_on_ctrl_enter;\n        const codeBlockCtrlEnter = this.state.settings.code_block_ctrl_enter;\n        if (ctrlEnter === 'false' && codeBlockCtrlEnter === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        } else if (ctrlEnter === 'true' && codeBlockCtrlEnter === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.onForAllMessages'\n                    defaultMessage='On for all messages'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='user.settings.advance.onForCode'\n                defaultMessage='On only for code blocks starting with ```'\n            />\n        );\n    }\n\n    renderFormattingSection = () => {\n        if (this.props.activeSection === 'formatting') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.formattingTitle'\n                            defaultMessage='Enable Post Formatting'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='formattingSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingTitle'\n                                    defaultMessage='Enable Post Formatting'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOn'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOff'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingDesc'\n                                    defaultMessage='If enabled, posts will be formatted to create links, show emoji, style the text, and add line breaks. By default, this setting is enabled.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'formatting'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.formattingTitle'\n                        defaultMessage='Enable Post Formatting'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.formatting)}\n                section={'formatting'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderFeatureLabel(feature) {\n        switch (feature) {\n        case 'MARKDOWN_PREVIEW':\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.markdown_preview'\n                    defaultMessage='Show markdown preview option in message input box'\n                />\n            );\n        default:\n            return null;\n        }\n    }\n\n    render() {\n        const serverError = this.state.serverError || null;\n        let ctrlSendSection;\n        const {ctrlSendTitle, ctrlSendDesc} = this.getCtrlSendText();\n\n        if (this.props.activeSection === 'advancedCtrlSend') {\n            const ctrlSendActive = [\n                this.state.settings.send_on_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'false',\n            ];\n\n            const inputs = [\n                <fieldset key='ctrlSendSetting'>\n                    <legend className='form-legend hidden-label'>\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOn'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[0]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'true');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForAllMessages'\n                                defaultMessage='On for all messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOnForCode'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[1]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForCode'\n                                defaultMessage='On only for code blocks starting with ```'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOff'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[2]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'false');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.off'\n                                defaultMessage='Off'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage {...ctrlSendDesc}/>\n                    </div>\n                </fieldset>,\n            ];\n            ctrlSendSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    inputs={inputs}\n                    submit={this.handleSubmit.bind(this, ['send_on_ctrl_enter', 'code_block_ctrl_enter'])}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            ctrlSendSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    describe={this.renderCtrlEnterLabel()}\n                    section={'advancedCtrlSend'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const formattingSection = this.renderFormattingSection();\n        let formattingSectionDivider = null;\n        if (formattingSection) {\n            formattingSectionDivider = <div className='divider-light'/>;\n        }\n\n        let previewFeaturesSection;\n        let previewFeaturesSectionDivider;\n        if (this.state.previewFeaturesEnabled && this.state.preReleaseFeaturesKeys.length > 0) {\n            previewFeaturesSectionDivider = (\n                <div className='divider-light'/>\n            );\n\n            if (this.props.activeSection === 'advancedPreviewFeatures') {\n                const inputs = [];\n\n                this.state.preReleaseFeaturesKeys.forEach((key) => {\n                    const feature = this.state.preReleaseFeatures[key];\n                    inputs.push(\n                        <div key={'advancedPreviewFeatures_' + feature.label}>\n                            <div className='checkbox'>\n                                <label>\n                                    <input\n                                        id={'advancedPreviewFeatures' + feature.label}\n                                        type='checkbox'\n                                        checked={this.state.settings[Constants.FeatureTogglePrefix + feature.label] === 'true'}\n                                        onChange={(e) => {\n                                            this.toggleFeature(feature.label, e.target.checked);\n                                        }}\n                                    />\n                                    {this.renderFeatureLabel(key)}\n                                </label>\n                            </div>\n                        </div>,\n                    );\n                });\n\n                inputs.push(\n                    <div key='advancedPreviewFeatures_helptext'>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.preReleaseDesc'\n                            defaultMessage=\"Check any pre-released features you'd like to preview.  You may also need to refresh the page before the setting will take effect.\"\n                        />\n                    </div>,\n                );\n                previewFeaturesSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.preReleaseTitle'\n                                defaultMessage='Preview Pre-release Features'\n                            />\n                        }\n                        inputs={inputs}\n                        submit={this.saveEnabledFeatures}\n                        saving={this.state.isSaving}\n                        server_error={serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                previewFeaturesSection = (\n                    <SettingItemMin\n                        title={Utils.localizeMessage('user.settings.advance.preReleaseTitle', 'Preview Pre-release Features')}\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.enabledFeatures'\n                                defaultMessage='{count, number} {count, plural, one {Feature} other {Features}} Enabled'\n                                values={{count: this.state.enabledFeatures}}\n                            />\n                        }\n                        section={'advancedPreviewFeatures'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        let deactivateAccountSection = '';\n        let makeConfirmationModal = '';\n        const currentUser = this.props.currentUser;\n\n        if (currentUser.auth_service === '' && this.props.enableUserDeactivation) {\n            if (this.props.activeSection === 'deactivateAccount') {\n                deactivateAccountSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        inputs={[\n                            <div key='formattingSetting'>\n                                <div>\n                                    <br/>\n                                    <FormattedMessage\n                                        id='user.settings.advance.deactivateDesc'\n                                        defaultMessage='Deactivating your account removes your ability to log in to this server and disables all email and mobile notifications. To reactivate your account, contact your System Administrator.'\n                                    />\n                                </div>\n                            </div>,\n                        ]}\n                        saveButtonText={'Deactivate'}\n                        setting={'deactivateAccount'}\n                        submit={this.handleShowDeactivateAccountModal}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                deactivateAccountSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateDescShort'\n                                defaultMessage=\"Click 'Edit' to deactivate your account\"\n                            />\n                        }\n                        section={'deactivateAccount'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n\n            const confirmButtonClass = 'btn btn-danger';\n            const deactivateMemberButton = (\n                <FormattedMessage\n                    id='user.settings.advance.deactivate_member_modal.deactivateButton'\n                    defaultMessage='Yes, deactivate my account'\n                />\n            );\n\n            makeConfirmationModal = (\n                <ConfirmModal\n                    show={this.state.showDeactivateAccountModal}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateAccountTitle'\n                            defaultMessage='Confirm Deactivation'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateDesc'\n                            defaultMessage='Are you sure you want to deactivate your account? This can only be reversed by your System Administrator.'\n                        />\n                    }\n                    confirmButtonClass={confirmButtonClass}\n                    confirmButtonText={deactivateMemberButton}\n                    onConfirm={this.handleDeactivateAccountSubmit}\n                    onCancel={this.handleHideDeactivateAccountModal}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {ctrlSendSection}\n                    {formattingSectionDivider}\n                    {formattingSection}\n                    <div className='divider-light'/>\n                    <JoinLeaveSection\n                        activeSection={this.props.activeSection}\n                        onUpdateSection={this.handleUpdateSection}\n                        renderOnOffLabel={this.renderOnOffLabel}\n                    />\n                    {previewFeaturesSectionDivider}\n                    {previewFeaturesSection}\n                    {formattingSectionDivider}\n                    {deactivateAccountSection}\n                    <div className='divider-dark'/>\n                    {makeConfirmationModal}\n                </div>\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {get, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {updateUserActive, revokeAllSessionsForUser} from 'mattermost-redux/actions/users';\n\nimport {Preferences} from 'utils/constants';\n\nimport AdvancedSettingsDisplay from './user_settings_advanced.jsx';\n\nfunction makeMapStateToProps() {\n    const getAdvancedSettingsCategory = makeGetCategory();\n\n    return (state) => {\n        const config = getConfig(state);\n\n        const enablePreviewFeatures = config.EnablePreviewFeatures === 'true';\n        const enableUserDeactivation = config.EnableUserDeactivation === 'true';\n\n        return {\n            advancedSettingsCategory: getAdvancedSettingsCategory(state, Preferences.CATEGORY_ADVANCED_SETTINGS),\n            sendOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter', 'false'),\n            codeBlockOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', 'true'),\n            formatting: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'formatting', 'true'),\n            joinLeave: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', 'true'),\n            currentUser: getCurrentUser(state),\n            enablePreviewFeatures,\n            enableUserDeactivation,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n            updateUserActive,\n            revokeAllSessionsForUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(AdvancedSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport ColorInput from 'components/color_input';\n\ntype Props = {\n    id: string;\n    label: React.ReactNode;\n    value: string;\n    onChange?: (id: string, newColor: string) => void;\n}\n\nexport default function ColorChooser(props: Props) {\n    const handleChange = (newColor: string) => {\n        props.onChange?.(props.id, newColor);\n    };\n\n    return (\n        <React.Fragment>\n            <label className='custom-label'>{props.label}</label>\n            <ColorInput\n                id={props.id}\n                value={props.value}\n                onChange={handleChange}\n            />\n        </React.Fragment>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedMessage} from 'react-intl';\nimport {setThemeDefaults} from 'mattermost-redux/utils/theme_utils';\n\nimport {t} from 'utils/i18n';\n\nimport Constants from 'utils/constants';\n\nimport LocalizedIcon from 'components/localized_icon';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport Popover from 'components/widgets/popover';\n\nimport ColorChooser from './color_chooser';\n\nconst COPY_SUCCESS_INTERVAL = 3000;\n\nconst messages = defineMessages({\n    sidebarBg: {\n        id: t('user.settings.custom_theme.sidebarBg'),\n        defaultMessage: 'Sidebar BG',\n    },\n    sidebarText: {\n        id: t('user.settings.custom_theme.sidebarText'),\n        defaultMessage: 'Sidebar Text',\n    },\n    sidebarHeaderBg: {\n        id: t('user.settings.custom_theme.sidebarHeaderBg'),\n        defaultMessage: 'Sidebar Header BG',\n    },\n    sidebarHeaderTextColor: {\n        id: t('user.settings.custom_theme.sidebarHeaderTextColor'),\n        defaultMessage: 'Sidebar Header Text',\n    },\n    sidebarUnreadText: {\n        id: t('user.settings.custom_theme.sidebarUnreadText'),\n        defaultMessage: 'Sidebar Unread Text',\n    },\n    sidebarTextHoverBg: {\n        id: t('user.settings.custom_theme.sidebarTextHoverBg'),\n        defaultMessage: 'Sidebar Text Hover BG',\n    },\n    sidebarTextActiveBorder: {\n        id: t('user.settings.custom_theme.sidebarTextActiveBorder'),\n        defaultMessage: 'Sidebar Text Active Border',\n    },\n    sidebarTextActiveColor: {\n        id: t('user.settings.custom_theme.sidebarTextActiveColor'),\n        defaultMessage: 'Sidebar Text Active Color',\n    },\n    onlineIndicator: {\n        id: t('user.settings.custom_theme.onlineIndicator'),\n        defaultMessage: 'Online Indicator',\n    },\n    awayIndicator: {\n        id: t('user.settings.custom_theme.awayIndicator'),\n        defaultMessage: 'Away Indicator',\n    },\n    dndIndicator: {\n        id: t('user.settings.custom_theme.dndIndicator'),\n        defaultMessage: 'Do Not Disturb Indicator',\n    },\n    mentionBg: {\n        id: t('user.settings.custom_theme.mentionBg'),\n        defaultMessage: 'Mention Jewel BG',\n    },\n    mentionColor: {\n        id: t('user.settings.custom_theme.mentionColor'),\n        defaultMessage: 'Mention Jewel Text',\n    },\n    centerChannelBg: {\n        id: t('user.settings.custom_theme.centerChannelBg'),\n        defaultMessage: 'Center Channel BG',\n    },\n    centerChannelColor: {\n        id: t('user.settings.custom_theme.centerChannelColor'),\n        defaultMessage: 'Center Channel Text',\n    },\n    newMessageSeparator: {\n        id: t('user.settings.custom_theme.newMessageSeparator'),\n        defaultMessage: 'New Message Separator',\n    },\n    linkColor: {\n        id: t('user.settings.custom_theme.linkColor'),\n        defaultMessage: 'Link Color',\n    },\n    buttonBg: {\n        id: t('user.settings.custom_theme.buttonBg'),\n        defaultMessage: 'Button BG',\n    },\n    buttonColor: {\n        id: t('user.settings.custom_theme.buttonColor'),\n        defaultMessage: 'Button Text',\n    },\n    errorTextColor: {\n        id: t('user.settings.custom_theme.errorTextColor'),\n        defaultMessage: 'Error Text Color',\n    },\n    mentionHighlightBg: {\n        id: t('user.settings.custom_theme.mentionHighlightBg'),\n        defaultMessage: 'Mention Highlight BG',\n    },\n    mentionHighlightLink: {\n        id: t('user.settings.custom_theme.mentionHighlightLink'),\n        defaultMessage: 'Mention Highlight Link',\n    },\n    codeTheme: {\n        id: t('user.settings.custom_theme.codeTheme'),\n        defaultMessage: 'Code Theme',\n    },\n});\n\nexport default class CustomThemeChooser extends React.PureComponent {\n    static propTypes = {\n        theme: PropTypes.object.isRequired,\n        updateTheme: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        const copyTheme = this.setCopyTheme(this.props.theme);\n\n        this.state = {\n            copyTheme,\n        };\n    }\n\n    handleColorChange = (settingId, color) => {\n        const {updateTheme, theme} = this.props;\n        if (theme[settingId] !== color) {\n            const newTheme = {\n                ...theme,\n                type: 'custom',\n                [settingId]: color,\n            };\n\n            // For backwards compatability\n            if (settingId === 'mentionBg') {\n                newTheme.mentionBj = color;\n            }\n\n            updateTheme(newTheme);\n\n            const copyTheme = this.setCopyTheme(newTheme);\n\n            this.setState({\n                copyTheme,\n            });\n        }\n    }\n\n    setCopyTheme(theme) {\n        const copyTheme = Object.assign({}, theme);\n        delete copyTheme.type;\n        delete copyTheme.image;\n\n        return JSON.stringify(copyTheme);\n    }\n\n    pasteBoxChange = (e) => {\n        let text = '';\n\n        if (window.clipboardData && window.clipboardData.getData) { // IE\n            text = window.clipboardData.getData('Text');\n        } else {\n            text = e.clipboardData.getData('Text');//e.clipboardData.getData('text/plain');\n        }\n\n        if (text.length === 0) {\n            return;\n        }\n\n        let theme;\n        try {\n            theme = JSON.parse(text);\n        } catch (err) {\n            return;\n        }\n\n        setThemeDefaults(theme);\n\n        this.setState({\n            copyTheme: JSON.stringify(theme),\n        });\n\n        theme.type = 'custom';\n        this.props.updateTheme(theme);\n    }\n\n    onChangeHandle = (e) => {\n        e.stopPropagation();\n    }\n\n    selectTheme = () => {\n        const textarea = this.refs.textarea;\n        textarea.focus();\n        textarea.setSelectionRange(0, this.state.copyTheme.length);\n    }\n\n    toggleSidebarStyles = (e) => {\n        e.preventDefault();\n\n        this.refs.sidebarStylesHeader.classList.toggle('open');\n        this.toggleSection(this.refs.sidebarStyles);\n    }\n\n    toggleCenterChannelStyles = (e) => {\n        e.preventDefault();\n\n        this.refs.centerChannelStylesHeader.classList.toggle('open');\n        this.toggleSection(this.refs.centerChannelStyles);\n    }\n\n    toggleLinkAndButtonStyles = (e) => {\n        e.preventDefault();\n\n        this.refs.linkAndButtonStylesHeader.classList.toggle('open');\n        this.toggleSection(this.refs.linkAndButtonStyles);\n    }\n\n    toggleSection(node) {\n        node.classList.toggle('open');\n\n        // set overflow after animation, so the colorchooser is fully shown\n        node.ontransitionend = () => {\n            if (node.classList.contains('open')) {\n                node.style.overflowY = 'inherit';\n            } else {\n                node.style.overflowY = 'hidden';\n            }\n        };\n    }\n\n    onCodeThemeChange = (e) => {\n        const theme = {\n            ...this.props.theme,\n            type: 'custom',\n            codeTheme: e.target.value,\n        };\n\n        this.props.updateTheme(theme);\n    }\n\n    copyTheme = () => {\n        this.selectTheme();\n        document.execCommand('copy');\n        this.showCopySuccess();\n    }\n\n    showCopySuccess = () => {\n        const copySuccess = document.querySelector('.copy-theme-success');\n        copySuccess.style.display = 'inline-block';\n\n        setTimeout(() => {\n            copySuccess.style.display = 'none';\n        }, COPY_SUCCESS_INTERVAL);\n    }\n\n    render() {\n        const theme = this.props.theme;\n\n        const sidebarElements = [];\n        const centerChannelElements = [];\n        const linkAndButtonElements = [];\n        Constants.THEME_ELEMENTS.forEach((element, index) => {\n            if (element.id === 'codeTheme') {\n                const codeThemeOptions = [];\n                let codeThemeURL = '';\n\n                element.themes.forEach((codeTheme, codeThemeIndex) => {\n                    if (codeTheme.id === theme[element.id]) {\n                        codeThemeURL = codeTheme.iconURL;\n                    }\n                    codeThemeOptions.push(\n                        <option\n                            key={'code-theme-key' + codeThemeIndex}\n                            value={codeTheme.id}\n                        >\n                            {codeTheme.uiName}\n                        </option>,\n                    );\n                });\n\n                var popoverContent = (\n                    <Popover\n                        popoverStyle='info'\n                        id='code-popover'\n                        className='code-popover'\n                    >\n                        <img\n                            width='200'\n                            alt={'code theme image'}\n                            src={codeThemeURL}\n                        />\n                    </Popover>\n                );\n\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group'\n                        key={'custom-theme-key' + index}\n                    >\n                        <label className='custom-label'>\n                            <FormattedMessage {...messages[element.id]}/>\n                        </label>\n                        <div\n                            className='input-group theme-group group--code dropdown'\n                            id={element.id}\n                        >\n                            <select\n                                id='codeThemeSelect'\n                                className='form-control'\n                                type='text'\n                                defaultValue={theme[element.id]}\n                                onChange={this.onCodeThemeChange}\n                            >\n                                {codeThemeOptions}\n                            </select>\n                            <OverlayTrigger\n                                placement='top'\n                                overlay={popoverContent}\n                                ref='headerOverlay'\n                            >\n                                <span className='input-group-addon'>\n                                    <img\n                                        alt={'code theme image'}\n                                        src={codeThemeURL}\n                                    />\n                                </span>\n                            </OverlayTrigger>\n                        </div>\n                    </div>,\n                );\n            } else if (element.group === 'centerChannelElements') {\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else if (element.group === 'sidebarElements') {\n                // Need to support old typo mentionBj element for mentionBg\n                let color = theme[element.id];\n                if (!color && element.id === 'mentionBg') {\n                    color = theme.mentionBj;\n                }\n\n                sidebarElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={color}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else {\n                linkAndButtonElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            }\n        });\n\n        const pasteBox = (\n            <div className='col-sm-12'>\n                <label className='custom-label'>\n                    <FormattedMessage\n                        id='user.settings.custom_theme.copyPaste'\n                        defaultMessage='Copy to share or paste theme colors here:'\n                    />\n                </label>\n                <textarea\n                    ref='textarea'\n                    className='form-control'\n                    id='pasteBox'\n                    value={this.state.copyTheme}\n                    onCopy={this.showCopySuccess}\n                    onPaste={this.pasteBoxChange}\n                    onChange={this.onChangeHandle}\n                    onClick={this.selectTheme}\n                />\n                <div className='mt-3'>\n                    <button\n                        className='btn btn-link copy-theme-button'\n                        onClick={this.copyTheme}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copyThemeColors'\n                            defaultMessage='Copy Theme Colors'\n                        />\n                    </button>\n                    <span\n                        className='alert alert-success copy-theme-success'\n                        role='alert'\n                        style={{display: 'none'}}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copied'\n                            defaultMessage='✔ Copied'\n                        />\n                    </span>\n                </div>\n            </div>\n        );\n\n        return (\n            <div className='appearance-section pt-2'>\n                <div className='theme-elements row'>\n                    <div\n                        ref='sidebarStylesHeader'\n                        id='sidebarStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleSidebarStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.sidebarTitle'\n                            defaultMessage='Sidebar Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='sidebarStyles'\n                        className='theme-elements__body'\n                    >\n                        {sidebarElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='centerChannelStylesHeader'\n                        id='centerChannelStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleCenterChannelStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.centerChannelTitle'\n                            defaultMessage='Center Channel Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='centerChannelStyles'\n                        id='centerChannelStyles'\n                        className='theme-elements__body'\n                    >\n                        {centerChannelElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='linkAndButtonStylesHeader'\n                        id='linkAndButtonsStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleLinkAndButtonStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.linkButtonTitle'\n                            defaultMessage='Link and Button Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='linkAndButtonStyles'\n                        className='theme-elements__body'\n                    >\n                        {linkAndButtonElements}\n                    </div>\n                </div>\n                <div className='row mt-3'>\n                    {pasteBox}\n                </div>\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class PremadeThemeChooser extends React.PureComponent {\n    render() {\n        const theme = this.props.theme;\n\n        const premadeThemes = [];\n        const allowedThemes = this.props.allowedThemes;\n        const hasAllowedThemes = allowedThemes.length > 1 || (allowedThemes[0] && allowedThemes[0].trim().length > 0);\n\n        for (const k in Constants.THEMES) {\n            if (Constants.THEMES.hasOwnProperty(k)) {\n                if (hasAllowedThemes && allowedThemes.indexOf(k) < 0) {\n                    continue;\n                }\n\n                const premadeTheme = Object.assign({}, Constants.THEMES[k]);\n\n                let activeClass = '';\n                if (premadeTheme.type === theme.type) {\n                    activeClass = 'active';\n                }\n\n                premadeThemes.push(\n                    <div\n                        className='col-xs-6 col-sm-3 premade-themes'\n                        key={'premade-theme-key' + k}\n                    >\n                        <div\n                            id={`premadeTheme${premadeTheme.type.replace(' ', '')}`}\n                            className={activeClass}\n                            onClick={() => this.props.updateTheme(premadeTheme)}\n                        >\n                            <label>\n                                <img\n                                    alt={'premade theme ' + k}\n                                    className='img-responsive'\n                                    src={premadeTheme.image}\n                                />\n                                <div className='theme-label'>{Utils.toTitleCase(premadeTheme.type)}</div>\n                            </label>\n                        </div>\n                    </div>,\n                );\n            }\n        }\n\n        return (\n            <div className='row appearance-section'>\n                <div className='clearfix'>\n                    {premadeThemes}\n                </div>\n            </div>\n        );\n    }\n}\n\nPremadeThemeChooser.propTypes = {\n    theme: PropTypes.object.isRequired,\n    updateTheme: PropTypes.func.isRequired,\n    allowedThemes: PropTypes.arrayOf(PropTypes.string),\n};\n\nPremadeThemeChooser.defaultProps = {\n    allowedThemes: [],\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PremadeThemeChooser from './premade_theme_chooser.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const allowedThemes = (config.AllowedThemes && config.AllowedThemes.split(',')) || [];\n\n    return {\n        allowedThemes,\n    };\n}\n\nexport default connect(mapStateToProps)(PremadeThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ActionTypes, Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport AppDispatcher from 'dispatcher/app_dispatcher.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport CustomThemeChooser from './custom_theme_chooser.jsx';\nimport PremadeThemeChooser from './premade_theme_chooser';\n\nexport default class ThemeSetting extends React.PureComponent {\n    static propTypes = {\n        actions: PropTypes.shape({\n            saveTheme: PropTypes.func.isRequired,\n            deleteTeamSpecificThemes: PropTypes.func.isRequired,\n        }).isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        theme: PropTypes.object,\n        selected: PropTypes.bool.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        allowCustomThemes: PropTypes.bool,\n        focused: PropTypes.bool.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...this.getStateFromProps(props),\n            isSaving: false,\n        };\n\n        this.originalTheme = Object.assign({}, this.state.theme);\n    }\n\n    componentDidMount() {\n        if (this.props.selected) {\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border'); // eslint-disable-line jquery/no-class\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selected && !this.props.selected) {\n            this.resetFields();\n        }\n\n        if (this.props.selected) {\n            $('.color-btn').removeClass('active-border'); // eslint-disable-line jquery/no-class\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border'); // eslint-disable-line jquery/no-class\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.selected) {\n            Utils.applyTheme(this.props.theme);\n        }\n    }\n\n    getStateFromProps(props = this.props) {\n        const theme = {...props.theme};\n        if (!theme.codeTheme) {\n            theme.codeTheme = Constants.DEFAULT_CODE_THEME;\n        }\n\n        return {\n            theme,\n            type: theme.type || 'premade',\n            showAllTeamsCheckbox: props.showAllTeamsCheckbox,\n            applyToAllTeams: props.applyToAllTeams,\n        };\n    }\n\n    submitTheme = async () => {\n        const teamId = this.state.applyToAllTeams ? '' : this.props.currentTeamId;\n\n        this.setState({isSaving: true});\n\n        await this.props.actions.saveTheme(teamId, this.state.theme);\n\n        if (this.state.applyToAllTeams) {\n            await this.props.actions.deleteTeamSpecificThemes();\n        }\n\n        this.props.setRequireConfirm(false);\n        this.originalTheme = Object.assign({}, this.state.theme);\n        this.props.updateSection('');\n        this.setState({isSaving: false});\n    };\n\n    updateTheme = (theme) => {\n        let themeChanged = this.state.theme.length === theme.length;\n        if (!themeChanged) {\n            for (const field in theme) {\n                if (theme.hasOwnProperty(field)) {\n                    if (this.state.theme[field] !== theme[field]) {\n                        themeChanged = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.props.setRequireConfirm(themeChanged);\n\n        this.setState({theme});\n        Utils.applyTheme(theme);\n    };\n\n    updateType(type) {\n        this.setState({type});\n    }\n\n    resetFields = () => {\n        const state = this.getStateFromProps();\n        state.serverError = null;\n        this.setState(state);\n\n        Utils.applyTheme(state.theme);\n\n        this.props.setRequireConfirm(false);\n    };\n\n    handleImportModal = () => {\n        AppDispatcher.handleViewAction({\n            type: ActionTypes.TOGGLE_IMPORT_THEME_MODAL,\n            value: true,\n            callback: this.updateTheme,\n        });\n\n        this.props.setEnforceFocus(false);\n    };\n\n    handleUpdateSection = (section) => {\n        this.props.updateSection(section);\n    };\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        const displayCustom = this.state.type === 'custom';\n\n        let custom;\n        let premade;\n        if (displayCustom && this.props.allowCustomThemes) {\n            custom = (\n                <div key='customThemeChooser'>\n                    <CustomThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        } else {\n            premade = (\n                <div key='premadeThemeChooser'>\n                    <br/>\n                    <PremadeThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        }\n\n        let themeUI;\n        if (this.props.selected) {\n            const inputs = [];\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='premadeThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='standardThemes'\n                                type='radio'\n                                name='theme'\n                                checked={!displayCustom}\n                                onChange={this.updateType.bind(this, 'premade')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.themeColors'\n                                defaultMessage='Theme Colors'\n                            />\n                        </label>\n                        <br/>\n                    </div>,\n                );\n            }\n\n            inputs.push(premade);\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='customThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='customThemes'\n                                type='radio'\n                                name='theme'\n                                checked={displayCustom}\n                                onChange={this.updateType.bind(this, 'custom')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.customTheme'\n                                defaultMessage='Custom Theme'\n                            />\n                        </label>\n                    </div>,\n                );\n\n                inputs.push(custom);\n\n                inputs.push(\n                    <div key='otherThemes'>\n                        <br/>\n                        <a\n                            id='otherThemes'\n                            href='http://docs.mattermost.com/help/settings/theme-colors.html#custom-theme-examples'\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.otherThemes'\n                                defaultMessage='See other themes'\n                            />\n                        </a>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div\n                        key='importSlackThemeButton'\n                        className='pt-2'\n                    >\n                        <button\n                            id='slackImportTheme'\n                            className='theme style--none color--link'\n                            onClick={this.handleImportModal}\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.import'\n                                defaultMessage='Import theme colors from Slack'\n                            />\n                        </button>\n                    </div>,\n                );\n            }\n\n            let allTeamsCheckbox = null;\n            if (this.state.showAllTeamsCheckbox) {\n                allTeamsCheckbox = (\n                    <div className='checkbox user-settings__submit-checkbox'>\n                        <label>\n                            <input\n                                id='applyThemeToAllTeams'\n                                type='checkbox'\n                                checked={this.state.applyToAllTeams}\n                                onChange={(e) => this.setState({applyToAllTeams: e.target.checked})}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.applyToAllTeams'\n                                defaultMessage='Apply new theme to all my teams'\n                            />\n                        </label>\n                    </div>\n                );\n            }\n\n            themeUI = (\n                <SettingItemMax\n                    inputs={inputs}\n                    submitExtra={allTeamsCheckbox}\n                    submit={this.submitTheme}\n                    disableEnterSubmit={true}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    width='full'\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            themeUI = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.theme.title'\n                            defaultMessage='Theme'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.display.theme.describe'\n                            defaultMessage='Open to manage your theme'\n                        />\n                    }\n                    section={'theme'}\n                    updateSection={this.handleUpdateSection}\n                    focused={this.props.focused}\n                />\n            );\n        }\n\n        return themeUI;\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTheme, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeamId, getMyTeamsCount} from 'mattermost-redux/selectors/entities/teams';\n\nimport {saveTheme, deleteTeamSpecificThemes} from 'mattermost-redux/actions/preferences';\n\nimport {Preferences} from 'utils/constants';\n\nimport UserSettingsTheme from './user_settings_theme.jsx';\n\nfunction makeMapStateToProps() {\n    const getThemeCategory = makeGetCategory();\n\n    return (state) => {\n        return {\n            currentTeamId: getCurrentTeamId(state),\n            theme: getTheme(state),\n            applyToAllTeams: getThemeCategory(state, Preferences.CATEGORY_THEME).length <= 1,\n            showAllTeamsCheckbox: getMyTeamsCount(state) > 1,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            saveTheme,\n            deleteTeamSpecificThemes,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(UserSettingsTheme);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\n\nimport {getSupportedTimezones} from 'utils/timezone';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass TimezoneSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n        const timezone = item;\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                onClick={this.handleClick}\n                className={className}\n                ref={(node) => {\n                    this.node = node;\n                }}\n                {...Suggestion.baseProps}\n            >\n                {timezone}\n            </div>\n        );\n    }\n}\n\nexport default class TimezoneProvider extends Provider {\n    handlePretextChanged(timezonePrefix, resultsCallback) {\n        if (timezonePrefix.length === 0) {\n            this.displayAllTimezones(resultsCallback, timezonePrefix);\n            return true;\n        }\n\n        if (timezonePrefix) {\n            this.filterTimezones(resultsCallback, timezonePrefix);\n            return true;\n        }\n\n        return false;\n    }\n\n    async displayAllTimezones(resultsCallback) {\n        resultsCallback({\n            matchedPretext: '',\n            terms: getSupportedTimezones(),\n            items: getSupportedTimezones(),\n            component: TimezoneSuggestion,\n        });\n    }\n\n    async filterTimezones(resultsCallback, timezonePrefix) {\n        const filteredTimezones = getSupportedTimezones().filter((t) => (\n            getTimezoneRegion(t).toLowerCase().indexOf(timezonePrefix) >= 0 ||\n                t.toLowerCase().indexOf(timezonePrefix) >= 0\n        ));\n\n        resultsCallback({\n            matchedPretext: timezonePrefix,\n            terms: filteredTimezones,\n            items: filteredTimezones,\n            component: TimezoneSuggestion,\n        });\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedMessage} from 'react-intl';\n\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {ActionResult} from 'mattermost-redux/types/actions';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {getBrowserTimezone} from 'utils/timezone';\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\nimport TimezoneProvider from 'components/suggestion/timezone_provider.jsx';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n}\n\ntype Props ={\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    useAutomaticTimezone: boolean;\n    automaticTimezone: string;\n    manualTimezone: string;\n    timezones: string[];\n    actions: Actions;\n}\n\ntype State ={\n    useAutomaticTimezone: boolean;\n    automaticTimezone: string;\n    manualTimezone: string;\n    manualTimezoneInput: string;\n    isSaving: boolean;\n    serverError?: string;\n}\n\nexport default class ManageTimezones extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            useAutomaticTimezone: props.useAutomaticTimezone,\n            automaticTimezone: props.automaticTimezone,\n            manualTimezone: props.manualTimezone,\n            manualTimezoneInput: props.manualTimezone,\n            isSaving: false,\n        };\n    }\n\n    onChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        this.setState({manualTimezoneInput: e.target.value});\n    };\n\n    handleTimezoneSelected = (selected: string) => {\n        if (!selected) {\n            return;\n        }\n\n        this.setState({\n            manualTimezone: selected,\n            manualTimezoneInput: selected,\n        });\n    };\n\n    timezoneNotChanged = () => {\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const {\n            useAutomaticTimezone: oldUseAutomaticTimezone,\n            automaticTimezone: oldAutomaticTimezone,\n            manualTimezone: oldManualTimezone,\n        } = this.props;\n\n        return (\n            useAutomaticTimezone === oldUseAutomaticTimezone &&\n            automaticTimezone === oldAutomaticTimezone &&\n            manualTimezone === oldManualTimezone\n        );\n    };\n\n    changeTimezone = () => {\n        if (this.timezoneNotChanged()) {\n            this.props.updateSection('');\n            return;\n        }\n\n        this.submitUser();\n    };\n\n    submitUser = () => {\n        const {user, actions} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const timezone = {\n            useAutomaticTimezone: useAutomaticTimezone.toString(),\n            automaticTimezone,\n            manualTimezone,\n        };\n\n        const updatedUser = {\n            ...user,\n            timezone,\n        };\n\n        actions.updateMe(updatedUser).\n            then((res) => {\n                if ('data' in res) {\n                    this.props.updateSection('');\n                } else if ('error' in res) {\n                    const {error} = res;\n                    let serverError;\n                    if (error instanceof Error) {\n                        serverError = error.message;\n                    } else {\n                        serverError = error as string;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    };\n\n    handleAutomaticTimezone = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const useAutomaticTimezone = e.target.checked;\n        let automaticTimezone = '';\n\n        if (useAutomaticTimezone) {\n            automaticTimezone = getBrowserTimezone();\n        }\n\n        this.setState({\n            useAutomaticTimezone,\n            automaticTimezone,\n        });\n    };\n\n    handleManualTimezone = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        this.setState({manualTimezone: e.target.value});\n    };\n\n    render() {\n        const {timezones} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n        } = this.state;\n\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const inputs = [];\n\n        const timezoneRegion = (\n            <div\n                className='section-describe pt-2'\n            >\n                {useAutomaticTimezone && getTimezoneRegion(automaticTimezone)}\n            </div>\n        );\n\n        const noTimezonesFromServer = timezones.length === 0;\n        const automaticTimezoneInput = (\n            <div className='checkbox'>\n                <label>\n                    <input\n                        id='automaticTimezoneInput'\n                        type='checkbox'\n                        checked={useAutomaticTimezone}\n                        onChange={this.handleAutomaticTimezone}\n                        disabled={noTimezonesFromServer}\n                    />\n                    <FormattedMessage\n                        id='user.settings.timezones.automatic'\n                        defaultMessage='Set automatically'\n                    />\n                    {timezoneRegion}\n                </label>\n            </div>\n        );\n\n        const providers = [new TimezoneProvider()];\n        const manualTimezoneInput = (\n            <div key='changeTimezone'>\n                <label className='control-label'>\n                    <FormattedMessage\n                        id='user.settings.timezones.change'\n                        defaultMessage='Change timezone'\n                    />\n                </label>\n                <div className='pt-2'>\n                    <SuggestionBox\n                        className='form-control focused'\n                        type='search'\n                        onChange={this.onChange}\n                        value={this.state.manualTimezoneInput}\n                        onItemSelected={this.handleTimezoneSelected}\n                        listComponent={SuggestionList}\n                        maxLength='64'\n                        requiredCharacters={0}\n                        providers={providers}\n                        listStyle='bottom'\n                        completeOnTab={false}\n                        renderDividers={false}\n                        openOnFocus={true}\n                        disabled={noTimezonesFromServer}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(automaticTimezoneInput);\n\n        if (!useAutomaticTimezone) {\n            inputs.push(manualTimezoneInput);\n        }\n\n        inputs.push(\n            <div>\n                <br/>\n                <FormattedMessage\n                    id='user.settings.timezones.promote'\n                    defaultMessage='Select the time zone used for timestamps in the user interface and email notifications.'\n                />\n            </div>,\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.timezone'\n                        defaultMessage='Timezone'\n                    />\n                }\n                containerStyle='timezone-container'\n                width='medium'\n                submit={this.changeTimezone}\n                saving={this.state.isSaving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\nimport {UserProfile} from 'mattermost-redux/types/users';\n\nimport ManageTimezones from './manage_timezones';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            updateMe,\n        }, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageTimezones);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect, {ValueType} from 'react-select';\nimport {ActionResult} from 'mattermost-redux/types/actions';\nimport {UserProfile} from 'mattermost-redux/types/users';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport {isKeyPressed} from 'utils/utils.jsx';\nimport Constants from 'utils/constants';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n};\n\ntype Props = {\n    user: UserProfile;\n    locale: string;\n    updateSection: (section: string) => void;\n    actions: Actions;\n};\n\ntype SelectedOption = {\n    value: string;\n    label: string;\n}\n\ntype State = {\n    isSaving: boolean;\n    openMenu: boolean;\n    locale: string;\n    serverError?: string;\n    selectedOption: SelectedOption;\n};\n\nexport default class ManageLanguage extends React.PureComponent<Props, State> {\n    reactSelectContainer: React.RefObject<HTMLDivElement>;\n    constructor(props: Props) {\n        super(props);\n        const locales: any = I18n.getLanguages();\n        const userLocale = props.locale;\n        const selectedOption = {\n            value: locales[userLocale].value,\n            label: locales[userLocale].name,\n        };\n        this.reactSelectContainer = React.createRef();\n\n        this.state = {\n            locale: props.locale,\n            selectedOption,\n            isSaving: false,\n            openMenu: false,\n        };\n    }\n\n    componentDidMount() {\n        const reactSelectContainer = this.reactSelectContainer.current;\n        if (reactSelectContainer) {\n            reactSelectContainer.addEventListener(\n                'keydown',\n                this.handleContainerKeyDown,\n            );\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.removeEventListener(\n                'keydown',\n                this.handleContainerKeyDown,\n            );\n        }\n    }\n\n    handleContainerKeyDown = (e: KeyboardEvent) => {\n        const modalBody = document.querySelector('.modal-body');\n        if (isKeyPressed(e, Constants.KeyCodes.ESCAPE) && this.state.openMenu) {\n            modalBody?.classList.remove('no-scroll');\n            this.setState({openMenu: false});\n            e.stopPropagation();\n        }\n    };\n\n    handleKeyDown = (e: React.KeyboardEvent) => {\n        const modalBody = document.querySelector('.modal-body');\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            modalBody?.classList.add('no-scroll');\n            this.setState({openMenu: true});\n        }\n    };\n\n    setLanguage = (selectedOption: ValueType<SelectedOption>) => {\n        if (selectedOption && 'value' in selectedOption) {\n            this.setState({\n                locale: selectedOption.value,\n                selectedOption,\n            });\n        }\n    };\n\n    changeLanguage = () => {\n        if (this.props.user.locale === this.state.locale) {\n            this.props.updateSection('');\n        } else {\n            this.submitUser({\n                ...this.props.user,\n                locale: this.state.locale,\n            });\n        }\n    };\n\n    submitUser = (user: UserProfile) => {\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe(user).then((res) => {\n            if ('data' in res) {\n                // Do nothing since changing the locale essentially refreshes the page\n            } else if ('error' in res) {\n                let serverError;\n                const {error} = res;\n                if (error instanceof Error) {\n                    serverError = error.message;\n                } else {\n                    serverError = error;\n                }\n                this.setState({serverError, isSaving: false});\n            }\n        });\n    };\n\n    handleMenuClose = () => {\n        const modalBody = document.querySelector('.modal-body');\n        if (modalBody) {\n            modalBody.classList.remove('no-scroll');\n        }\n        this.setState({openMenu: false});\n    };\n\n    handleMenuOpen = () => {\n        const modalBody = document.querySelector('.modal-body');\n        if (modalBody) {\n            modalBody.classList.add('no-scroll');\n        }\n        this.setState({openMenu: true});\n    };\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = (\n                <label className='has-error'>{this.state.serverError}</label>\n            );\n        }\n\n        const options: SelectedOption[] = [];\n        const locales: any = I18n.getLanguages();\n\n        const languages = Object.keys(locales).\n            map((l) => {\n                return {\n                    value: locales[l].value as string,\n                    name: locales[l].name,\n                    order: locales[l].order,\n                };\n            }).\n            sort((a, b) => a.order - b.order);\n\n        languages.forEach((lang) => {\n            options.push({value: lang.value, label: lang.name});\n        });\n\n        const reactStyles = {\n            menuPortal: (provided: React.CSSProperties) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n        };\n\n        const input = (\n            <div key='changeLanguage'>\n                <br/>\n                <label\n                    className='control-label'\n                    id='changeInterfaceLanguageLabel'\n                >\n                    <FormattedMessage\n                        id='user.settings.languages.change'\n                        defaultMessage='Change interface language'\n                    />\n                </label>\n                <div\n                    ref={this.reactSelectContainer}\n                    className='pt-2'\n                >\n                    <ReactSelect\n                        className='react-select react-select-top'\n                        classNamePrefix='react-select'\n                        id='displayLanguage'\n                        menuIsOpen={this.state.openMenu}\n                        menuPortalTarget={document.body}\n                        styles={reactStyles}\n                        options={options}\n                        clearable={false}\n                        onChange={this.setLanguage}\n                        onKeyDown={this.handleKeyDown}\n                        value={this.state.selectedOption}\n                        onMenuClose={this.handleMenuClose}\n                        onMenuOpen={this.handleMenuOpen}\n                        aria-labelledby='changeInterfaceLanguageLabel'\n                    />\n                    {serverError}\n                </div>\n                <div>\n                    <br/>\n                    <FormattedMarkdownMessage\n                        id='user.settings.languages.promote'\n                        defaultMessage='Select which language Mattermost displays in the user interface.\\n \\nWould you like to help with translations? Join the [Mattermost Translation Server](!http://translate.mattermost.com/) to contribute.'\n                    />\n                </div>\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.language'\n                        defaultMessage='Language'\n                    />\n                }\n                width='medium'\n                submit={this.changeLanguage}\n                saving={this.state.isSaving}\n                inputs={[input]}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\n\nimport ManageLanguages from './manage_languages';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            updateMe,\n        }, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageLanguages);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedMessage} from 'react-intl';\nimport {PreferenceType} from 'mattermost-redux/types/preferences';\nimport {UserProfile, UserTimezone} from 'mattermost-redux/types/users';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {getBrowserTimezone} from 'utils/timezone.jsx';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ThemeSetting from 'components/user_settings/display/user_settings_theme';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport ManageTimezones from './manage_timezones';\nimport ManageLanguages from './manage_languages';\n\nconst Preferences = Constants.Preferences;\n\nfunction getDisplayStateFromProps(props: Props) {\n    return {\n        militaryTime: props.militaryTime,\n        teammateNameDisplay: props.teammateNameDisplay,\n        channelDisplayMode: props.channelDisplayMode,\n        messageDisplay: props.messageDisplay,\n        collapseDisplay: props.collapseDisplay,\n        linkPreviewDisplay: props.linkPreviewDisplay,\n    };\n}\n\ntype Option = {\n    value: string;\n    radionButtonText: {\n        id: string;\n        message: string;\n        moreId?: string;\n        moreMessage?: string;\n    };\n}\n\ntype SectionProps ={\n    section: string;\n    display: string;\n    defaultDisplay: string;\n    value: string;\n    title: {\n        id: string;\n        message: string;\n    };\n    firstOption: Option;\n    secondOption: Option;\n    thirdOption?: Option;\n    description: {\n        id: string;\n        message: string;\n    };\n    disabled?: boolean;\n}\n\ntype Props = {\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    activeSection?: string;\n    closeModal?: () => void;\n    collapseModal?: () => void;\n    setRequireConfirm?: () => void;\n    setEnforceFocus?: () => void;\n    timezones: string[];\n    userTimezone: UserTimezone;\n    allowCustomThemes: boolean;\n    enableLinkPreviews: boolean;\n    defaultClientLocale: string;\n    enableThemeSelection: boolean;\n    configTeammateNameDisplay: string;\n    currentUserTimezone: string;\n    enableTimezone: boolean;\n    shouldAutoUpdateTimezone: boolean;\n    lockTeammateNameDisplay: boolean;\n    militaryTime: string;\n    teammateNameDisplay: string;\n    channelDisplayMode: string;\n    messageDisplay: string;\n    collapseDisplay: string;\n    linkPreviewDisplay: string;\n    actions: {\n        savePreferences: (userId: string, preferences: PreferenceType[]) => void;\n        getSupportedTimezones: () => void;\n        autoUpdateTimezone: (deviceTimezone: string) => void;\n    };\n}\n\ntype State = {\n    [key: string]: any;\n    isSaving: boolean;\n    militaryTime: string;\n    teammateNameDisplay: string;\n    channelDisplayMode: string;\n    messageDisplay: string;\n    collapseDisplay: string;\n    linkPreviewDisplay: string;\n    handleSubmit?: () => void;\n    serverError?: string;\n}\n\nexport default class UserSettingsDisplay extends React.PureComponent<Props, State> {\n    public prevSections: {\n        theme: string;\n\n        clock: string;\n        linkpreview: string;\n        message_display: string;\n        channel_display_mode: string;\n        languages: string;\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            ...getDisplayStateFromProps(props),\n            isSaving: false,\n        };\n\n        if (props.timezones.length === 0) {\n            props.actions.getSupportedTimezones();\n        }\n\n        this.prevSections = {\n            theme: 'dummySectionName', // dummy value that should never match any section name\n            clock: 'theme',\n            linkpreview: 'clock',\n            message_display: 'linkpreview',\n            channel_display_mode: 'message_display',\n            languages: 'channel_display_mode',\n        };\n    }\n\n    componentDidMount() {\n        const {actions, enableTimezone, shouldAutoUpdateTimezone} = this.props;\n\n        if (enableTimezone && shouldAutoUpdateTimezone) {\n            actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.teammateNameDisplay !== prevProps.teammateNameDisplay) {\n            this.updateState();\n        }\n    }\n\n    handleSubmit = async () => {\n        const userId = this.props.user.id;\n\n        const timePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.USE_MILITARY_TIME,\n            value: this.state.militaryTime,\n        };\n        const teammateNameDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.NAME_NAME_FORMAT,\n            value: this.state.teammateNameDisplay,\n        };\n        const channelDisplayModePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CHANNEL_DISPLAY_MODE,\n            value: this.state.channelDisplayMode,\n        };\n        const messageDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.MESSAGE_DISPLAY,\n            value: this.state.messageDisplay,\n        };\n        const collapseDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSE_DISPLAY,\n            value: this.state.collapseDisplay,\n        };\n        const linkPreviewDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.LINK_PREVIEW_DISPLAY,\n            value: this.state.linkPreviewDisplay,\n        };\n\n        this.setState({isSaving: true});\n\n        const preferences = [\n            timePreference,\n            channelDisplayModePreference,\n            messageDisplayPreference,\n            collapseDisplayPreference,\n            linkPreviewDisplayPreference,\n            teammateNameDisplayPreference,\n        ];\n\n        await this.props.actions.savePreferences(userId, preferences);\n\n        this.updateSection('');\n    }\n\n    handleClockRadio = (militaryTime: string) => {\n        this.setState({militaryTime});\n    }\n\n    handleTeammateNameDisplayRadio = (teammateNameDisplay: string) => {\n        this.setState({teammateNameDisplay});\n    }\n\n    handleChannelDisplayModeRadio(channelDisplayMode: string) {\n        this.setState({channelDisplayMode});\n    }\n\n    handlemessageDisplayRadio(messageDisplay: string) {\n        this.setState({messageDisplay});\n    }\n\n    handleCollapseRadio(collapseDisplay: string) {\n        this.setState({collapseDisplay});\n    }\n\n    handleLinkPreviewRadio(linkPreviewDisplay: string) {\n        this.setState({linkPreviewDisplay});\n    }\n\n    handleOnChange(display: {[key: string]: any}) {\n        this.setState({...display});\n    }\n\n    updateSection = (section: string) => {\n        this.updateState();\n        this.props.updateSection(section);\n    }\n\n    updateState = () => {\n        const newState = getDisplayStateFromProps(this.props);\n        if (!Utils.areObjectsEqual(newState, this.state)) {\n            this.setState(newState);\n        }\n\n        this.setState({isSaving: false});\n    }\n\n    createSection(props: SectionProps) {\n        const {\n            section,\n            display,\n            value,\n            title,\n            firstOption,\n            secondOption,\n            thirdOption,\n            description,\n            disabled,\n        } = props;\n        let extraInfo = null;\n        let submit: (() => Promise<void>) | null = this.handleSubmit;\n\n        const firstMessage = (\n            <FormattedMessage\n                id={firstOption.radionButtonText.id}\n                defaultMessage={firstOption.radionButtonText.message}\n            />\n        );\n\n        let moreColon;\n        let firstMessageMore;\n        if (firstOption.radionButtonText.moreId) {\n            moreColon = ': ';\n            firstMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={firstOption.radionButtonText.moreId}\n                        defaultMessage={firstOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        const secondMessage = (\n            <FormattedMessage\n                id={secondOption.radionButtonText.id}\n                defaultMessage={secondOption.radionButtonText.message}\n            />\n        );\n\n        let secondMessageMore;\n        if (secondOption.radionButtonText.moreId) {\n            secondMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={secondOption.radionButtonText.moreId}\n                        defaultMessage={secondOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        let thirdMessage;\n        if (thirdOption) {\n            thirdMessage = (\n                <FormattedMessage\n                    id={thirdOption.radionButtonText.id}\n                    defaultMessage={thirdOption.radionButtonText.message}\n                />\n            );\n        }\n\n        const messageTitle = (\n            <FormattedMessage\n                id={title.id}\n                defaultMessage={title.message}\n            />\n        );\n\n        const messageDesc = (\n            <FormattedMessage\n                id={description.id}\n                defaultMessage={description.message}\n            />\n        );\n\n        if (this.props.activeSection === section) {\n            const format = [false, false, false];\n            if (value === firstOption.value) {\n                format[0] = true;\n            } else if (value === secondOption.value) {\n                format[1] = true;\n            } else {\n                format[2] = true;\n            }\n\n            const name = section + 'Format';\n            const key = section + 'UserDisplay';\n\n            const firstDisplay = {\n                [display]: firstOption.value,\n            };\n\n            const secondDisplay = {\n                [display]: secondOption.value,\n            };\n\n            let thirdSection;\n            if (thirdOption && thirdMessage) {\n                const thirdDisplay = {\n                    [display]: thirdOption.value,\n                };\n\n                thirdSection = (\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'C'}\n                                type='radio'\n                                name={name}\n                                checked={format[2]}\n                                onChange={() => this.handleOnChange(thirdDisplay)}\n                            />\n                            {thirdMessage}\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            let inputs = [\n                <fieldset key={key}>\n                    <legend className='form-legend hidden-label'>\n                        {messageTitle}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'A'}\n                                type='radio'\n                                name={name}\n                                checked={format[0]}\n                                onChange={() => this.handleOnChange(firstDisplay)}\n                            />\n                            {firstMessage}\n                            {moreColon}\n                            {firstMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'B'}\n                                type='radio'\n                                name={name}\n                                checked={format[1]}\n                                onChange={() => this.handleOnChange(secondDisplay)}\n                            />\n                            {secondMessage}\n                            {moreColon}\n                            {secondMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    {thirdSection}\n                    <div>\n                        <br/>\n                        {messageDesc}\n                    </div>\n                </fieldset>,\n            ];\n\n            if (display === 'teammateNameDisplay' && disabled) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.display.teammateNameDisplay'\n                            defaultMessage='This field is handled through your System Administrator. If you want to change it, you need to do so through your System Administrator.'\n                        />\n                    </span>\n                );\n                submit = null;\n                inputs = [];\n            }\n            return (\n                <div>\n                    <SettingItemMax\n                        title={messageTitle}\n                        inputs={inputs}\n                        submit={submit}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.updateSection}\n                        extraInfo={extraInfo}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        let describe;\n        if (value === firstOption.value) {\n            describe = firstMessage;\n        } else if (value === secondOption.value) {\n            describe = secondMessage;\n        } else {\n            describe = thirdMessage;\n        }\n\n        return (\n            <div>\n                <SettingItemMin\n                    title={messageTitle}\n                    describe={describe}\n                    section={section}\n                    updateSection={this.updateSection}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n    }\n\n    render() {\n        const collapseSection = this.createSection({\n            section: 'collapse',\n            display: 'collapseDisplay',\n            value: this.state.collapseDisplay,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.collapseDisplay'),\n                message: 'Default Appearance of Image Previews',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOn'),\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOff'),\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: t('user.settings.display.collapseDesc'),\n                message: 'Set whether previews of image links and image attachment thumbnails show as expanded or collapsed by default. This setting can also be controlled using the slash commands /expand and /collapse.',\n            },\n        });\n\n        let linkPreviewSection = null;\n\n        if (this.props.enableLinkPreviews) {\n            linkPreviewSection = this.createSection({\n                section: 'linkpreview',\n                display: 'linkPreviewDisplay',\n                value: this.state.linkPreviewDisplay,\n                defaultDisplay: 'true',\n                title: {\n                    id: t('user.settings.display.linkPreviewDisplay'),\n                    message: 'Website Link Previews',\n                },\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOn'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOff'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.linkPreviewDesc'),\n                    message: 'When available, the first web link in a message will show a preview of the website content below the message.',\n                },\n            });\n            this.prevSections.message_display = 'linkpreview';\n        } else {\n            this.prevSections.message_display = this.prevSections.linkpreview;\n        }\n\n        const clockSection = this.createSection({\n            section: 'clock',\n            display: 'militaryTime',\n            value: this.state.militaryTime,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.clockDisplay'),\n                message: 'Clock Display',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.normalClock'),\n                    message: '12-hour clock (example: 4:00 PM)',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.militaryClock'),\n                    message: '24-hour clock (example: 16:00)',\n                },\n            },\n            description: {\n                id: t('user.settings.display.preferTime'),\n                message: 'Select how you prefer time displayed.',\n            },\n        });\n\n        const teammateNameDisplaySection = this.createSection({\n            section: Preferences.NAME_NAME_FORMAT,\n            display: 'teammateNameDisplay',\n            value: this.props.lockTeammateNameDisplay ? this.props.configTeammateNameDisplay : this.state.teammateNameDisplay,\n            defaultDisplay: this.props.configTeammateNameDisplay,\n            title: {\n                id: t('user.settings.display.teammateNameDisplayTitle'),\n                message: 'Teammate Name Display',\n            },\n            firstOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayUsername'),\n                    message: 'Show username',\n                },\n            },\n            secondOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayNicknameFullname'),\n                    message: 'Show nickname if one exists, otherwise show first and last name',\n                },\n            },\n            thirdOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayFullname'),\n                    message: 'Show first and last name',\n                },\n            },\n            description: {\n                id: t('user.settings.display.teammateNameDisplayDescription'),\n                message: 'Set how to display other user\\'s names in posts and the Direct Messages list.',\n            },\n            disabled: this.props.lockTeammateNameDisplay,\n        });\n\n        let timezoneSelection;\n        if (this.props.enableTimezone && !this.props.shouldAutoUpdateTimezone) {\n            const userTimezone = this.props.userTimezone;\n            if (this.props.activeSection === 'timezone') {\n                timezoneSelection = (\n                    <div>\n                        <ManageTimezones\n                            user={this.props.user}\n                            timezones={this.props.timezones}\n                            useAutomaticTimezone={Boolean(userTimezone.useAutomaticTimezone)}\n                            automaticTimezone={userTimezone.automaticTimezone}\n                            manualTimezone={userTimezone.manualTimezone}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                timezoneSelection = (\n                    <div>\n                        <SettingItemMin\n                            title={\n                                <FormattedMessage\n                                    id='user.settings.display.timezone'\n                                    defaultMessage='Timezone'\n                                />\n                            }\n                            describe={getTimezoneRegion(this.props.currentUserTimezone)}\n                            section={'timezone'}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            }\n        }\n\n        const messageDisplaySection = this.createSection({\n            section: Preferences.MESSAGE_DISPLAY,\n            display: 'messageDisplay',\n            value: this.state.messageDisplay,\n            defaultDisplay: Preferences.MESSAGE_DISPLAY_CLEAN,\n            title: {\n                id: t('user.settings.display.messageDisplayTitle'),\n                message: 'Message Display',\n            },\n            firstOption: {\n                value: Preferences.MESSAGE_DISPLAY_CLEAN,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayClean'),\n                    message: 'Standard',\n                    moreId: t('user.settings.display.messageDisplayCleanDes'),\n                    moreMessage: 'Easy to scan and read.',\n                },\n            },\n            secondOption: {\n                value: Preferences.MESSAGE_DISPLAY_COMPACT,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayCompact'),\n                    message: 'Compact',\n                    moreId: t('user.settings.display.messageDisplayCompactDes'),\n                    moreMessage: 'Fit as many messages on the screen as we can.',\n                },\n            },\n            description: {\n                id: t('user.settings.display.messageDisplayDescription'),\n                message: 'Select how messages in a channel should be displayed.',\n            },\n        });\n\n        const channelDisplayModeSection = this.createSection({\n            section: Preferences.CHANNEL_DISPLAY_MODE,\n            display: 'channelDisplayMode',\n            value: this.state.channelDisplayMode,\n            defaultDisplay: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n            title: {\n                id: t('user.settings.display.channelDisplayTitle'),\n                message: 'Channel Display',\n            },\n            firstOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n                radionButtonText: {\n                    id: t('user.settings.display.fullScreen'),\n                    message: 'Full width',\n                },\n            },\n            secondOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                radionButtonText: {\n                    id: t('user.settings.display.fixedWidthCentered'),\n                    message: 'Fixed width, centered',\n                },\n            },\n            description: {\n                id: t('user.settings.display.channeldisplaymode'),\n                message: 'Select the width of the center channel.',\n            },\n        });\n\n        let languagesSection;\n        let userLocale = this.props.user.locale;\n        if (this.props.activeSection === 'languages') {\n            if (!I18n.isLanguageAvailable(userLocale)) {\n                userLocale = this.props.defaultClientLocale;\n            }\n            languagesSection = (\n                <div>\n                    <ManageLanguages\n                        user={this.props.user}\n                        locale={userLocale}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        } else {\n            let locale;\n            if (I18n.isLanguageAvailable(userLocale)) {\n                locale = I18n.getLanguageInfo(userLocale).name;\n            } else {\n                locale = I18n.getLanguageInfo(this.props.defaultClientLocale).name;\n            }\n\n            languagesSection = (\n                <div>\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.display.language'\n                                defaultMessage='Language'\n                            />\n                        }\n                        describe={locale}\n                        section={'languages'}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        if (Object.keys(I18n.getLanguages()).length === 1) {\n            languagesSection = null;\n        }\n\n        let themeSection;\n        if (this.props.enableThemeSelection) {\n            themeSection = (\n                <div>\n                    <ThemeSetting\n                        selected={this.props.activeSection === 'theme'}\n                        updateSection={this.updateSection}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        allowCustomThemes={this.props.allowCustomThemes}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        return (\n            <div id='displaySettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='displaySettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {themeSection}\n                    {clockSection}\n                    {teammateNameDisplaySection}\n                    {timezoneSelection}\n                    {linkPreviewSection}\n                    {collapseSection}\n                    {messageDisplaySection}\n                    {channelDisplayModeSection}\n                    {languagesSection}\n                </div>\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {GenericAction} from 'mattermost-redux/types/actions';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getSupportedTimezones} from 'mattermost-redux/actions/general';\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\nimport {getConfig, getSupportedTimezones as getTimezones, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\n\nimport {Preferences} from 'utils/constants';\n\nimport {GlobalState} from 'types/store';\n\nimport UserSettingsDisplay from './user_settings_display';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const timezones = getTimezones(state);\n    const currentUserId = getCurrentUserId(state);\n    const userTimezone = getUserTimezone(state, currentUserId);\n    const automaticTimezoneNotSet = userTimezone && userTimezone.useAutomaticTimezone && !userTimezone.automaticTimezone;\n    const shouldAutoUpdateTimezone = !userTimezone || automaticTimezoneNotSet;\n    const allowCustomThemes = config.AllowCustomThemes === 'true';\n    const enableLinkPreviews = config.EnableLinkPreviews === 'true';\n    const defaultClientLocale = config.DefaultClientLocale as string;\n    const enableThemeSelection = config.EnableThemeSelection === 'true';\n    const enableTimezone = config.ExperimentalTimezone === 'true';\n    const lockTeammateNameDisplay = getLicense(state).LockTeammateNameDisplay === 'true' && config.LockTeammateNameDisplay === 'true';\n    const configTeammateNameDisplay = config.TeammateNameDisplay as string;\n\n    return {\n        lockTeammateNameDisplay,\n        allowCustomThemes,\n        configTeammateNameDisplay,\n        enableLinkPreviews,\n        defaultClientLocale,\n        enableThemeSelection,\n        enableTimezone,\n        timezones,\n        userTimezone,\n        shouldAutoUpdateTimezone,\n        currentUserTimezone: getUserCurrentTimezone(userTimezone) as string,\n        militaryTime: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, Preferences.USE_MILITARY_TIME_DEFAULT),\n        teammateNameDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.NAME_NAME_FORMAT, configTeammateNameDisplay),\n        channelDisplayMode: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT),\n        messageDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT),\n        collapseDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT),\n        linkPreviewDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            getSupportedTimezones,\n            autoUpdateTimezone,\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, injectIntl, IntlShape} from 'react-intl';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\nimport {UserProfile} from 'mattermost-redux/types/users';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingPicture from 'components/setting_picture.jsx';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport {AnnouncementBarMessages, AnnouncementBarTypes, AcceptedProfileImageTypes, Constants, ValidationErrors} from 'utils/constants';\n\nconst holders = defineMessages({\n    usernameReserved: {\n        id: t('user.settings.general.usernameReserved'),\n        defaultMessage: 'This username is reserved, please choose a new one.',\n    },\n    usernameRestrictions: {\n        id: t('user.settings.general.usernameRestrictions'),\n        defaultMessage: \"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-', and '_'.\",\n    },\n    validEmail: {\n        id: t('user.settings.general.validEmail'),\n        defaultMessage: 'Please enter a valid email address.',\n    },\n    emailMatch: {\n        id: t('user.settings.general.emailMatch'),\n        defaultMessage: 'The new emails you entered do not match.',\n    },\n    incorrectPassword: {\n        id: t('user.settings.general.incorrectPassword'),\n        defaultMessage: 'Your password is incorrect.',\n    },\n    emptyPassword: {\n        id: t('user.settings.general.emptyPassword'),\n        defaultMessage: 'Please enter your current password.',\n    },\n    validImage: {\n        id: t('user.settings.general.validImage'),\n        defaultMessage: 'Only BMP, JPG or PNG images may be used for profile pictures',\n    },\n    imageTooLarge: {\n        id: t('user.settings.general.imageTooLarge'),\n        defaultMessage: 'Unable to upload profile image. File is too large.',\n    },\n    uploadImage: {\n        id: t('user.settings.general.uploadImage'),\n        defaultMessage: \"Click 'Edit' to upload an image.\",\n    },\n    uploadImageMobile: {\n        id: t('user.settings.general.mobile.uploadImage'),\n        defaultMessage: 'Click to upload an image',\n    },\n    fullName: {\n        id: t('user.settings.general.fullName'),\n        defaultMessage: 'Full Name',\n    },\n    nickname: {\n        id: t('user.settings.general.nickname'),\n        defaultMessage: 'Nickname',\n    },\n    username: {\n        id: t('user.settings.general.username'),\n        defaultMessage: 'Username',\n    },\n    profilePicture: {\n        id: t('user.settings.general.profilePicture'),\n        defaultMessage: 'Profile Picture',\n    },\n    close: {\n        id: t('user.settings.general.close'),\n        defaultMessage: 'Close',\n    },\n    position: {\n        id: t('user.settings.general.position'),\n        defaultMessage: 'Position',\n    },\n});\n\nexport type Props = {\n    intl: IntlShape;\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    updateTab: (notifications: string) => void;\n    activeSection?: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    maxFileSize: number;\n    actions: {\n        logError: ({message, type}: {message: any; type: string}, status: boolean) => void;\n        clearErrors: () => void;\n        getMe: () => void;\n        updateMe: (user: UserProfile) => Promise<{\n            data: boolean;\n            error?: {\n                server_error_id: string;\n                message: string;\n            };\n        }>;\n        sendVerificationEmail: (email: string) => Promise<{\n            data: boolean;\n            error?: {\n                err: string;\n            };\n        }>;\n        setDefaultProfileImage: (id: string) => void;\n        uploadProfileImage: (id: string, file: File) => Promise<{\n            data: boolean;\n            error?: {\n                message: string;\n            };\n        }>;\n    };\n    requireEmailVerification?: boolean;\n    ldapFirstNameAttributeSet?: boolean;\n    ldapLastNameAttributeSet?: boolean;\n    samlFirstNameAttributeSet?: boolean;\n    samlLastNameAttributeSet?: boolean;\n    ldapNicknameAttributeSet?: boolean;\n    samlNicknameAttributeSet?: boolean;\n    ldapPositionAttributeSet?: boolean;\n    samlPositionAttributeSet?: boolean;\n    ldapPictureAttributeSet?: boolean;\n}\n\ntype State = {\n    username: string;\n    firstName: string;\n    lastName: string;\n    nickname: string;\n    position: string;\n    originalEmail: string;\n    email: string;\n    confirmEmail: string;\n    currentPassword: string;\n    pictureFile: File | null;\n    loadingPicture: boolean;\n    sectionIsSaving: boolean;\n    showSpinner: boolean;\n    resendStatus?: string;\n    clientError?: string | null;\n    serverError?: string | {server_error_id: string; message: string};\n    emailError?: string;\n}\n\nexport class UserSettingsGeneralTab extends React.Component<Props, State> {\n    public submitActive = false;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = this.setupInitialState(props);\n    }\n\n    handleEmailResend = (email: string) => {\n        this.setState({resendStatus: 'sending', showSpinner: true});\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    }\n\n    createEmailResendLink = (email: string) => {\n        return (\n            <span className='resend-verification-wrapper'>\n                <LoadingWrapper\n                    loading={this.state.showSpinner}\n                    text={Utils.localizeMessage('user.settings.general.sending', 'Sending')}\n                >\n                    <a\n                        onClick={() => {\n                            this.handleEmailResend(email);\n                            setTimeout(() => {\n                                this.setState({\n                                    showSpinner: false,\n                                });\n                            }, 500);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.sendAgain'\n                            defaultMessage='Send again'\n                        />\n                    </a>\n                </LoadingWrapper>\n            </span>\n        );\n    }\n\n    submitUsername = () => {\n        const user = Object.assign({}, this.props.user);\n        const username = this.state.username.trim().toLowerCase();\n\n        const {formatMessage} = this.props.intl;\n        const usernameError = Utils.isValidUsername(username);\n        if (usernameError) {\n            let errObj;\n            if (usernameError.id === ValidationErrors.RESERVED_NAME) {\n                errObj = {clientError: formatMessage(holders.usernameReserved), serverError: ''};\n            } else {\n                errObj = {clientError: formatMessage(holders.usernameRestrictions, {min: Constants.MIN_USERNAME_LENGTH, max: Constants.MAX_USERNAME_LENGTH}), serverError: ''};\n            }\n            this.setState(errObj);\n            return;\n        }\n\n        if (user.username === username) {\n            this.updateSection('');\n            return;\n        }\n\n        user.username = username;\n\n        trackEvent('settings', 'user_settings_update', {field: 'username'});\n\n        this.submitUser(user, false);\n    }\n\n    submitNickname = () => {\n        const user = Object.assign({}, this.props.user);\n        const nickname = this.state.nickname.trim();\n\n        if (user.nickname === nickname) {\n            this.updateSection('');\n            return;\n        }\n\n        user.nickname = nickname;\n\n        trackEvent('settings', 'user_settings_update', {field: 'nickname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitName = () => {\n        const user = Object.assign({}, this.props.user);\n        const firstName = this.state.firstName.trim();\n        const lastName = this.state.lastName.trim();\n\n        if (user.first_name === firstName && user.last_name === lastName) {\n            this.updateSection('');\n            return;\n        }\n\n        user.first_name = firstName;\n        user.last_name = lastName;\n\n        trackEvent('settings', 'user_settings_update', {field: 'fullname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitEmail = () => {\n        const user = Object.assign({}, this.props.user);\n        const email = this.state.email.trim().toLowerCase();\n        const confirmEmail = this.state.confirmEmail.trim().toLowerCase();\n        const currentPassword = this.state.currentPassword;\n\n        const {formatMessage} = this.props.intl;\n\n        if (email === user.email && (confirmEmail === '' || confirmEmail === user.email)) {\n            this.updateSection('');\n            return;\n        }\n\n        if (email === '' || !isEmail(email)) {\n            this.setState({emailError: formatMessage(holders.validEmail), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (email !== confirmEmail) {\n            this.setState({emailError: formatMessage(holders.emailMatch), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (currentPassword === '') {\n            this.setState({emailError: formatMessage(holders.emptyPassword), clientError: '', serverError: ''});\n            return;\n        }\n\n        user.email = email;\n        user.password = currentPassword;\n        trackEvent('settings', 'user_settings_update', {field: 'email'});\n        this.submitUser(user, true);\n    }\n\n    submitUser = (user: UserProfile, emailUpdated: boolean) => {\n        const {formatMessage} = this.props.intl;\n        this.setState({sectionIsSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.props.actions.getMe();\n                    const verificationEnabled = this.props.requireEmailVerification && emailUpdated;\n                    if (verificationEnabled) {\n                        this.props.actions.clearErrors();\n                        this.props.actions.logError({\n                            message: AnnouncementBarMessages.EMAIL_VERIFICATION_REQUIRED,\n                            type: AnnouncementBarTypes.SUCCESS,\n                        }, true);\n                    }\n                } else if (err) {\n                    let serverError;\n                    if (err.server_error_id &&\n                        err.server_error_id === 'api.user.check_user_password.invalid.app_error') {\n                        serverError = formatMessage(holders.incorrectPassword);\n                    } else if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n                }\n            });\n    }\n\n    setDefaultProfilePicture = async () => {\n        try {\n            await this.props.actions.setDefaultProfileImage(this.props.user.id);\n            this.updateSection('');\n            this.submitActive = false;\n        } catch (err) {\n            let serverError;\n            if (err.message) {\n                serverError = err.message;\n            } else {\n                serverError = err;\n            }\n            this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n        }\n    }\n\n    submitPicture = () => {\n        if (!this.state.pictureFile) {\n            return;\n        }\n\n        if (!this.submitActive) {\n            return;\n        }\n\n        trackEvent('settings', 'user_settings_update', {field: 'picture'});\n\n        const {formatMessage} = this.props.intl;\n        const file = this.state.pictureFile;\n\n        if (!AcceptedProfileImageTypes.includes(file.type)) {\n            this.setState({clientError: formatMessage(holders.validImage), serverError: ''});\n            return;\n        } else if (file.size > this.props.maxFileSize) {\n            this.setState({clientError: formatMessage(holders.imageTooLarge), serverError: ''});\n            return;\n        }\n\n        this.setState({loadingPicture: true});\n\n        this.props.actions.uploadProfileImage(this.props.user.id, file).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.submitActive = false;\n                } else if (err) {\n                    const state = this.setupInitialState(this.props);\n                    state.serverError = err.message;\n                    this.setState(state);\n                }\n            });\n    }\n\n    submitPosition = () => {\n        const user = Object.assign({}, this.props.user);\n        const position = this.state.position.trim();\n\n        if (user.position === position) {\n            this.updateSection('');\n            return;\n        }\n\n        user.position = position;\n\n        trackEvent('settings', 'user_settings_update', {field: 'position'});\n\n        this.submitUser(user, false);\n    }\n\n    updateUsername = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({username: e.target.value});\n    }\n\n    updateFirstName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({firstName: e.target.value});\n    }\n\n    updateLastName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({lastName: e.target.value});\n    }\n\n    updateNickname = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({nickname: e.target.value});\n    }\n\n    updatePosition = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({position: e.target.value});\n    }\n\n    updateEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({email: e.target.value});\n    }\n\n    updateConfirmEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({confirmEmail: e.target.value});\n    }\n\n    updateCurrentPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updatePicture = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files[0]) {\n            this.setState({pictureFile: e.target.files[0]});\n\n            this.submitActive = true;\n            this.setState({clientError: null});\n        } else {\n            this.setState({pictureFile: null});\n        }\n    }\n\n    updateSection = (section: string) => {\n        this.setState(Object.assign({}, this.setupInitialState(this.props), {clientError: '', serverError: '', emailError: '', sectionIsSaving: false}));\n        this.submitActive = false;\n        this.props.updateSection(section);\n    }\n\n    setupInitialState(props: Props) {\n        const user = props.user;\n\n        return {\n            username: user.username,\n            firstName: user.first_name,\n            lastName: user.last_name,\n            nickname: user.nickname,\n            position: user.position,\n            originalEmail: user.email,\n            email: '',\n            confirmEmail: '',\n            currentPassword: '',\n            pictureFile: null,\n            loadingPicture: false,\n            sectionIsSaving: false,\n            showSpinner: false,\n            serverError: '',\n        };\n    }\n\n    createEmailSection() {\n        const {formatMessage} = this.props.intl;\n\n        let emailSection;\n        if (this.props.activeSection === 'email') {\n            const emailVerificationEnabled = this.props.requireEmailVerification;\n            const inputs = [];\n\n            let helpText = (\n                <FormattedMessage\n                    id='user.settings.general.emailHelp1'\n                    defaultMessage='Email is used for sign-in, notifications, and password reset. Email requires verification if changed.'\n                />\n            );\n\n            if (!emailVerificationEnabled) {\n                helpText = (\n                    <FormattedMessage\n                        id='user.settings.general.emailHelp3'\n                        defaultMessage='Email is used for sign-in, notifications, and password reset.'\n                    />\n                );\n            }\n\n            let submit = null;\n\n            if (this.props.user.auth_service === '') {\n                inputs.push(\n                    <div key='currentEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentEmail'\n                                    defaultMessage='Current Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <label className='control-label word-break--all text-left'>{this.state.originalEmail}</label>\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='emailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.newEmail'\n                                    defaultMessage='New Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    autoFocus={true}\n                                    id='primaryEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.email}\n                                    aria-label={formatMessage({id: 'user.settings.general.newEmail', defaultMessage: 'New Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='confirmEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.confirmEmail'\n                                    defaultMessage='Confirm Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='confirmEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateConfirmEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.confirmEmail}\n                                    aria-label={formatMessage({id: 'user.settings.general.confirmEmail', defaultMessage: 'Confirm Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='currentPassword'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentPassword'\n                                    defaultMessage='Current Password'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='currentPassword'\n                                    className='form-control'\n                                    type='password'\n                                    onChange={this.updateCurrentPassword}\n                                    value={this.state.currentPassword}\n                                    aria-label={formatMessage({id: 'user.settings.general.currentPassword', defaultMessage: 'Current Password'})}\n                                />\n                            </div>\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n\n                submit = this.submitEmail;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.OPENID_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOpenIdCantUpdate'\n                                defaultMessage='Login occurs through OpenID Connect. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailSamlCantUpdate'\n                                defaultMessage='Login occurs through SAML. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            }\n\n            emailSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.emailError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            let describe: JSX.Element|string = '';\n            if (this.props.user.auth_service === '') {\n                describe = this.props.user.email;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGitlab'\n                        defaultMessage='Login done through GitLab ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGoogle'\n                        defaultMessage='Login done through Google Apps ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginOffice365'\n                        defaultMessage='Login done through Office 365 ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginLdap'\n                        defaultMessage='Login done through AD/LDAP ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginSaml'\n                        defaultMessage='Login done through SAML ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            }\n\n            emailSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    describe={describe}\n                    section={'email'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return emailSection;\n    }\n\n    render() {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        let clientError = null;\n        if (this.state.clientError) {\n            clientError = this.state.clientError;\n        }\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        let nameSection;\n        const inputs = [];\n\n        if (this.props.activeSection === 'name') {\n            let extraInfo;\n            let submit = null;\n            if (\n                (this.props.user.auth_service === Constants.LDAP_SERVICE &&\n                    (this.props.ldapFirstNameAttributeSet || this.props.ldapLastNameAttributeSet)) ||\n                (this.props.user.auth_service === Constants.SAML_SERVICE &&\n                    (this.props.samlFirstNameAttributeSet || this.props.samlLastNameAttributeSet)) ||\n                (Constants.OAUTH_SERVICES.includes(this.props.user.auth_service))\n            ) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                inputs.push(\n                    <div\n                        key='firstNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.firstName'\n                                defaultMessage='First Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='firstName'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateFirstName}\n                                maxLength={Constants.MAX_FIRSTNAME_LENGTH}\n                                value={this.state.firstName}\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.firstName', defaultMessage: 'First Name'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div\n                        key='lastNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.lastName'\n                                defaultMessage='Last Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='lastName'\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateLastName}\n                                maxLength={Constants.MAX_LASTNAME_LENGTH}\n                                value={this.state.lastName}\n                                aria-label={formatMessage({id: 'user.settings.general.lastName', defaultMessage: 'Last Name'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                const notifClick = (e: React.MouseEvent<HTMLAnchorElement>) => {\n                    e.preventDefault();\n                    this.updateSection('');\n                    this.props.updateTab('notifications');\n                };\n\n                const notifLink = (\n                    <a\n                        href='#'\n                        onClick={notifClick.bind(this)}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.notificationsLink'\n                            defaultMessage='Notifications'\n                        />\n                    </a>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.notificationsExtra'\n                            defaultMessage='By default, you will receive mention notifications when someone types your first name. Go to {notify} settings to change this default.'\n                            values={{\n                                notify: (notifLink),\n                            }}\n                        />\n                    </span>\n                );\n\n                submit = this.submitName;\n            }\n\n            nameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.fullName)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe: JSX.Element|string = '';\n\n            if (user.first_name && user.last_name) {\n                describe = user.first_name + ' ' + user.last_name;\n            } else if (user.first_name) {\n                describe = user.first_name;\n            } else if (user.last_name) {\n                describe = user.last_name;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyName'\n                        defaultMessage=\"Click 'Edit' to add your full name\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyName'\n                            defaultMessage='Click to add your full name'\n                        />\n                    );\n                }\n            }\n\n            nameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.fullName)}\n                    describe={describe}\n                    section={'name'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let nicknameSection;\n        if (this.props.activeSection === 'nickname') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === 'ldap' && this.props.ldapNicknameAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlNicknameAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let nicknameLabel: JSX.Element|string = (\n                    <FormattedMessage\n                        id='user.settings.general.nickname'\n                        defaultMessage='Nickname'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    nicknameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='nicknameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{nicknameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='nickname'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateNickname}\n                                value={this.state.nickname}\n                                maxLength={Constants.MAX_NICKNAME_LENGTH}\n                                autoCapitalize='off'\n                                aria-label={formatMessage({id: 'user.settings.general.nickname', defaultMessage: 'Nickname'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.nicknameExtra'\n                            defaultMessage='Use Nickname for a name you might be called that is different from your first name and username. This is most often used when two or more people have similar sounding names and usernames.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitNickname;\n            }\n\n            nicknameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.nickname)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe: JSX.Element|string = '';\n            if (user.nickname) {\n                describe = user.nickname;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyNickname'\n                        defaultMessage=\"Click 'Edit' to add a nickname\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyNickname'\n                            defaultMessage='Click to add a nickname'\n                        />\n                    );\n                }\n            }\n\n            nicknameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.nickname)}\n                    describe={describe}\n                    section={'nickname'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let usernameSection;\n        if (this.props.activeSection === 'username') {\n            let extraInfo;\n            let submit = null;\n            if (this.props.user.auth_service === '') {\n                let usernameLabel: JSX.Element | string = (\n                    <FormattedMessage\n                        id='user.settings.general.username'\n                        defaultMessage='Username'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    usernameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='usernameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{usernameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='username'\n                                autoFocus={true}\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateUsername}\n                                value={this.state.username}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.username', defaultMessage: 'Username'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.usernameInfo'\n                            defaultMessage='Pick something easy for teammates to recognize and recall.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitUsername;\n            } else {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            }\n\n            usernameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.username)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            usernameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.username)}\n                    describe={this.props.user.username}\n                    section={'username'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let positionSection;\n        if (this.props.activeSection === 'position') {\n            let extraInfo: JSX.Element|string;\n            let submit = null;\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE && this.props.ldapPositionAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlPositionAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let positionLabel: JSX.Element | string = (\n                    <FormattedMessage\n                        id='user.settings.general.position'\n                        defaultMessage='Position'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    positionLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='positionSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{positionLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='position'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updatePosition}\n                                value={this.state.position}\n                                maxLength={Constants.MAX_POSITION_LENGTH}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.position', defaultMessage: 'Position'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.positionExtra'\n                            defaultMessage='Use Position for your role or job title. This will be shown in your profile popover.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitPosition;\n            }\n\n            positionSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.position)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe: JSX.Element|string = '';\n            if (user.position) {\n                describe = user.position;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyPosition'\n                        defaultMessage=\"Click 'Edit' to add your job title / position\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyPosition'\n                            defaultMessage='Click to add your job title / position'\n                        />\n                    );\n                }\n            }\n\n            positionSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.position)}\n                    describe={describe}\n                    section={'position'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        const emailSection = this.createEmailSection();\n\n        let pictureSection;\n        if (this.props.activeSection === 'picture') {\n            let submit = null;\n            let setDefault = null;\n            let helpText = null;\n            let imgSrc = null;\n\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE || this.props.user.auth_service === Constants.SAML_SERVICE) && this.props.ldapPictureAttributeSet) {\n                helpText = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                submit = this.submitPicture;\n                setDefault = user.last_picture_update > 0 ? this.setDefaultProfilePicture : null;\n                imgSrc = Utils.imageURLForUser(user.id, user.last_picture_update);\n                helpText = (\n                    <FormattedMessage\n                        id={'setting_picture.help.profile'}\n                        defaultMessage='Upload a picture in BMP, JPG or PNG format. Maximum file size: {max}'\n                        values={{max: Utils.fileSizeToString(this.props.maxFileSize)}}\n                    />\n                );\n            }\n\n            pictureSection = (\n                <SettingPicture\n                    title={formatMessage(holders.profilePicture)}\n                    onSubmit={submit}\n                    onSetDefault={setDefault}\n                    src={imgSrc}\n                    defaultImageSrc={Utils.defaultImageURLForUser(user.id)}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={(e: MouseEvent) => {\n                        this.updateSection('');\n                        e.preventDefault();\n                    }}\n                    file={this.state.pictureFile}\n                    onFileChange={this.updatePicture}\n                    submitActive={this.submitActive}\n                    loadingPicture={this.state.loadingPicture}\n                    maxFileSize={this.props.maxFileSize}\n                    helpText={helpText}\n                />\n            );\n        } else {\n            let minMessage: JSX.Element|string = formatMessage(holders.uploadImage);\n            if (Utils.isMobile()) {\n                minMessage = formatMessage(holders.uploadImageMobile);\n            }\n            if (user.last_picture_update) {\n                minMessage = (\n                    <FormattedMessage\n                        id='user.settings.general.imageUpdated'\n                        defaultMessage='Image last updated {date}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={new Date(user.last_picture_update)}\n                                    day='2-digit'\n                                    month='short'\n                                    year='numeric'\n                                />\n                            ),\n                        }}\n                    />\n                );\n            }\n            pictureSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.profilePicture)}\n                    describe={minMessage}\n                    section={'picture'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <div id='generalSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeUserSettings'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label={formatMessage(holders.close)}\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title?: string) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='generalSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {nameSection}\n                    <div className='divider-light'/>\n                    {usernameSection}\n                    <div className='divider-light'/>\n                    {nicknameSection}\n                    <div className='divider-light'/>\n                    {positionSection}\n                    <div className='divider-light'/>\n                    {emailSection}\n                    <div className='divider-light'/>\n                    {pictureSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsGeneralTab);\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\nimport {\n    getMe,\n    updateMe,\n    sendVerificationEmail,\n    setDefaultProfileImage,\n    uploadProfileImage,\n} from 'mattermost-redux/actions/users';\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport UserSettingsGeneralTab, {Props} from './user_settings_general';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    const requireEmailVerification = config.RequireEmailVerification === 'true';\n    const maxFileSize = parseInt(config.MaxFileSize!, 10);\n    const ldapFirstNameAttributeSet = config.LdapFirstNameAttributeSet === 'true';\n    const ldapLastNameAttributeSet = config.LdapLastNameAttributeSet === 'true';\n    const samlFirstNameAttributeSet = config.SamlFirstNameAttributeSet === 'true';\n    const samlLastNameAttributeSet = config.SamlLastNameAttributeSet === 'true';\n    const ldapNicknameAttributeSet = config.LdapNicknameAttributeSet === 'true';\n    const samlNicknameAttributeSet = config.SamlNicknameAttributeSet === 'true';\n    const samlPositionAttributeSet = config.SamlPositionAttributeSet === 'true';\n    const ldapPositionAttributeSet = config.LdapPositionAttributeSet === 'true';\n    const ldapPictureAttributeSet = config.LdapPictureAttributeSet === 'true';\n\n    return {\n        requireEmailVerification,\n        maxFileSize,\n        ldapFirstNameAttributeSet,\n        ldapLastNameAttributeSet,\n        samlFirstNameAttributeSet,\n        samlLastNameAttributeSet,\n        ldapNicknameAttributeSet,\n        samlNicknameAttributeSet,\n        samlPositionAttributeSet,\n        ldapPositionAttributeSet,\n        ldapPictureAttributeSet,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Props['actions']>({\n            logError,\n            clearErrors,\n            getMe,\n            updateMe,\n            sendVerificationEmail,\n            setDefaultProfileImage,\n            uploadProfileImage,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactSelect from 'react-select';\nimport {FormattedMessage} from 'react-intl';\n\nimport semver from 'semver';\n\nimport {NotificationLevels} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport {isDesktopApp} from 'utils/user_agent';\n\nexport default class DesktopNotificationSettings extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        const selectedOption = {value: props.selectedSound, label: props.selectedSound};\n        this.state = {\n            selectedOption,\n            blurDropdown: false,\n        };\n        this.dropdownSoundRef = React.createRef();\n    }\n\n    handleMinUpdateSection = (section) => {\n        this.props.updateSection(section);\n\n        this.props.cancel();\n    }\n\n    handleMaxUpdateSection = (section) => {\n        this.props.updateSection(section);\n    }\n\n    handleOnChange = (e) => {\n        const key = e.currentTarget.getAttribute('data-key');\n        const value = e.currentTarget.getAttribute('data-value');\n        this.props.setParentState(key, value);\n    }\n\n    setDesktopNotificationSound = (selectedOption) => {\n        this.props.setParentState('desktopNotificationSound', selectedOption.value);\n        this.setState({selectedOption});\n        Utils.tryNotificationSound(selectedOption.value);\n    }\n\n    blurDropdown() {\n        if (!this.state.blurDropdown) {\n            this.setState({blurDropdown: true});\n            if (this.dropdownSoundRef.current) {\n                this.dropdownSoundRef.current.blur();\n            }\n        }\n    }\n\n    buildMaximizedSetting = () => {\n        const inputs = [];\n\n        const activityRadio = [false, false, false];\n        if (this.props.activity === NotificationLevels.MENTION) {\n            activityRadio[1] = true;\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            activityRadio[2] = true;\n        } else {\n            activityRadio[0] = true;\n        }\n\n        let soundSection;\n        let notificationSelection;\n        if (this.props.activity !== NotificationLevels.NONE) {\n            const soundRadio = [false, false];\n            if (this.props.sound === 'false') {\n                soundRadio[1] = true;\n            } else {\n                soundRadio[0] = true;\n            }\n\n            if (this.props.sound === 'true') {\n                const sounds = Array.from(Utils.notificationSounds.keys());\n                const options = sounds.map((sound) => {\n                    return {value: sound, label: sound};\n                });\n\n                if (!isDesktopApp() || (window.desktop && semver.gte(window.desktop.version, '4.6.0'))) {\n                    notificationSelection = (<div className='pt-2'>\n                        <ReactSelect\n                            className='react-select notification-sound-dropdown'\n                            classNamePrefix='react-select'\n                            id='displaySoundNotification'\n                            options={options}\n                            clearable={false}\n                            onChange={this.setDesktopNotificationSound}\n                            value={this.state.selectedOption}\n                            isSearchable={false}\n                            ref={this.dropdownSoundRef}\n                        /></div>);\n                }\n            }\n\n            if (Utils.hasSoundOptions()) {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOn'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[0]}\n                                    data-key={'desktopSound'}\n                                    data-value={'true'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOff'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[1]}\n                                    data-key={'desktopSound'}\n                                    data-value={'false'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        {notificationSelection}\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.notifications.sounds_info'\n                                defaultMessage='Notification sounds are available on Firefox, Edge, Safari, Chrome and Mattermost Desktop Apps.'\n                            />\n                        </div>\n                    </fieldset>\n                );\n            } else {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.notifications.soundConfig'\n                            defaultMessage='Please configure notification sounds in your browser settings'\n                        />\n                    </fieldset>\n                );\n            }\n        }\n\n        inputs.push(\n            <div key='userNotificationLevelOption'>\n                <fieldset>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.notifications.desktop'\n                            defaultMessage='Send desktop notifications'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationAllActivity'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[0]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.ALL}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.allActivity'\n                                defaultMessage='For all activity'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationMentions'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[1]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.MENTION}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.onlyMentions'\n                                defaultMessage='Only for mentions and direct messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationNever'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[2]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.NONE}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.never'\n                                defaultMessage='Never'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.notifications.info'\n                            defaultMessage='Desktop notifications are available on Edge, Firefox, Safari, Chrome and Mattermost Desktop Apps.'\n                        />\n                    </div>\n                </fieldset>\n                <hr/>\n                {soundSection}\n            </div>,\n        );\n\n        return (\n            <SettingItemMax\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop Notifications')}\n                inputs={inputs}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                server_error={this.props.error}\n                updateSection={this.handleMaxUpdateSection}\n            />\n        );\n    }\n\n    buildMinimizedSetting = () => {\n        let formattedMessageProps;\n        const hasSoundOption = Utils.hasSoundOptions();\n        if (this.props.activity === NotificationLevels.MENTION) {\n            if (hasSoundOption && this.props.sound !== 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSound'),\n                    defaultMessage: 'For mentions and direct messages, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsNoSound'),\n                    defaultMessage: 'For mentions and direct messages, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSoundHidden'),\n                    defaultMessage: 'For mentions and direct messages',\n                };\n            }\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            formattedMessageProps = {\n                id: t('user.settings.notifications.off'),\n                defaultMessage: 'Off',\n            };\n        } else {\n            if (hasSoundOption && this.props.sound !== 'false') { //eslint-disable-line no-lonely-if\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSound'),\n                    defaultMessage: 'For all activity, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allNoSound'),\n                    defaultMessage: 'For all activity, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSoundHidden'),\n                    defaultMessage: 'For all activity',\n                };\n            }\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop Notifications')}\n                describe={<FormattedMessage {...formattedMessageProps}/>}\n                focused={this.props.focused}\n                section={'desktop'}\n                updateSection={this.handleMinUpdateSection}\n            />\n        );\n    }\n\n    componentDidUpdate() {\n        this.blurDropdown();\n    }\n\n    render() {\n        if (this.props.active) {\n            return this.buildMaximizedSetting();\n        }\n\n        return this.buildMinimizedSetting();\n    }\n}\n\nDesktopNotificationSettings.propTypes = {\n    activity: PropTypes.string.isRequired,\n    sound: PropTypes.string.isRequired,\n    updateSection: PropTypes.func,\n    setParentState: PropTypes.func,\n    submit: PropTypes.func,\n    cancel: PropTypes.func,\n    error: PropTypes.string,\n    active: PropTypes.bool,\n    saving: PropTypes.bool,\n    focused: PropTypes.bool,\n    selectedSound: PropTypes.string,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {getEmailInterval} from 'mattermost-redux/utils/notify_props';\nimport {PreferenceType} from 'mattermost-redux/types/preferences';\n\nimport {Preferences} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nconst SECONDS_PER_MINUTE = 60;\n\ntype Props = {\n    currentUserId: string;\n    activeSection: string;\n    updateSection: (section: string) => void;\n    enableEmail: string;\n    emailInterval: number;\n    onSubmit: () => void;\n    onCancel: () => void;\n    onChange: (enableEmail: string) => void;\n    serverError?: string;\n    saving?: boolean;\n    sendEmailNotifications: boolean;\n    enableEmailBatching: boolean;\n    actions: {\n        savePreferences: (currentUserId: string, emailIntervalPreference: PreferenceType[]) =>\n        Promise<{data: boolean}>;\n    };\n};\n\ntype State = {\n    activeSection: string;\n    emailInterval: number;\n    enableEmail: string;\n    enableEmailBatching: boolean;\n    sendEmailNotifications: boolean;\n    newInterval: number;\n};\n\nexport default class EmailNotificationSetting extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = props;\n\n        this.state = {\n            activeSection,\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            newInterval: getEmailInterval(JSON.parse(enableEmail) && sendEmailNotifications, enableEmailBatching, emailInterval),\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = nextProps;\n\n        // If we're re-opening this section, reset to defaults from props\n        if (activeSection === 'email' && prevState.activeSection !== 'email') {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(JSON.parse(enableEmail) && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        if (sendEmailNotifications !== prevState.sendEmailNotifications ||\n            enableEmailBatching !== prevState.enableEmailBatching ||\n            emailInterval !== prevState.emailInterval ||\n            activeSection !== prevState.activeSection\n        ) {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(JSON.parse(enableEmail) && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        return null;\n    }\n\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const enableEmail = e.currentTarget.getAttribute('data-enable-email')!;\n        const newInterval = parseInt(e.currentTarget.getAttribute('data-email-interval')!, 10);\n\n        this.setState({\n            enableEmail,\n            newInterval,\n        });\n\n        this.props.onChange(enableEmail);\n    }\n\n    handleSubmit = async () => {\n        const {newInterval} = this.state;\n        if (this.props.emailInterval === newInterval && this.props.enableEmail === this.state.enableEmail) {\n            this.props.updateSection('');\n        } else {\n            // until the rest of the notification settings are moved to preferences, we have to do this separately\n            const {currentUserId, actions} = this.props;\n            const emailIntervalPreference = {\n                user_id: currentUserId,\n                category: Preferences.CATEGORY_NOTIFICATIONS,\n                name: Preferences.EMAIL_INTERVAL,\n                value: newInterval.toString(),\n            };\n\n            await actions.savePreferences(currentUserId, [emailIntervalPreference]);\n\n            this.props.onSubmit();\n        }\n    }\n\n    handleUpdateSection = (section?: string) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n\n            this.setState({\n                enableEmail: this.props.enableEmail,\n                newInterval: this.props.emailInterval,\n            });\n            this.props.onCancel();\n        }\n    }\n\n    renderMinSettingView = () => {\n        const {\n            enableEmail,\n            sendEmailNotifications,\n        } = this.props;\n\n        const {newInterval} = this.state;\n\n        let description;\n        if (!sendEmailNotifications) {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.disabled'\n                    defaultMessage='Email notifications are not enabled'\n                />\n            );\n        } else if (enableEmail) {\n            switch (newInterval) {\n            case Preferences.INTERVAL_IMMEDIATE:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.immediately'\n                        defaultMessage='Immediately'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_HOUR:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyHour'\n                        defaultMessage='Every hour'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_FIFTEEN_MINUTES:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyXMinutes'\n                        defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\n                        values={{count: newInterval / SECONDS_PER_MINUTE}}\n                    />\n                );\n                break;\n            default:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.never'\n                        defaultMessage='Never'\n                    />\n                );\n            }\n        } else {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.never'\n                    defaultMessage='Never'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                describe={description}\n                section={'email'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderMaxSettingView = () => {\n        if (!this.props.sendEmailNotifications) {\n            return (\n                <SettingItemMax\n                    title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                    inputs={[\n                        <div\n                            key='oauthEmailInfo'\n                            className='pt-2'\n                        >\n                            <FormattedMessage\n                                id='user.settings.notifications.email.disabled_long'\n                                defaultMessage='Email notifications have not been enabled by your System Administrator.'\n                            />\n                        </div>,\n                    ]}\n                    server_error={this.props.serverError}\n                    section={'email'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const {newInterval} = this.state;\n        let batchingOptions = null;\n        let batchingInfo = null;\n        if (this.props.enableEmailBatching) {\n            batchingOptions = (\n                <fieldset>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationMinutes'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyXMinutes'\n                                defaultMessage='Every {count} minutes'\n                                values={{count: Preferences.INTERVAL_FIFTEEN_MINUTES / SECONDS_PER_MINUTE}}\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationHour'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_HOUR}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_HOUR}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyHour'\n                                defaultMessage='Every hour'\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            batchingInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.emailBatchingInfo'\n                    defaultMessage='Notifications received over the time period selected are combined and sent in a single email.'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                inputs={[\n                    <fieldset key='userNotificationEmailOptions'>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.email.send'\n                                defaultMessage='Send email notifications'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationImmediately'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_IMMEDIATE}\n                                    data-enable-email={'true'}\n                                    data-email-interval={Preferences.INTERVAL_IMMEDIATE}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.immediately'\n                                    defaultMessage='Immediately'\n                                />\n                            </label>\n                        </div>\n                        {batchingOptions}\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationNever'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_NEVER}\n                                    data-enable-email={'false'}\n                                    data-email-interval={Preferences.INTERVAL_NEVER}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.never'\n                                    defaultMessage='Never'\n                                />\n                            </label>\n                        </div>\n                        <div className='mt-3'>\n                            <FormattedMessage\n                                id='user.settings.notifications.emailInfo'\n                                defaultMessage='Email notifications are sent for mentions and direct messages when you are offline or away for more than 5 minutes.'\n                            />\n                            {' '}\n                            {batchingInfo}\n                        </div>\n                    </fieldset>,\n                ]}\n                submit={this.handleSubmit}\n                saving={this.props.saving}\n                server_error={this.props.serverError}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.activeSection !== 'email') {\n            return this.renderMinSettingView();\n        }\n\n        return this.renderMaxSettingView();\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {PreferenceType} from 'mattermost-redux/types/preferences';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport EmailNotificationSetting from './email_notification_setting';\n\ntype Actions = {\n    savePreferences: (currentUserId: string, emailIntervalPreference: PreferenceType[]) =>\n    Promise<{data: boolean}>;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const emailInterval = parseInt(getPreference(\n        state,\n        Preferences.CATEGORY_NOTIFICATIONS,\n        Preferences.EMAIL_INTERVAL,\n        Preferences.INTERVAL_NOT_SET.toString(),\n    ), 10);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        emailInterval,\n        enableEmailBatching: config.EnableEmailBatching === 'true',\n        sendEmailNotifications: config.SendEmailNotifications === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmailNotificationSetting);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport AutosizeTextarea from 'components/autosize_textarea';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nconst MESSAGE_MAX_LENGTH = 200;\n\nexport default class ManageAutoResponder extends React.PureComponent {\n    static propTypes = {\n        autoResponderActive: PropTypes.bool.isRequired,\n        autoResponderMessage: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setParentState: PropTypes.func.isRequired,\n        submit: PropTypes.func.isRequired,\n        saving: PropTypes.bool.isRequired,\n        error: PropTypes.string,\n    };\n\n    handleAutoResponderChecked = (e) => {\n        this.props.setParentState('autoResponderActive', e.target.checked);\n    };\n\n    onMessageChanged = (e) => {\n        this.props.setParentState('autoResponderMessage', e.target.value);\n    };\n\n    render() {\n        const {\n            autoResponderActive,\n            autoResponderMessage,\n        } = this.props;\n\n        let serverError;\n        if (this.props.error) {\n            serverError = <label className='has-error'>{this.props.error}</label>;\n        }\n\n        const inputs = [];\n\n        const activeToggle = (\n            <div\n                id='autoResponderCheckbox'\n                key='autoResponderCheckbox'\n                className='checkbox'\n            >\n                <label>\n                    <input\n                        id='autoResponderActive'\n                        type='checkbox'\n                        checked={autoResponderActive}\n                        onChange={this.handleAutoResponderChecked}\n                    />\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                </label>\n            </div>\n        );\n\n        const message = (\n            <div\n                id='autoResponderMessage'\n                key='autoResponderMessage'\n            >\n                <div className='pt-2'>\n                    <AutosizeTextarea\n                        style={{resize: 'none'}}\n                        id='autoResponderMessageInput'\n                        className='form-control'\n                        rows='5'\n                        placeholder={localizeMessage('user.settings.notifications.autoResponderPlaceholder', 'Message')}\n                        value={autoResponderMessage}\n                        maxLength={MESSAGE_MAX_LENGTH}\n                        onChange={this.onMessageChanged}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(activeToggle);\n        if (autoResponderActive) {\n            inputs.push(message);\n        }\n        inputs.push((\n            <div\n                key='autoResponderHint'\n                className='mt-5'\n            >\n                <FormattedMessage\n                    id='user.settings.notifications.autoResponderHint'\n                    defaultMessage='Set a custom message that will be automatically sent in response to Direct Messages. Mentions in Public and Private Channels will not trigger the automated reply. Enabling Automatic Replies sets your status to Out of Office and disables email and push notifications.'\n                />\n            </div>\n        ));\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic Direct Message Replies'\n                    />\n                }\n                width='medium'\n                shiftEnter={true}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport semver from 'semver';\n\nimport Constants, {NotificationLevels} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport {isDesktopApp} from 'utils/user_agent';\n\nimport DesktopNotificationSettings from './desktop_notification_settings.jsx';\nimport EmailNotificationSetting from './email_notification_setting';\nimport ManageAutoResponder from './manage_auto_responder.jsx';\n\nfunction getNotificationsStateFromProps(props) {\n    const user = props.user;\n\n    let desktop = NotificationLevels.MENTION;\n    let sound = 'true';\n    let desktopNotificationSound = 'Bing';\n    let comments = 'never';\n    let enableEmail = 'true';\n    let pushActivity = NotificationLevels.MENTION;\n    let pushStatus = Constants.UserStatuses.AWAY;\n    let autoResponderActive = false;\n    let autoResponderMessage = Utils.localizeMessage(\n        'user.settings.notifications.autoResponderDefault',\n        'Hello, I am out of office and unable to respond to messages.',\n    );\n\n    if (user.notify_props) {\n        if (user.notify_props.desktop) {\n            desktop = user.notify_props.desktop;\n        }\n        if (user.notify_props.desktop_sound) {\n            sound = user.notify_props.desktop_sound;\n        }\n        if (user.notify_props.desktop_notification_sound) {\n            desktopNotificationSound = user.notify_props.desktop_notification_sound;\n        }\n        if (user.notify_props.comments) {\n            comments = user.notify_props.comments;\n        }\n        if (user.notify_props.email) {\n            enableEmail = user.notify_props.email;\n        }\n        if (user.notify_props.push) {\n            pushActivity = user.notify_props.push;\n        }\n        if (user.notify_props.push_status) {\n            pushStatus = user.notify_props.push_status;\n        }\n\n        if (user.notify_props.auto_responder_active) {\n            autoResponderActive = user.notify_props.auto_responder_active === 'true';\n        }\n\n        if (user.notify_props.auto_responder_message) {\n            autoResponderMessage = user.notify_props.auto_responder_message;\n        }\n    }\n\n    let usernameKey = false;\n    let customKeys = '';\n    let firstNameKey = false;\n    let channelKey = false;\n\n    if (user.notify_props) {\n        if (user.notify_props.mention_keys) {\n            const keys = user.notify_props.mention_keys.split(',');\n\n            if (keys.indexOf(user.username) === -1) {\n                usernameKey = false;\n            } else {\n                usernameKey = true;\n                keys.splice(keys.indexOf(user.username), 1);\n                if (keys.indexOf(`@${user.username}`) !== -1) {\n                    keys.splice(keys.indexOf(`@${user.username}`), 1);\n                }\n            }\n\n            customKeys = keys.join(',');\n        }\n\n        if (user.notify_props.first_name) {\n            firstNameKey = user.notify_props.first_name === 'true';\n        }\n\n        if (user.notify_props.channel) {\n            channelKey = user.notify_props.channel === 'true';\n        }\n    }\n\n    return {\n        desktopActivity: desktop,\n        enableEmail,\n        pushActivity,\n        pushStatus,\n        desktopSound: sound,\n        desktopNotificationSound,\n        usernameKey,\n        customKeys,\n        customKeysChecked: customKeys.length > 0,\n        firstNameKey,\n        channelKey,\n        autoResponderActive,\n        autoResponderMessage,\n        notifyCommentsLevel: comments,\n        isSaving: false,\n    };\n}\n\nexport default class NotificationsTab extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        sendPushNotifications: PropTypes.bool,\n        enableAutoResponder: PropTypes.bool,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: null,\n        activeSection: '',\n        activeTab: '',\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = getNotificationsStateFromProps(props);\n        this.customCheckRef = React.createRef();\n        this.customMentionsRef = React.createRef();\n        this.drawerRef = React.createRef();\n        this.wrapperRef = React.createRef();\n    }\n\n    handleSubmit = () => {\n        const data = {};\n        data.email = this.state.enableEmail;\n        data.desktop_sound = this.state.desktopSound;\n        if (!isDesktopApp() || (window.desktop && semver.gte(window.desktop.version, '4.6.0'))) {\n            data.desktop_notification_sound = this.state.desktopNotificationSound;\n        }\n        data.desktop = this.state.desktopActivity;\n        data.push = this.state.pushActivity;\n        data.push_status = this.state.pushStatus;\n        data.comments = this.state.notifyCommentsLevel;\n        data.auto_responder_active = this.state.autoResponderActive.toString();\n        data.auto_responder_message = this.state.autoResponderMessage;\n\n        if (!data.auto_responder_message || data.auto_responder_message === '') {\n            data.auto_responder_message = Utils.localizeMessage(\n                'user.settings.notifications.autoResponderDefault',\n                'Hello, I am out of office and unable to respond to messages.',\n            );\n        }\n\n        const mentionKeys = [];\n        if (this.state.usernameKey) {\n            mentionKeys.push(this.props.user.username);\n        }\n\n        let stringKeys = mentionKeys.join(',');\n        if (this.state.customKeys.length > 0 && this.state.customKeysChecked) {\n            stringKeys += ',' + this.state.customKeys;\n        }\n\n        data.mention_keys = stringKeys;\n        data.first_name = this.state.firstNameKey.toString();\n        data.channel = this.state.channelKey.toString();\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe({notify_props: data}).\n            then(({data: result, error: err}) => {\n                if (result) {\n                    this.handleUpdateSection('');\n                    this.setState(getNotificationsStateFromProps(this.props));\n                } else if (err) {\n                    this.setState({serverError: err.message, isSaving: false});\n                }\n            });\n    }\n\n    handleCancel = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n        this.setState(getNotificationsStateFromProps(this.props));\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n        }\n        this.setState({isSaving: false});\n        this.handleCancel();\n    };\n\n    setStateValue = (key, value) => {\n        const data = {};\n        data[key] = value;\n        this.setState(data);\n    }\n\n    handleNotifyCommentsRadio(notifyCommentsLevel) {\n        this.setState({notifyCommentsLevel});\n    }\n\n    handlePushRadio(pushActivity) {\n        this.setState({pushActivity});\n    }\n\n    handlePushStatusRadio(pushStatus) {\n        this.setState({pushStatus});\n    }\n\n    handleEmailRadio = (enableEmail) => {\n        this.setState({enableEmail});\n    }\n\n    updateUsernameKey = (val) => {\n        this.setState({usernameKey: val});\n    }\n\n    updateFirstNameKey = (val) => {\n        this.setState({firstNameKey: val});\n    }\n\n    updateChannelKey = (val) => {\n        this.setState({channelKey: val});\n    }\n\n    updateCustomMentionKeys = () => {\n        const checked = this.customCheckRef.current.checked;\n\n        if (checked) {\n            const text = this.customMentionsRef.current.value;\n\n            // remove all spaces and split string into individual keys\n            this.setState({customKeys: text.replace(/ /g, ''), customKeysChecked: true});\n        } else {\n            this.setState({customKeys: '', customKeysChecked: false});\n        }\n    }\n\n    onCustomChange = () => {\n        this.customCheckRef.current.checked = true;\n        this.updateCustomMentionKeys();\n    }\n\n    createPushNotificationSection = () => {\n        if (this.props.activeSection === 'push') {\n            const inputs = [];\n            let extraInfo = null;\n            let submit = null;\n\n            if (this.props.sendPushNotifications) {\n                const pushActivityRadio = [false, false, false];\n                if (this.state.pushActivity === NotificationLevels.ALL) {\n                    pushActivityRadio[0] = true;\n                } else if (this.state.pushActivity === NotificationLevels.NONE) {\n                    pushActivityRadio[2] = true;\n                } else {\n                    pushActivityRadio[1] = true;\n                }\n\n                const pushStatusRadio = [false, false, false];\n                if (this.state.pushStatus === Constants.UserStatuses.ONLINE) {\n                    pushStatusRadio[0] = true;\n                } else if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                    pushStatusRadio[1] = true;\n                } else {\n                    pushStatusRadio[2] = true;\n                }\n\n                let pushStatusSettings;\n                if (this.state.pushActivity !== NotificationLevels.NONE) {\n                    pushStatusSettings = (\n                        <fieldset>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.notifications.push_notification.status'\n                                    defaultMessage='Trigger push notifications when'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOnline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[0]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.ONLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.online'\n                                        defaultMessage='Online, away or offline'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAway'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[1]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.AWAY)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.away'\n                                        defaultMessage='Away or offline'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOffline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[2]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.OFFLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.offline'\n                                        defaultMessage='Offline'\n                                    />\n                                </label>\n                            </div>\n                        </fieldset>\n                    );\n\n                    extraInfo = (\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.push_notification.status_info'\n                                defaultMessage='Notification alerts are only pushed to your mobile device when your online status matches the selection above.'\n                            />\n                        </span>\n                    );\n                }\n\n                inputs.push(\n                    <div>\n                        <fieldset key='userNotificationLevelOption'>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.send'\n                                    defaultMessage='Send mobile push notifications'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAllActivity'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[0]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.ALL)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.allActivity'\n                                        defaultMessage='For all activity'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationMentions'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[1]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.MENTION)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.onlyMentions'\n                                        defaultMessage='For mentions and direct messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationNever'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[2]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.NONE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.notifications.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.info'\n                                    defaultMessage='Notification alerts are pushed to your mobile device when there is activity in Mattermost.'\n                                />\n                            </div>\n                        </fieldset>\n                        <hr/>\n                        {pushStatusSettings}\n                    </div>,\n                );\n\n                submit = this.handleSubmit;\n            } else {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pt-2'\n                    >\n                        <FormattedMessage\n                            id='user.settings.push_notification.disabled_long'\n                            defaultMessage='Push notifications have not been enabled by your System Administrator.'\n                        />\n                    </div>,\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile Push Notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={submit}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = '';\n        if (this.state.pushActivity === NotificationLevels.ALL) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityAway'\n                        defaultMessage='For all activity when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOffline'\n                        defaultMessage='For all activity when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOnline'\n                        defaultMessage='For all activity when online, away or offline'\n                    />\n                );\n            }\n        } else if (this.state.pushActivity === NotificationLevels.NONE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.never'\n                    defaultMessage='Never'\n                />\n            );\n        } else if (this.props.sendPushNotifications) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) { //eslint-disable-line no-lonely-if\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsAway'\n                        defaultMessage='For mentions and direct messages when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOffline'\n                        defaultMessage='For mentions and direct messages when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOnline'\n                        defaultMessage='For mentions and direct messages when online, away or offline'\n                    />\n                );\n            }\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.push_notification.disabled'\n                    defaultMessage='Push notifications are not enabled'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile Push Notifications')}\n                describe={describe}\n                section={'push'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const serverError = this.state.serverError;\n        const user = this.props.user;\n\n        let keysSection;\n        if (this.props.activeSection === 'keys') {\n            const inputs = [];\n\n            if (user.first_name) {\n                const handleUpdateFirstNameKey = (e) => {\n                    this.updateFirstNameKey(e.target.checked);\n                };\n                inputs.push(\n                    <div key='userNotificationFirstNameOption'>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='notificationTriggerFirst'\n                                    type='checkbox'\n                                    checked={this.state.firstNameKey}\n                                    onChange={handleUpdateFirstNameKey}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.sensitiveName'\n                                    defaultMessage='Your case sensitive first name \"{first_name}\"'\n                                    values={{\n                                        first_name: user.first_name,\n                                    }}\n                                />\n                            </label>\n                        </div>\n                    </div>,\n                );\n            }\n\n            const handleUpdateUsernameKey = (e) => {\n                this.updateUsernameKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationUsernameOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerUsername'\n                                type='checkbox'\n                                checked={this.state.usernameKey}\n                                onChange={handleUpdateUsernameKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveUsername'\n                                defaultMessage='Your non case-sensitive username \"{username}\"'\n                                values={{\n                                    username: user.username,\n                                }}\n                            />\n                        </label>\n                    </div>\n                </div>,\n            );\n\n            const handleUpdateChannelKey = (e) => {\n                this.updateChannelKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationChannelOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerShouts'\n                                type='checkbox'\n                                checked={this.state.channelKey}\n                                onChange={handleUpdateChannelKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.channelWide'\n                                defaultMessage='Channel-wide mentions \"@channel\", \"@all\", \"@here\"'\n                            />\n                        </label>\n                    </div>\n                </div>,\n            );\n\n            inputs.push(\n                <div key='userNotificationCustomOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerCustom'\n                                ref={this.customCheckRef}\n                                type='checkbox'\n                                checked={this.state.customKeysChecked}\n                                onChange={this.updateCustomMentionKeys}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveWords'\n                                defaultMessage='Other non-case sensitive words, separated by commas:'\n                            />\n                        </label>\n                    </div>\n                    <input\n                        id='notificationTriggerCustomText'\n                        autoFocus={this.state.customKeysChecked}\n                        ref={this.customMentionsRef}\n                        className='form-control mentions-input'\n                        type='text'\n                        defaultValue={this.state.customKeys}\n                        onChange={this.onCustomChange}\n                        onFocus={Utils.moveCursorToEnd}\n                        aria-labelledby='notificationTriggerCustom'\n                    />\n                </div>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.mentionsInfo'\n                        defaultMessage='Mentions trigger when someone sends a message that includes your username (@{username}) or any of the options selected above.'\n                        values={{\n                            username: user.username,\n                        }}\n                    />\n                </span>\n            );\n\n            keysSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words That Trigger Mentions')}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let keys = ['@' + user.username];\n            if (this.state.firstNameKey) {\n                keys.push(user.first_name);\n            }\n            if (this.state.usernameKey) {\n                keys.push(user.username);\n            }\n\n            if (this.state.channelKey) {\n                keys.push('@channel');\n                keys.push('@all');\n                keys.push('@here');\n            }\n            if (this.state.customKeys.length > 0) {\n                keys = keys.concat(this.state.customKeys.split(','));\n            }\n\n            let describe = '';\n            for (let i = 0; i < keys.length; i++) {\n                if (keys[i] !== '') {\n                    describe += '\"' + keys[i] + '\", ';\n                }\n            }\n\n            if (describe.length > 0) {\n                describe = describe.substring(0, describe.length - 2);\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.noWords'\n                        defaultMessage='No words configured'\n                    />\n                );\n            }\n\n            keysSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words That Trigger Mentions')}\n                    describe={describe}\n                    section={'keys'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let commentsSection;\n        if (this.props.activeSection === 'comments') {\n            const commentsActive = [false, false, false];\n            if (this.state.notifyCommentsLevel === 'never') {\n                commentsActive[2] = true;\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                commentsActive[1] = true;\n            } else {\n                commentsActive[0] = true;\n            }\n\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='userNotificationLevelOption'>\n                    <legend className='form-legend hidden-label'>\n                        {Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsAny'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[0]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'any')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsAny'\n                                defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsRoot'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[1]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'root')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsRoot'\n                                defaultMessage='Trigger notifications on messages in threads that I start'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsNever'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[2]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'never')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsNever'\n                                defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                            />\n                        </label>\n                    </div>\n                </fieldset>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsInfo'\n                        defaultMessage=\"In addition to notifications for when you're mentioned, select if you would like to receive notifications on reply threads.\"\n                    />\n                </span>\n            );\n\n            commentsSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.state.notifyCommentsLevel === 'never') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsNever'\n                        defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                    />\n                );\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsRoot'\n                        defaultMessage='Trigger notifications on messages in threads that I start'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsAny'\n                        defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                    />\n                );\n            }\n\n            commentsSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    describe={describe}\n                    section={'comments'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let autoResponderSection;\n        if (this.props.enableAutoResponder) {\n            if (this.props.activeSection === 'auto-responder') {\n                autoResponderSection = (\n                    <div>\n                        <ManageAutoResponder\n                            autoResponderActive={this.state.autoResponderActive}\n                            autoResponderMessage={this.state.autoResponderMessage}\n                            updateSection={this.handleUpdateSection}\n                            setParentState={this.setStateValue}\n                            submit={this.handleSubmit}\n                            error={this.state.serverError}\n                            saving={this.state.isSaving}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                const describe = this.state.autoResponderActive ? (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderDisabled'\n                        defaultMessage='Disabled'\n                    />\n                );\n\n                autoResponderSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.notifications.autoResponder'\n                                defaultMessage='Automatic Direct Message Replies'\n                            />\n                        }\n                        width='medium'\n                        describe={describe}\n                        section={'auto-responder'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        const pushNotificationSection = this.createPushNotificationSection();\n\n        return (\n            <div id='notificationSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref={this.drawerRef}\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.notifications.title'\n                            defaultMessage='Notification Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    ref={this.wrapperRef}\n                    className='user-settings'\n                >\n                    <h3\n                        id='notificationSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.notifications.header'\n                            defaultMessage='Notifications'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    <DesktopNotificationSettings\n                        activity={this.state.desktopActivity}\n                        sound={this.state.desktopSound}\n                        updateSection={this.handleUpdateSection}\n                        setParentState={this.setStateValue}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        cancel={this.handleCancel}\n                        error={this.state.serverError}\n                        active={this.props.activeSection === 'desktop'}\n                        selectedSound={this.state.desktopNotificationSound}\n                    />\n                    <div className='divider-light'/>\n                    <EmailNotificationSetting\n                        activeSection={this.props.activeSection}\n                        updateSection={this.handleUpdateSection}\n                        enableEmail={this.state.enableEmail === 'true'}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        onChange={this.handleEmailRadio}\n                        saving={this.state.isSaving}\n                        serverError={this.state.serverError}\n                    />\n                    <div className='divider-light'/>\n                    {pushNotificationSection}\n                    <div className='divider-light'/>\n                    {keysSection}\n                    <div className='divider-light'/>\n                    {commentsSection}\n                    <div className='divider-light'/>\n                    {autoResponderSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsNotifications from './user_settings_notifications.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const sendPushNotifications = config.SendPushNotifications === 'true';\n    const enableAutoResponder = config.ExperimentalEnableAutomaticReplies === 'true';\n\n    return {\n        sendPushNotifications,\n        enableAutoResponder,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({updateMe}, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsNotifications);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport AuditTable from 'components/audit_table';\nimport LoadingScreen from 'components/loading_screen';\n\ntype Props = {\n    onHide: () => void;\n    actions: {\n        getUserAudits: (userId: string, page?: number, perPage?: number) => void;\n    };\n    userAudits: any[];\n    currentUserId: string;\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class AccessHistoryModal extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    public onShow = () => { // public for testing\n        this.props.actions.getUserAudits(this.props.currentUserId, 0, 200);\n    }\n\n    public onHide = () => { // public for testing\n        this.setState({show: false});\n    }\n\n    public componentDidMount() {\n        this.onShow();\n    }\n\n    public render() {\n        let content;\n        if (this.props.userAudits.length === 0) {\n            content = (<LoadingScreen/>);\n        } else {\n            content = (\n                <AuditTable\n                    audits={this.props.userAudits}\n                    showIp={true}\n                    showSession={true}\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='accessHistoryModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='accessHistoryModalLabel'\n                    >\n                        <FormattedMessage\n                            id='access_history.title'\n                            defaultMessage='Access History'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {getUserAudits} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserAudits as getCurrentUserAudits} from 'mattermost-redux/selectors/entities/users';\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport AccessHistoryModal from './access_history_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        userAudits: getCurrentUserAudits(state) || [],\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            getUserAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccessHistoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\n\nimport {getMonthLong} from 'utils/i18n';\n\ntype Props = {\n    locale: string;\n    currentSession: {\n        props: {\n            os: string;\n            platform: string;\n            browser: string;\n        };\n        create_at: number;\n        last_activity_at: number;\n        id: string;\n    };\n    handleMoreInfo: () => void;\n    moreInfo: boolean;\n};\n\nexport default function MoreInfo(props: Props) {\n    const {locale, currentSession, handleMoreInfo, moreInfo} = props;\n\n    if (moreInfo) {\n        const firstAccessTime = new Date(currentSession.create_at);\n\n        return (\n            <div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.firstTime'\n                        defaultMessage='First time active: {date}, {time}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={firstAccessTime}\n                                    day='2-digit'\n                                    month={getMonthLong(locale)}\n                                    year='numeric'\n                                />\n                            ),\n                            time: (\n                                <FormattedTime\n                                    value={firstAccessTime}\n                                    hour='2-digit'\n                                    minute='2-digit'\n                                />\n                            ),\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.os'\n                        defaultMessage='OS: {os}'\n                        values={{\n                            os: currentSession.props.os,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.browser'\n                        defaultMessage='Browser: {browser}'\n                        values={{\n                            browser: currentSession.props.browser,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.sessionId'\n                        defaultMessage='Session ID: {id}'\n                        values={{\n                            id: currentSession.id,\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <a\n            className='theme'\n            href='#'\n            onClick={handleMoreInfo}\n        >\n            <FormattedMessage\n                id='activity_log.moreInfo'\n                defaultMessage='More info'\n            />\n        </a>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {General} from 'mattermost-redux/constants';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {getMonthLong, t} from 'utils/i18n';\n\nimport MoreInfo from './more_info';\n\nexport default class ActivityLog extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The index of this instance within the list\n         */\n        index: PropTypes.number.isRequired,\n\n        /**\n         * The current locale of the user\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * The session that's to be displayed\n         */\n        currentSession: PropTypes.object.isRequired,\n\n        /**\n         * Function to revoke session\n         */\n        submitRevoke: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            moreInfo: false,\n        };\n    }\n\n    handleMoreInfo = () => {\n        this.setState({moreInfo: true});\n    }\n\n    submitRevoke = (e) => {\n        this.props.submitRevoke(this.props.currentSession.id, e);\n    }\n\n    isMobileSession = (session) => {\n        return session.device_id && (session.device_id.includes('apple') || session.device_id.includes('android'));\n    };\n\n    mobileSessionInfo = (session) => {\n        let deviceTypeId;\n        let deviceTypeMessage;\n        let devicePicture;\n        let deviceTitle;\n\n        if (session.device_id.includes('apple')) {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n            deviceTypeId = t('activity_log_modal.iphoneNativeClassicApp');\n            deviceTypeMessage = 'iPhone Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_APPLE_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.iphoneNativeApp');\n                deviceTypeMessage = 'iPhone Native App';\n            }\n        } else if (session.device_id.includes('android')) {\n            devicePicture = 'fa fa-android';\n            deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            deviceTypeId = t('activity_log_modal.androidNativeClassicApp');\n            deviceTypeMessage = 'Android Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_ANDROID_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.androidNativeApp');\n                deviceTypeMessage = 'Android Native App';\n            }\n        }\n\n        return {\n            devicePicture,\n            deviceTitle,\n            devicePlatform: (\n                <FormattedMessage\n                    id={deviceTypeId}\n                    defaultMessage={deviceTypeMessage}\n                />\n            ),\n        };\n    };\n\n    render() {\n        const {\n            index,\n            locale,\n            currentSession,\n        } = this.props;\n\n        const lastAccessTime = new Date(currentSession.last_activity_at);\n        let devicePlatform = currentSession.props.platform;\n        let devicePicture = '';\n        let deviceTitle = '';\n\n        if (currentSession.props.platform === 'Windows') {\n            devicePicture = 'fa fa-windows';\n            deviceTitle = localizeMessage('device_icons.windows', 'Windows Icon');\n        } else if (this.isMobileSession(currentSession)) {\n            const sessionInfo = this.mobileSessionInfo(currentSession);\n            devicePicture = sessionInfo.devicePicture;\n            devicePlatform = sessionInfo.devicePlatform;\n        } else if (currentSession.props.platform === 'Macintosh' ||\n            currentSession.props.platform === 'iPhone') {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n        } else if (currentSession.props.platform === 'Linux') {\n            if (currentSession.props.os.indexOf('Android') >= 0) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.android'\n                        defaultMessage='Android'\n                    />\n                );\n                devicePicture = 'fa fa-android';\n                deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            } else {\n                devicePicture = 'fa fa-linux';\n                deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n            }\n        } else if (currentSession.props.os.indexOf('Linux') !== -1) {\n            devicePicture = 'fa fa-linux';\n            deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n        }\n\n        if (currentSession.props.browser.indexOf('Desktop App') !== -1) {\n            devicePlatform = (\n                <FormattedMessage\n                    id='activity_log_modal.desktop'\n                    defaultMessage='Native Desktop App'\n                />\n            );\n        }\n\n        return (\n            <div\n                key={'activityLogEntryKey' + index}\n                className='activity-log__table'\n            >\n                <div className='activity-log__report'>\n                    <div className='report__platform'>\n                        <i\n                            className={devicePicture}\n                            title={deviceTitle}\n                        />{devicePlatform}\n                    </div>\n                    <div className='report__info'>\n                        <div>\n                            <FormattedMessage\n                                id='activity_log.lastActivity'\n                                defaultMessage='Last activity: {date}, {time}'\n                                values={{\n                                    date: (\n                                        <FormattedDate\n                                            value={lastAccessTime}\n                                            day='2-digit'\n                                            month={getMonthLong(locale)}\n                                            year='numeric'\n                                        />\n                                    ),\n                                    time: (\n                                        <FormattedTime\n                                            value={lastAccessTime}\n                                            hour='2-digit'\n                                            minute='2-digit'\n                                        />\n                                    ),\n                                }}\n                            />\n                        </div>\n                        <MoreInfo\n                            locale={locale}\n                            currentSession={currentSession}\n                            moreInfo={this.state.moreInfo}\n                            handleMoreInfo={this.handleMoreInfo}\n                        />\n                    </div>\n                </div>\n                <div className='activity-log__action'>\n                    <button\n                        onClick={this.submitRevoke}\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='activity_log.logout'\n                            defaultMessage='Log Out'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport ActivityLog from 'components/activity_log_modal/components/activity_log.jsx';\nimport LoadingScreen from 'components/loading_screen';\n\nexport default class ActivityLogModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The current user id\n         */\n        currentUserId: PropTypes.string.isRequired,\n\n        /**\n         * Current user's sessions\n         */\n        sessions: PropTypes.oneOfType([\n            PropTypes.array,\n            PropTypes.object,\n        ]).isRequired,\n\n        /**\n         * Current user's locale\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * Function that's called when user closes the modal\n         */\n        onHide: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n\n            /**\n             * Function to refresh sessions from server\n             */\n            getSessions: PropTypes.func.isRequired,\n\n            /**\n             * Function to revoke a particular session\n             */\n            revokeSession: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    submitRevoke = (altId, e) => {\n        e.preventDefault();\n        var modalContent = $(e.target).closest('.modal-content'); // eslint-disable-line jquery/no-closest\n        modalContent.addClass('animation--highlight');\n        setTimeout(() => {\n            modalContent.removeClass('animation--highlight');\n        }, 1500);\n        this.props.actions.revokeSession(this.props.currentUserId, altId).then(() => {\n            this.props.actions.getSessions(this.props.currentUserId);\n        });\n    }\n\n    onShow = () => {\n        this.props.actions.getSessions(this.props.currentUserId);\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    componentDidMount() {\n        this.onShow();\n    }\n\n    render() {\n        let content;\n        if (this.props.sessions.loading) {\n            content = <LoadingScreen/>;\n        } else {\n            const activityList = this.props.sessions.reduce((array, currentSession, index) => {\n                if (currentSession.props.type === 'UserAccessToken') {\n                    return array;\n                }\n\n                array.push(\n                    <ActivityLog\n                        key={currentSession.id}\n                        index={index}\n                        locale={this.props.locale}\n                        currentSession={currentSession}\n                        submitRevoke={this.submitRevoke}\n                    />,\n                );\n                return array;\n            }, []);\n\n            content = <form role='form'>{activityList}</form>;\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='activityLogModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='activityLogModalLabel'\n                    >\n                        <FormattedMessage\n                            id='activity_log.activeSessions'\n                            defaultMessage='Active Sessions'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p className='session-help-text'>\n                        <FormattedMessage\n                            id='activity_log.sessionsDescription'\n                            defaultMessage=\"Sessions are created when you log in through a new browser on a device. Sessions let you use Mattermost without having to log in again for a time period specified by the system administrator. To end the session sooner, use the 'Log Out' button.\"\n                        />\n                    </p>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getSessions, revokeSession} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserSessions} from 'mattermost-redux/selectors/entities/users';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport ActivityLogModal from './activity_log_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        sessions: getUserSessions(state),\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSessions,\n            revokeSession,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivityLogModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport {browserHistory} from 'utils/browser_history';\n\nconst SECTION_MFA = 'mfa';\n\ntype Props = {\n    active: boolean;\n\n    // Whether or not the current user has MFA enabled\n    mfaActive: boolean;\n\n    // Whether or not the current user can enable MFA based on their authentication type and the server's settings\n    mfaAvailable: boolean;\n\n    // Whether or not this server enforces that all users have MFA\n    mfaEnforced: boolean;\n\n    updateSection: (section: string) => void;\n    actions: {deactivateMfa: () => Promise<{error?: {message: string}}>};\n}\n\ntype State = {\n    serverError: string|null;\n}\n\nexport default class MfaSection extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            serverError: null,\n        };\n    }\n\n    public setupMfa = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        browserHistory.push('/mfa/setup');\n    };\n\n    public removeMfa = async (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        const {error} = await this.props.actions.deactivateMfa();\n\n        if (error) {\n            this.setState({\n                serverError: error.message,\n            });\n            return;\n        }\n\n        if (this.props.mfaEnforced) {\n            browserHistory.push('/mfa/setup');\n            return;\n        }\n\n        this.props.updateSection('');\n        this.setState({\n            serverError: null,\n        });\n    };\n\n    private renderTitle = () => {\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.title'\n                defaultMessage='Multi-factor Authentication'\n            />\n        );\n    };\n\n    private renderDescription = () => {\n        if (this.props.mfaActive) {\n            return (\n                <FormattedMessage\n                    id='user.settings.security.active'\n                    defaultMessage='Active'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.security.inactive'\n                defaultMessage='Inactive'\n            />\n        );\n    };\n\n    private renderContent = () => {\n        let content;\n\n        if (this.props.mfaActive) {\n            let buttonText;\n\n            if (this.props.mfaEnforced) {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.reset'\n                        defaultMessage='Reset MFA on Account'\n                    />\n                );\n            } else {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.remove'\n                        defaultMessage='Remove MFA from Account'\n                    />\n                );\n            }\n\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.removeMfa}\n                >\n                    {buttonText}\n                </a>\n            );\n        } else {\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.setupMfa}\n                >\n                    <FormattedMessage\n                        id='user.settings.mfa.add'\n                        defaultMessage='Add MFA to Account'\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div className='pt-2'>\n                {content}\n                <br/>\n            </div>\n        );\n    };\n\n    private renderHelpText = () => {\n        if (this.props.mfaActive) {\n            if (this.props.mfaEnforced) {\n                return (\n                    <FormattedMessage\n                        id='user.settings.mfa.requiredHelp'\n                        defaultMessage='Multi-factor authentication is required on this server. Resetting is only recommended when you need to switch code generation to a new mobile device. You will be required to set it up again immediately.'\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='user.settings.mfa.removeHelp'\n                    defaultMessage='Removing multi-factor authentication means you will no longer require a phone-based passcode to sign-in to your account.'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.addHelp'\n                defaultMessage='Adding multi-factor authentication will make your account more secure by requiring a code from your mobile phone each time you sign in.'\n            />\n        );\n    };\n\n    public render() {\n        const title = this.renderTitle();\n\n        if (!this.props.mfaAvailable) {\n            return null;\n        }\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section={SECTION_MFA}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={this.renderContent()}\n                extraInfo={this.renderHelpText()}\n                serverError={this.state.serverError}\n                updateSection={this.props.updateSection}\n                width='medium'\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport {deactivateMfa} from 'actions/views/mfa';\nimport Constants from 'utils/constants';\n\nimport MfaSection from './mfa_section';\n\ntype Actions = {\n    deactivateMfa: () => Promise<{error?: {message: string}}>;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const mfaLicensed = license && license.IsLicensed === 'true' && license.MFA === 'true';\n    const mfaEnabled = config.EnableMultifactorAuthentication === 'true';\n    const mfaEnforced = mfaLicensed && config.EnforceMultifactorAuthentication === 'true';\n    const user: UserProfile = getCurrentUser(state);\n    let mfaActive = false;\n    let mfaAvailable = false;\n    if (user) {\n        mfaActive = (user as any).mfa_active;\n        mfaAvailable = mfaEnabled && (user.auth_service === '' || user.auth_service === Constants.LDAP_SERVICE);\n    }\n    return {\n        mfaActive,\n        mfaAvailable,\n        mfaEnforced,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            deactivateMfa,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MfaSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {UserProfile} from 'mattermost-redux/types/users';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport Constants from 'utils/constants';\nimport {isMobile} from 'utils/user_agent';\nimport * as Utils from 'utils/utils.jsx';\nimport ConfirmModal from 'components/confirm_modal';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SaveButton from 'components/save_button';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nconst SECTION_TOKENS = 'tokens';\nconst TOKEN_CREATING = 'creating';\nconst TOKEN_CREATED = 'created';\nconst TOKEN_NOT_CREATING = 'not_creating';\n\ntype Props = {\n    user: UserProfile;\n    active?: boolean;\n    updateSection: (section: string) => void;\n    userAccessTokens: {[tokenId: string]: {description: string; id: string; is_active: boolean}};\n    setRequireConfirm: (isRequiredConfirm: boolean, confirmCopyToken: (confirmAction: () => void) => void) => void;\n    actions: {\n        getUserAccessTokensForUser: (userId: string, page: number, perPage: number) => void;\n        createUserAccessToken: (userId: string, description: string) => Promise<{\n            data: {token: string; description: string; id: string; is_active: boolean} | null;\n            error?: {\n                message: string;\n            };\n        }>;\n        revokeUserAccessToken: (tokenId: string) => Promise<{\n            data: string;\n            error?: {\n                message: string;\n            };\n        }>;\n        enableUserAccessToken: (tokenId: string) => Promise<{\n            data: string;\n            error?: {\n                message: string;\n            };\n        }>;\n        disableUserAccessToken: (tokenId: string) => Promise<{\n            data: string;\n            error?: {\n                message: string;\n            };\n        }>;\n        clearUserAccessTokens: () => void;\n    };\n}\n\ntype State = {\n    active?: boolean;\n    showConfirmModal: boolean;\n    newToken?: {token: string; description: string; id: string; is_active: boolean} | null;\n    tokenCreationState?: string;\n    tokenError?: string;\n    serverError?: string|null;\n    saving?: boolean;\n    confirmTitle?: React.ReactNode;\n    confirmMessage?: ((state: State) => JSX.Element)|null;\n    confirmButton?: React.ReactNode;\n    confirmComplete?: (() => void)|null;\n    confirmHideCancel?: boolean;\n}\n\nexport default class UserAccessTokenSection extends React.PureComponent<Props, State> {\n    private newtokendescriptionRef: React.RefObject<HTMLInputElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active: this.props.active,\n            showConfirmModal: false,\n            newToken: null,\n            tokenCreationState: TOKEN_NOT_CREATING,\n            tokenError: '',\n            serverError: null,\n            saving: false,\n        };\n        this.newtokendescriptionRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.props.actions.clearUserAccessTokens();\n        const userId = this.props.user ? this.props.user.id : '';\n        this.props.actions.getUserAccessTokensForUser(userId, 0, 200);\n    }\n\n    static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n        if (!nextProps.active && prevState.active) {\n            return {\n                active: nextProps.active,\n                showConfirmModal: false,\n                newToken: null,\n                tokenCreationState: TOKEN_NOT_CREATING,\n                tokenError: '',\n                serverError: null,\n                saving: false,\n            };\n        }\n        return {active: nextProps.active};\n    }\n\n    startCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_CREATING});\n    }\n\n    stopCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_NOT_CREATING, saving: false});\n    }\n\n    handleCreateToken = async () => {\n        this.handleCancelConfirm();\n\n        const description = this.newtokendescriptionRef ? this.newtokendescriptionRef.current!.value : '';\n\n        if (description === '') {\n            this.setState({tokenError: Utils.localizeMessage('user.settings.tokens.nameRequired', 'Please enter a description.')});\n            return;\n        }\n\n        this.setState({tokenError: '', saving: true});\n        this.props.setRequireConfirm(true, this.confirmCopyToken);\n\n        const userId = this.props.user ? this.props.user.id : '';\n        const {data, error} = await this.props.actions.createUserAccessToken(userId, description);\n\n        if (data && this.state.tokenCreationState === TOKEN_CREATING) {\n            this.setState({tokenCreationState: TOKEN_CREATED, newToken: data, saving: false});\n        } else if (error) {\n            this.setState({serverError: error.message, saving: false});\n        }\n    }\n\n    confirmCopyToken = (confirmAction: () => void) => {\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyTitle'\n                    defaultMessage='Copied Your Token?'\n                />\n            ),\n            confirmMessage: (state: State) => (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.tokens.confirmCopyMessage'\n                        defaultMessage=\"Make sure you have copied and saved the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    {state.tokenCreationState === TOKEN_CREATING ? (\n                        <div>\n                            <strong className='word-break--all'>\n                                <FormattedMessage\n                                    id='user.settings.tokens.token'\n                                    defaultMessage='Access Token: '\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='user.settings.tokens.tokenLoading'\n                                defaultMessage='Loading...'\n                            />\n                        </div>\n                    ) : (\n                        <strong className='word-break--all'>\n                            <FormattedMessage\n                                id='user.settings.tokens.token'\n                                defaultMessage='Access Token: '\n                            />\n                            {state.newToken!.token}\n                        </strong>\n                    )}\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyButton'\n                    defaultMessage='Yes, I have copied the token'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCancelConfirm();\n                confirmAction();\n            },\n            confirmHideCancel: true,\n        });\n    }\n\n    handleCancelConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            confirmTitle: null,\n            confirmMessage: null,\n            confirmButton: null,\n            confirmComplete: null,\n            confirmHideCancel: false,\n        });\n    }\n\n    confirmCreateToken = () => {\n        if (!UserUtils.isSystemAdmin(this.props.user!.roles)) {\n            this.handleCreateToken();\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateTitle'\n                    defaultMessage='Create System Admin Personal Access Token'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMessage\n                        id='user.settings.tokens.confirmCreateMessage'\n                        defaultMessage='You are generating a personal access token with System Admin permissions. Are you sure want to create this token?'\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateButton'\n                    defaultMessage='Yes, Create'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCreateToken();\n                trackEvent('settings', 'system_admin_create_user_access_token');\n            },\n        });\n    }\n\n    saveTokenKeyPress = (e: React.KeyboardEvent) => {\n        if (Utils.isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.confirmCreateToken();\n        }\n    }\n\n    confirmRevokeToken = (tokenId: string) => {\n        const token = this.props.userAccessTokens[tokenId];\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteTitle'\n                    defaultMessage='Delete Token?'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.confirmDeleteMessage'\n                        defaultMessage='Any integrations using this token will no longer be able to access the Mattermost API. You cannot undo this action. \\n \\nAre you sure want to delete the **{description}** token?'\n                        values={{\n                            description: token.description,\n                        }}\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteButton'\n                    defaultMessage='Yes, Delete'\n                />\n            ),\n            confirmComplete: () => {\n                this.revokeToken(tokenId);\n                trackEvent('settings', 'revoke_user_access_token');\n            },\n        });\n    }\n\n    revokeToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.revokeUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n        this.handleCancelConfirm();\n    }\n\n    activateToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.enableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'activate_user_access_token');\n        }\n    }\n\n    deactivateToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.disableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'deactivate_user_access_token');\n        }\n    }\n\n    render() {\n        let tokenListClass = '';\n\n        if (!this.props.active) {\n            const describe = Utils.localizeMessage('user.settings.tokens.clickToEdit', \"Click 'Edit' to manage your personal access tokens\");\n\n            return (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    describe={describe}\n                    section={SECTION_TOKENS}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        const tokenList: JSX.Element[] = [];\n        Object.values(this.props.userAccessTokens).forEach((token) => {\n            if (this.state.newToken && this.state.newToken.id === token.id) {\n                return;\n            }\n\n            let activeLink: JSX.Element;\n            let activeStatus;\n\n            if (token.is_active) {\n                activeLink = (\n                    <a\n                        id={token.id + '_deactivate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.deactivateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivate'\n                            defaultMessage='Disable'\n                        />\n                    </a>);\n            } else {\n                activeStatus = (\n                    <span className='has-error setting-box__inline-error'>\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivatedWarning'\n                            defaultMessage='(Disabled)'\n                        />\n                    </span>\n                );\n                activeLink = (\n                    <a\n                        id={token.id + '_activate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.activateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.activate'\n                            defaultMessage='Enable'\n                        />\n                    </a>\n                );\n            }\n\n            tokenList.push(\n                <div\n                    key={token.id}\n                    className='setting-box__item'\n                >\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenDesc'\n                            defaultMessage='Token Description: '\n                        />\n                        {token.description}\n                        {activeStatus}\n                    </div>\n                    <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenId'\n                            defaultMessage='Token ID: '\n                        />\n                        {token.id}\n                    </div>\n                    <div>\n                        {activeLink}\n                        {' - '}\n                        <a\n                            id={token.id + '_delete'}\n                            href='#'\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.confirmRevokeToken(token.id);\n                            }}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                    <hr className='mb-3 mt-3'/>\n                </div>,\n            );\n        });\n\n        let noTokenText;\n        if (tokenList.length === 0) {\n            noTokenText = (\n                <FormattedMessage\n                    key='notokens'\n                    id='user.settings.tokens.userAccessTokensNone'\n                    defaultMessage='No personal access tokens.'\n                />\n            );\n        }\n\n        let extraInfo;\n        if (isMobile()) {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description_mobile'\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication). Create new tokens on your desktop.'\n                    />\n                </span>\n            );\n        } else {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description'\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication).'\n                    />\n                </span>\n            );\n        }\n\n        let newTokenSection;\n        if (this.state.tokenCreationState === TOKEN_CREATING) {\n            newTokenSection = (\n                <div className='pl-3'>\n                    <div className='row'>\n                        <label className='col-sm-auto control-label pr-3'>\n                            <FormattedMessage\n                                id='user.settings.tokens.name'\n                                defaultMessage='Token Description: '\n                            />\n                        </label>\n                        <div className='col-sm-5'>\n                            <input\n                                autoFocus={true}\n                                ref={this.newtokendescriptionRef}\n                                className='form-control'\n                                type='text'\n                                maxLength={64}\n                                onKeyPress={this.saveTokenKeyPress}\n                            />\n                        </div>\n                    </div>\n                    <div>\n                        <div className='pt-3'>\n                            <FormattedMessage\n                                id='user.settings.tokens.nameHelp'\n                                defaultMessage='Enter a description for your token to remember what it does.'\n                            />\n                        </div>\n                        <div>\n                            <label\n                                id='clientError'\n                                className='has-error mt-2 mb-2'\n                            >\n                                {this.state.tokenError}\n                            </label>\n                        </div>\n                        <SaveButton\n                            btnClass='btn-primary'\n                            savingMessage={\n                                <FormattedMessage\n                                    id='user.settings.tokens.save'\n                                    defaultMessage='Save'\n                                />\n                            }\n                            saving={this.state.saving}\n                            onClick={this.confirmCreateToken}\n                        />\n                        <button\n                            className='btn btn-link'\n                            onClick={this.stopCreatingToken}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.state.tokenCreationState === TOKEN_CREATED) {\n            if (tokenList.length === 0) {\n                tokenListClass = ' hidden';\n            }\n\n            newTokenSection = (\n                <div\n                    className='alert alert-warning'\n                >\n                    <WarningIcon additionalClassName='mr-2'/>\n                    <FormattedMessage\n                        id='user.settings.tokens.copy'\n                        defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.name'\n                            defaultMessage='Token Description: '\n                        />\n                        {this.state.newToken!.description}\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.id'\n                            defaultMessage='Token ID: '\n                        />\n                        {this.state.newToken!.id}\n                    </div>\n                    <strong className='word-break--all'>\n                        <FormattedMessage\n                            id='user.settings.tokens.token'\n                            defaultMessage='Access Token: '\n                        />\n                        {this.state.newToken!.token}\n                    </strong>\n                </div>\n            );\n        } else {\n            newTokenSection = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.startCreatingToken}\n                >\n                    <FormattedMessage\n                        id='user.settings.tokens.create'\n                        defaultMessage='Create Token'\n                    />\n                </a>\n            );\n        }\n\n        const inputs = [];\n        inputs.push(\n            <div\n                key='tokensSetting'\n                className='pt-2'\n            >\n                <div key='tokenList'>\n                    <div className={'alert alert-transparent' + tokenListClass}>\n                        {tokenList}\n                        {noTokenText}\n                    </div>\n                    {newTokenSection}\n                </div>\n            </div>,\n        );\n\n        return (\n            <div>\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    inputs={inputs}\n                    extraInfo={extraInfo}\n                    infoPosition='top'\n                    serverError={this.state.serverError}\n                    updateSection={this.props.updateSection}\n                    width='full'\n                    saving={this.state.saving}\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n                <ConfirmModal\n                    title={this.state.confirmTitle}\n                    message={this.state.confirmMessage ? this.state.confirmMessage(this.state) : null}\n                    confirmButtonText={this.state.confirmButton}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.state.confirmComplete || (() => null)}\n                    onCancel={this.handleCancelConfirm}\n                    hideCancel={this.state.confirmHideCancel}\n                />\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\nimport {\n    clearUserAccessTokens,\n    createUserAccessToken,\n    getUserAccessTokensForUser,\n    revokeUserAccessToken,\n    enableUserAccessToken,\n    disableUserAccessToken,\n} from 'mattermost-redux/actions/users';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport UserAccessTokenSection from './user_access_token_section';\n\ntype Actions = {\n    getUserAccessTokensForUser: (userId: string, page: number, perPage: number) => void;\n    createUserAccessToken: (userId: string, description: string) => Promise<{\n        data: {token: string; description: string; id: string; is_active: boolean} | null;\n        error?: {\n            message: string;\n        };\n    }>;\n    revokeUserAccessToken: (tokenId: string) => Promise<{\n        data: string;\n        error?: {\n            message: string;\n        };\n    }>;\n    enableUserAccessToken: (tokenId: string) => Promise<{\n        data: string;\n        error?: {\n            message: string;\n        };\n    }>;\n    disableUserAccessToken: (tokenId: string) => Promise<{\n        data: string;\n        error?: {\n            message: string;\n        };\n    }>;\n    clearUserAccessTokens: () => void;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        userAccessTokens: state.entities.users.myUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getUserAccessTokensForUser,\n            createUserAccessToken,\n            revokeUserAccessToken,\n            enableUserAccessToken,\n            disableUserAccessToken,\n            clearUserAccessTokens,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAccessTokenSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {ActionResult} from 'mattermost-redux/types/actions';\nimport {OAuthApp} from 'mattermost-redux/types/integrations';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport icon50 from 'images/icon50x50.png';\nimport AccessHistoryModal from 'components/access_history_modal';\nimport ActivityLogModal from 'components/activity_log_modal';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ToggleModalButton from 'components/toggle_modal_button.jsx';\n\nimport MfaSection from './mfa_section';\nimport UserAccessTokenSection from './user_access_token_section';\n\nconst SECTION_MFA = 'mfa';\nconst SECTION_PASSWORD = 'password';\nconst SECTION_SIGNIN = 'signin';\nconst SECTION_APPS = 'apps';\nconst SECTION_TOKENS = 'tokens';\n\ntype Actions = {\n    getMe: () => void;\n    updateUserPassword: (\n        userId: string,\n        currentPassword: string,\n        newPassword: string\n    ) => Promise<ActionResult>;\n    getAuthorizedOAuthApps: () => Promise<ActionResult>;\n    deauthorizeOAuthApp: (clientId: string) => Promise<ActionResult>;\n};\n\ntype Props = {\n    user: UserProfile;\n    activeSection?: string;\n    updateSection: (section: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setRequireConfirm: () => void;\n    canUseAccessTokens: boolean;\n    enableOAuthServiceProvider: boolean;\n    enableSignUpWithEmail: boolean;\n    enableSignUpWithGitLab: boolean;\n    enableSignUpWithGoogle: boolean;\n    enableSignUpWithOpenId: boolean;\n    enableLdap: boolean;\n    enableSaml: boolean;\n    enableSignUpWithOffice365: boolean;\n    experimentalEnableAuthenticationTransfer: boolean;\n    passwordConfig: Record<string, unknown>;\n    militaryTime: boolean;\n    actions: Actions;\n};\n\ntype State = {\n    currentPassword: string;\n    newPassword: string;\n    confirmPassword: string;\n    passwordError: React.ReactNode;\n    serverError: string | null;\n    tokenError: string;\n    savingPassword: boolean;\n    authorizedApps: OAuthApp[];\n};\n\nexport default class SecurityTab extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = this.getDefaultState();\n    }\n\n    getDefaultState() {\n        return {\n            currentPassword: '',\n            newPassword: '',\n            confirmPassword: '',\n            passwordError: '',\n            serverError: '',\n            tokenError: '',\n            authService: this.props.user.auth_service,\n            savingPassword: false,\n            authorizedApps: [],\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            this.loadAuthorizedOAuthApps();\n        }\n    }\n\n    loadAuthorizedOAuthApps = async () => {\n        const res = await this.props.actions.getAuthorizedOAuthApps();\n        if ('data' in res) {\n            const {data} = res;\n            this.setState({authorizedApps: data, serverError: null}); //eslint-disable-line react/no-did-mount-set-state\n        } else if ('error' in res) {\n            const {error} = res;\n            this.setState({serverError: error.message}); //eslint-disable-line react/no-did-mount-set-state\n        }\n    };\n\n    submitPassword = async () => {\n        const user = this.props.user;\n        const currentPassword = this.state.currentPassword;\n        const newPassword = this.state.newPassword;\n        const confirmPassword = this.state.confirmPassword;\n\n        if (currentPassword === '') {\n            this.setState({\n                passwordError: Utils.localizeMessage(\n                    'user.settings.security.currentPasswordError',\n                    'Please enter your current password.',\n                ),\n                serverError: '',\n            });\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(\n            newPassword,\n            this.props.passwordConfig,\n        );\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n                serverError: '',\n            });\n            return;\n        }\n\n        if (newPassword !== confirmPassword) {\n            const defaultState = Object.assign(this.getDefaultState(), {\n                passwordError: Utils.localizeMessage(\n                    'user.settings.security.passwordMatchError',\n                    'The new passwords you entered do not match.',\n                ),\n                serverError: '',\n            });\n            this.setState(defaultState);\n            return;\n        }\n\n        this.setState({savingPassword: true});\n\n        const res = await this.props.actions.updateUserPassword(\n            user.id,\n            currentPassword,\n            newPassword,\n        );\n        if ('data' in res) {\n            this.props.updateSection('');\n            this.props.actions.getMe();\n            this.setState(this.getDefaultState());\n        } else if ('error' in res) {\n            const {error: err} = res;\n            const state = this.getDefaultState();\n            if (err.message) {\n                state.serverError = err.message;\n            } else {\n                state.serverError = err;\n            }\n            state.passwordError = '';\n            this.setState(state);\n        }\n    };\n\n    updateCurrentPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({currentPassword: e.target.value});\n    };\n\n    updateNewPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({newPassword: e.target.value});\n    };\n\n    updateConfirmPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({confirmPassword: e.target.value});\n    };\n\n    deauthorizeApp = async (e: React.MouseEvent) => {\n        e.preventDefault();\n\n        const appId = e.currentTarget.getAttribute('data-app') as string;\n\n        const res = await this.props.actions.deauthorizeOAuthApp(appId);\n        if ('data' in res) {\n            const authorizedApps = this.state.authorizedApps.filter((app) => {\n                return app.id !== appId;\n            });\n            this.setState({authorizedApps, serverError: null});\n        } else if ('error' in res) {\n            const {error} = res;\n            this.setState({serverError: error.message});\n        }\n    };\n\n    handleUpdateSection = (section: string) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            switch (this.props.activeSection) {\n            case SECTION_MFA:\n            case SECTION_SIGNIN:\n            case SECTION_TOKENS:\n            case SECTION_APPS:\n                this.setState({\n                    serverError: null,\n                });\n                break;\n            case SECTION_PASSWORD:\n                this.setState({\n                    currentPassword: '',\n                    newPassword: '',\n                    confirmPassword: '',\n                    serverError: null,\n                    passwordError: null,\n                });\n                break;\n            default:\n            }\n\n            this.props.updateSection('');\n        }\n    };\n\n    createPasswordSection = () => {\n        if (this.props.activeSection === SECTION_PASSWORD) {\n            const inputs = [];\n            let submit;\n\n            if (this.props.user.auth_service === '') {\n                submit = this.submitPassword;\n\n                inputs.push(\n                    <div\n                        key='currentPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.currentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='currentPassword'\n                                autoFocus={true}\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateCurrentPassword}\n                                value={this.state.currentPassword}\n                                aria-label={Utils.localizeMessage(\n                                    'user.settings.security.currentPassword',\n                                    'Current Password',\n                                )}\n                            />\n                        </div>\n                    </div>,\n                );\n                inputs.push(\n                    <div\n                        key='newPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.newPassword'\n                                defaultMessage='New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='newPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateNewPassword}\n                                value={this.state.newPassword}\n                                aria-label={Utils.localizeMessage(\n                                    'user.settings.security.newPassword',\n                                    'New Password',\n                                )}\n                            />\n                        </div>\n                    </div>,\n                );\n                inputs.push(\n                    <div\n                        key='retypeNewPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.retypePassword'\n                                defaultMessage='Retype New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='confirmPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateConfirmPassword}\n                                value={this.state.confirmPassword}\n                                aria-label={Utils.localizeMessage(\n                                    'user.settings.security.retypePassword',\n                                    'Retype New Password',\n                                )}\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.GITLAB_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.LDAP_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.SAML_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordSamlCantUpdate'\n                                defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.GOOGLE_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.OFFICE365_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.security.password'\n                            defaultMessage='Password'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.savingPassword}\n                    serverError={this.state.serverError}\n                    clientError={this.state.passwordError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe;\n\n        if (this.props.user.auth_service === '') {\n            const d = new Date(this.props.user.last_password_update);\n\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.lastUpdated'\n                    defaultMessage='Last updated {date} at {time}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={d}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                        time: (\n                            <FormattedTime\n                                value={d}\n                                hour12={!this.props.militaryTime}\n                                hour='2-digit'\n                                minute='2-digit'\n                            />\n                        ),\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGitlab'\n                    defaultMessage='Login done through GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginLdap'\n                    defaultMessage='Login done through AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginSaml'\n                    defaultMessage='Login done through SAML'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGoogle'\n                    defaultMessage='Login done through Google Apps'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OFFICE365_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginOffice365'\n                    defaultMessage='Login done through Office 365'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.security.password'\n                        defaultMessage='Password'\n                    />\n                }\n                describe={describe}\n                section={SECTION_PASSWORD}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    };\n\n    createSignInSection = () => {\n        const user = this.props.user;\n\n        if (this.props.activeSection === SECTION_SIGNIN) {\n            let emailOption;\n            let gitlabOption;\n            let googleOption;\n            let office365Option;\n            let openidOption;\n            let ldapOption;\n            let samlOption;\n\n            if (user.auth_service === '') {\n                if (this.props.enableSignUpWithGitLab) {\n                    gitlabOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.GITLAB_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGitlab'\n                                    defaultMessage='Switch to Using GitLab SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithGoogle) {\n                    googleOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.GOOGLE_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGoogle'\n                                    defaultMessage='Switch to Using Google SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOffice365) {\n                    office365Option = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.OFFICE365_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOffice365'\n                                    defaultMessage='Switch to Using Office 365 SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOpenId) {\n                    openidOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.OPENID_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOpenId'\n                                    defaultMessage='Switch to Using OpenID SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableLdap) {\n                    ldapOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_ldap?email=' +\n                                    encodeURIComponent(user.email)\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchLdap'\n                                    defaultMessage='Switch to Using AD/LDAP'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSaml) {\n                    samlOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.SAML_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchSaml'\n                                    defaultMessage='Switch to Using SAML SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n            } else if (this.props.enableSignUpWithEmail) {\n                let link;\n                if (user.auth_service === Constants.LDAP_SERVICE) {\n                    link =\n                        '/claim/ldap_to_email?email=' +\n                        encodeURIComponent(user.email);\n                } else {\n                    link =\n                        '/claim/oauth_to_email?email=' +\n                        encodeURIComponent(user.email) +\n                        '&old_type=' +\n                        user.auth_service;\n                }\n\n                emailOption = (\n                    <div className='pb-3'>\n                        <Link\n                            className='btn btn-primary'\n                            to={link}\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.switchEmail'\n                                defaultMessage='Switch to Using Email and Password'\n                            />\n                        </Link>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            inputs.push(\n                <div key='userSignInOption'>\n                    {emailOption}\n                    {gitlabOption}\n                    {googleOption}\n                    {office365Option}\n                    {openidOption}\n                    {ldapOption}\n                    {samlOption}\n                </div>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.security.oneSignin'\n                        defaultMessage='You may only have one sign-in method at a time. Switching sign-in method will send an email notifying you if the change was successful.'\n                    />\n                </span>\n            );\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage(\n                        'user.settings.security.method',\n                        'Sign-in Method',\n                    )}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = (\n            <FormattedMessage\n                id='user.settings.security.emailPwd'\n                defaultMessage='Email and Password'\n            />\n        );\n        if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.gitlab'\n                    defaultMessage='GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.google'\n                    defaultMessage='Google'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OFFICE365_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.office365'\n                    defaultMessage='Office 365'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.ldap'\n                    defaultMessage='AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.saml'\n                    defaultMessage='SAML'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage(\n                    'user.settings.security.method',\n                    'Sign-in Method',\n                )}\n                describe={describe}\n                section={SECTION_SIGNIN}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    };\n\n    createOAuthAppsSection = () => {\n        if (this.props.activeSection === SECTION_APPS) {\n            let apps;\n            if (\n                this.state.authorizedApps &&\n                this.state.authorizedApps.length > 0\n            ) {\n                apps = this.state.authorizedApps.map((app) => {\n                    const homepage = (\n                        <a\n                            href={app.homepage}\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            {app.homepage}\n                        </a>\n                    );\n\n                    return (\n                        <div\n                            key={app.id}\n                            className='pb-3 authorized-app'\n                        >\n                            <div className='col-sm-10'>\n                                <div className='authorized-app__name'>\n                                    {app.name}\n                                    <span className='authorized-app__url'>\n                                        {' -'} {homepage}\n                                    </span>\n                                </div>\n                                <div className='authorized-app__description'>\n                                    {app.description}\n                                </div>\n                                <div className='authorized-app__deauthorize'>\n                                    <a\n                                        href='#'\n                                        data-app={app.id}\n                                        onClick={this.deauthorizeApp}\n                                    >\n                                        <FormattedMessage\n                                            id='user.settings.security.deauthorize'\n                                            defaultMessage='Deauthorize'\n                                        />\n                                    </a>\n                                </div>\n                            </div>\n                            <div className='col-sm-2 pull-right'>\n                                <img\n                                    alt={app.name}\n                                    src={app.icon_url || icon50}\n                                />\n                            </div>\n                            <br/>\n                        </div>\n                    );\n                });\n            } else {\n                apps = (\n                    <div className='pb-3 authorized-app'>\n                        <div className='setting-list__hint'>\n                            <FormattedMessage\n                                id='user.settings.security.noApps'\n                                defaultMessage='No OAuth 2.0 Applications are authorized.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            let wrapperClass;\n            let helpText;\n            if (Array.isArray(apps)) {\n                wrapperClass = 'authorized-apps__wrapper';\n\n                helpText = (\n                    <div className='authorized-apps__help'>\n                        <FormattedMessage\n                            id='user.settings.security.oauthAppsHelp'\n                            defaultMessage='Applications act on your behalf to access your data based on the permissions you grant them.'\n                        />\n                    </div>\n                );\n            }\n\n            inputs.push(\n                <div\n                    className={wrapperClass}\n                    key='authorizedApps'\n                >\n                    {apps}\n                </div>,\n            );\n\n            const title = (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.security.oauthApps'\n                        defaultMessage='OAuth 2.0 Applications'\n                    />\n                    {helpText}\n                </div>\n            );\n\n            return (\n                <SettingItemMax\n                    title={title}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    width='full'\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage(\n                    'user.settings.security.oauthApps',\n                    'OAuth 2.0 Applications',\n                )}\n                describe={\n                    <FormattedMessage\n                        id='user.settings.security.oauthAppsDescription'\n                        defaultMessage=\"Click 'Edit' to manage your OAuth 2.0 Applications\"\n                    />\n                }\n                section={SECTION_APPS}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    };\n\n    render() {\n        const user = this.props.user;\n\n        const passwordSection = this.createPasswordSection();\n\n        let numMethods = 0;\n        numMethods = this.props.enableSignUpWithGitLab ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithGoogle ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOffice365 ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableLdap ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSaml ? numMethods + 1 : numMethods;\n\n        // If there are other sign-in methods and either email is enabled or the user's account is email, then allow switching\n        let signInSection;\n        if (\n            (this.props.enableSignUpWithEmail || user.auth_service === '') &&\n            numMethods > 0 &&\n            this.props.experimentalEnableAuthenticationTransfer\n        ) {\n            signInSection = this.createSignInSection();\n        }\n\n        let oauthSection;\n        if (this.props.enableOAuthServiceProvider) {\n            oauthSection = this.createOAuthAppsSection();\n        }\n\n        let tokensSection;\n        if (this.props.canUseAccessTokens) {\n            tokensSection = (\n                <UserAccessTokenSection\n                    user={this.props.user}\n                    active={this.props.activeSection === SECTION_TOKENS}\n                    updateSection={this.handleUpdateSection}\n                    setRequireConfirm={this.props.setRequireConfirm}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <FormattedMessage\n                        id='user.settings.security.close'\n                        defaultMessage='Close'\n                    >\n                        {(ariaLabel: string) => (\n                            <button\n                                type='button'\n                                className='close'\n                                data-dismiss='modal'\n                                aria-label={ariaLabel}\n                                onClick={this.props.closeModal}\n                            >\n                                <span aria-hidden='true'>{'×'}</span>\n                            </button>\n                        )}\n                    </FormattedMessage>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title: string) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {passwordSection}\n                    <div className='divider-light'/>\n                    <MfaSection\n                        active={this.props.activeSection === SECTION_MFA}\n                        updateSection={this.handleUpdateSection}\n                    />\n                    <div className='divider-light'/>\n                    {oauthSection}\n                    <div className='divider-light'/>\n                    {tokensSection}\n                    <div className='divider-light'/>\n                    {signInSection}\n                    <div className='divider-dark'/>\n                    <br/>\n                    <ToggleModalButton\n                        className='security-links color--link'\n                        dialogType={AccessHistoryModal}\n                        id='viewAccessHistory'\n                    >\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory.icon'\n                            defaultMessage='Access History Icon'\n                        >\n                            {(title: string) => (\n                                <i\n                                    className='fa fa-clock-o'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory'\n                            defaultMessage='View Access History'\n                        />\n                    </ToggleModalButton>\n                    <ToggleModalButton\n                        className='security-links color--link mt-2'\n                        dialogType={ActivityLogModal}\n                        id='viewAndLogOutOfActiveSessions'\n                    >\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions.icon'\n                            defaultMessage='Active Sessions Icon'\n                        >\n                            {(title: string) => (\n                                <i\n                                    className='fa fa-clock-o'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions'\n                            defaultMessage='View and Log Out of Active Sessions'\n                        />\n                    </ToggleModalButton>\n                </div>\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\nimport {getMe, updateUserPassword} from 'mattermost-redux/actions/users';\nimport {getAuthorizedOAuthApps, deauthorizeOAuthApp} from 'mattermost-redux/actions/integrations';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\nimport {Preferences} from 'utils/constants';\n\nimport SecurityTab from './user_settings_security';\n\ntype Actions = {\n    getMe: () => void;\n    updateUserPassword: (userId: string, currentPassword: string, newPassword: string) => Promise<ActionResult>;\n    getAuthorizedOAuthApps: () => Promise<ActionResult>;\n    deauthorizeOAuthApp: (clientId: string) => Promise<ActionResult>;\n};\n\ntype Props = {\n    user: UserProfile;\n    activeSection?: string;\n    updateSection: (section: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setRequireConfirm: () => void;\n};\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const config = getConfig(state);\n\n    const tokensEnabled = config.EnableUserAccessTokens === 'true';\n    const userHasTokenRole = UserUtils.hasUserAccessTokenRole(ownProps.user.roles) || UserUtils.isSystemAdmin(ownProps.user.roles);\n\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOpenId = config.EnableSignUpWithOpenId === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    return {\n        canUseAccessTokens: tokensEnabled && userHasTokenRole,\n        enableOAuthServiceProvider,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOpenId,\n        enableLdap,\n        enableSaml,\n        enableSignUpWithOffice365,\n        experimentalEnableAuthenticationTransfer,\n        passwordConfig: getPasswordConfig(config),\n        militaryTime: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getMe,\n            updateUserPassword,\n            getAuthorizedOAuthApps,\n            deauthorizeOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SecurityTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {UserProfile} from 'mattermost-redux/src/types/users';\n\nimport {PreferenceType} from 'mattermost-redux/types/preferences';\n\nimport {SidebarPreferences} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport Constants from 'utils/constants';\nimport {isMac} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport interface UserSettingsSidebarProps {\n    actions: {\n\n        /**\n     * Function to save the user's preferences\n     */\n        savePreferences: (userId: string, preferences: PreferenceType[]) => any;\n    };\n\n    /**\n   * Current user object\n   */\n    user: UserProfile;\n\n    /**\n   * The preferences for closing the unused direct messages channels\n   */\n    closeUnusedDirectMessages: string;\n\n    /**\n   * Display the close unused direct messages channels options\n   */\n    showUnusedOption: boolean;\n\n    /**\n   * Display the channel grouping and sorting sections options\n   */\n    showChannelOrganization: boolean;\n\n    /**\n   * Display the setting to toggle the new sidebar\n   */\n    showChannelSidebarOrganization: boolean;\n\n    /**\n   * The preferences to show the channel switcher in the sidebar\n   */\n    channelSwitcherOption: string;\n\n    /**\n   * The preferences to show the channel sidebar organization setting\n   */\n    channelSidebarOrganizationOption: string;\n\n    /**\n   * Display the unread channels sections options\n   * The preferences to display channels in sidebar\n   */\n    sidebarPreference: SidebarPreferences;\n\n    /**\n   * Option for including unread channels at top\n   */\n    unreadsAtTop: string;\n\n    /**\n   * Option for including favorite channels at top\n   */\n    favoriteAtTop: string;\n\n    updateSection?: (section: string) => void;\n    activeSection?: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n}\n\nenum Settings {\n    CloseUnusedDirectMessages = 'close_unused_direct_messages',\n    ChannelSwitcherSection = 'channel_switcher_section',\n    ChannelSidebarOrganization = 'channel_sidebar_organization',\n    Grouping = 'grouping',\n    UnreadsAtTop = 'unreadsAtTop',\n    FavoriteAtTop = 'favoriteAtTop',\n    Sorting = 'sorting',\n    NewSidebar = 'newSidebar',\n    ChannelGrouping= 'channel_grouping',\n    ChannelSorting= 'channel_sorting',\n}\n\ninterface GroupingSorting {\n\n    /**\n   * Group channels by type or none\n   */\n    [Settings.Grouping]: string;\n\n    /**\n   * Sort channels by recency or alphabetical order\n   */\n    [Settings.Sorting]: string;\n}\n\ninterface SettingType extends GroupingSorting {\n    [Settings.CloseUnusedDirectMessages]: string;\n    [Settings.ChannelSwitcherSection]: string;\n    [Settings.ChannelSidebarOrganization]: string;\n    [Settings.UnreadsAtTop]: string;\n    [Settings.FavoriteAtTop]: string;\n    [Settings.NewSidebar]?: string;\n}\n\ninterface UserSettingsSidebarState {\n    settings: SettingType;\n    isSaving: boolean;\n    serverError?: string;\n}\n\nexport default class UserSettingsSidebar extends React.PureComponent<UserSettingsSidebarProps, UserSettingsSidebarState> {\n    constructor(props: UserSettingsSidebarProps) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = (): UserSettingsSidebarState => {\n        const {\n            closeUnusedDirectMessages,\n            channelSwitcherOption,\n            channelSidebarOrganizationOption,\n            sidebarPreference: {\n                grouping,\n                sorting,\n            },\n            unreadsAtTop,\n            favoriteAtTop,\n        } = this.props;\n\n        return {\n            settings: {\n                close_unused_direct_messages: closeUnusedDirectMessages,\n                channel_switcher_section: channelSwitcherOption,\n                channel_sidebar_organization: channelSidebarOrganizationOption,\n                grouping,\n                unreadsAtTop,\n                favoriteAtTop,\n                sorting,\n            },\n            isSaving: false,\n        };\n    };\n\n    trackSettingChangeIfNecessary(setting: keyof SettingType) {\n        if (this.state.settings[setting] !== this.props.sidebarPreference[setting as keyof GroupingSorting]) {\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\n        }\n    }\n\n    updateSetting<T extends keyof SettingType>(setting: T, value: SettingType[T]): void {\n        const settings: SettingType = {\n            ...this.state.settings,\n            [setting]: value,\n        };\n\n        this.setState({\n            ...this.state,\n            settings,\n        });\n    }\n\n    handleSubmit = (setting: Settings | keyof SettingType): void => {\n        const {actions, user} = this.props;\n        const preferences: PreferenceType[] = [];\n\n        if (setting === Settings.ChannelGrouping || setting === Settings.ChannelSorting) {\n            const updatedSidebarSettings = {\n                grouping: this.state.settings.grouping,\n                unreads_at_top: this.state.settings.unreadsAtTop,\n                favorite_at_top: this.state.settings.favoriteAtTop,\n                sorting: this.state.settings.sorting,\n            };\n\n            preferences.push({\n                user_id: user.id,\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n                name: '',\n                value: JSON.stringify(updatedSidebarSettings),\n            });\n\n            this.trackSettingChangeIfNecessary(Settings.Grouping);\n            this.trackSettingChangeIfNecessary(Settings.Sorting);\n            this.trackSettingChangeIfNecessary(Settings.UnreadsAtTop);\n            this.trackSettingChangeIfNecessary(Settings.FavoriteAtTop);\n            this.trackSettingChangeIfNecessary(Settings.NewSidebar);\n        } else {\n            preferences.push({\n                user_id: user.id,\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\n        }\n\n        this.setState({isSaving: true});\n\n        actions.savePreferences(user.id, preferences).then(() => {\n            this.updateSection('');\n        });\n    };\n\n    getPreviousSection = (sectionName: string): string | null => {\n        const {showChannelOrganization, channelSidebarOrganizationOption} = this.props;\n        switch (sectionName) {\n        case 'autoCloseDM':\n            return channelSidebarOrganizationOption === 'true' ? 'channelSidebarOrganization' : 'channelSwitcher';\n        case 'groupChannels':\n            return 'dummySectionName';\n        case 'channelSidebarOrganization':\n            return 'dummySectionName';\n        case 'channelSwitcher':\n            return showChannelOrganization ? 'groupChannels' : 'dummySectionName';\n        default:\n            return null;\n        }\n    };\n\n    updateSection = (section: string): void => {\n        if (this.props.updateSection) {\n            this.setState(this.getStateFromProps());\n            this.setState({isSaving: false});\n            this.props.updateSection(section);\n        }\n    };\n\n    renderAutoCloseDMLabel = (value: string): JSX.Element => {\n        if (value === 'after_seven_days') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.after_seven_days'\n                    defaultMessage='After 7 days with no new messages'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.never'\n                defaultMessage='Never'\n            />\n        );\n    };\n\n    renderAutoCloseDMSection = (): JSX.Element => {\n        let contents;\n\n        if (this.props.activeSection === 'autoCloseDM') {\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='autoCloseDMSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMAfterSevenDays'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'after_seven_days'}\n                                        onChange={this.updateSetting.bind(this, Settings.CloseUnusedDirectMessages, 'after_seven_days')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.after_seven_days'\n                                        defaultMessage='After 7 days with no new messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMNever'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'never'}\n                                        onChange={this.updateSetting.bind(this, Settings.CloseUnusedDirectMessages, 'never')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.autoCloseDMDesc'\n                                    defaultMessage='Direct Message conversations can be reopened with the “+” button in the sidebar or using the Channel Switcher (CTRL+K).'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'close_unused_direct_messages'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            contents = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    describe={this.renderAutoCloseDMLabel(this.state.settings.close_unused_direct_messages)}\n                    section={'autoCloseDM'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-dark'/>\n            </React.Fragment>\n        );\n    };\n\n    renderOrganizationLabel = (): JSX.Element[] => {\n        const {\n            sidebarPreference: {\n                sorting,\n                grouping,\n            },\n            unreadsAtTop,\n            favoriteAtTop,\n        } = this.props;\n\n        const messages: JSX.Element[] = [];\n\n        if (grouping === 'by_type') {\n            messages.push(\n                <FormattedMessage\n                    key='by_type'\n                    id='user.settings.sidebar.groupByTypeShort'\n                    defaultMessage='Group by channel type'\n                />,\n            );\n        } else {\n            messages.push(\n                <FormattedMessage\n                    key='none'\n                    id='user.settings.sidebar.groupByNoneShort'\n                    defaultMessage='No grouping'\n                />,\n            );\n        }\n\n        let sortingId;\n        let sortingDefaultMessage;\n        if (sorting === 'alpha') {\n            sortingId = t('user.settings.sidebar.sortAlphaShort');\n            sortingDefaultMessage = 'sorted alphabetically';\n        } else {\n            sortingId = t('user.settings.sidebar.sortRecentShort');\n            sortingDefaultMessage = 'sorted by recency';\n        }\n\n        messages.push(\n            <span key='comma'>{', '}</span>,\n        );\n\n        messages.push(\n            <FormattedMessage\n                key='sorting'\n                id={sortingId}\n                defaultMessage={sortingDefaultMessage}\n            />,\n        );\n\n        let atTopId: string | null = null;\n        let atTopDefaultMessage: string | null = null;\n        if (unreadsAtTop === 'true' && favoriteAtTop === 'false') {\n            atTopId = t('user.settings.sidebar.unreadsShort');\n            atTopDefaultMessage = 'Unreads grouped separately';\n        } else if (unreadsAtTop === 'false' && favoriteAtTop === 'true') {\n            atTopId = t('user.settings.sidebar.favoritesShort');\n            atTopDefaultMessage = 'Favorites grouped separately';\n        } else if (unreadsAtTop === 'true' && favoriteAtTop === 'true') {\n            atTopId = t('user.settings.sidebar.unreadsFavoritesShort');\n            atTopDefaultMessage = 'Unreads and favorites grouped separately';\n        }\n\n        if (atTopId) {\n            messages.push(\n                <br key='break'/>,\n            );\n\n            messages.push(\n                <FormattedMessage\n                    key='atTop'\n                    id={atTopId}\n                    defaultMessage={atTopDefaultMessage as any}\n                />,\n            );\n        }\n\n        return messages;\n    };\n\n    renderChannelSwitcherLabel = (value: string): JSX.Element => {\n        if (value === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.on'\n                    defaultMessage='On'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.off'\n                defaultMessage='Off'\n            />\n        );\n    };\n\n    renderChannelSidebarOrganizationSection = (): JSX.Element => {\n        const helpChannelSidebarOrganizationText = (\n            <FormattedMarkdownMessage\n                id={t('user.settings.sidebar.channelSidebarOrganizationSection.desc')}\n                defaultMessage={'When enabled, access experimental channel sidebar features, including collapsible sections and unreads filtering. [Learn more](!https://about.mattermost.com/default-sidebar/) or [give us feedback](!https://about.mattermost.com/default-sidebar-survey/)'}\n            />\n        );\n\n        let contents = (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id={t('user.settings.sidebar.channelSidebarOrganizationSectionTitle')}\n                        defaultMessage='Experimental Sidebar Features'\n                    />\n                }\n                describe={this.renderChannelSwitcherLabel(this.props.channelSidebarOrganizationOption)}\n                section={'channelSidebarOrganization'}\n                updateSection={this.updateSection}\n            />\n        );\n\n        if (this.props.activeSection === 'channelSidebarOrganization') {\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id={t('user.settings.sidebar.channelSidebarOrganizationSectionTitle')}\n                            defaultMessage='Experimental Sidebar Features'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='channelSidebarOrganizationSectionSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id={t('user.settings.sidebar.channelSidebarOrganizationSectionTitle')}\n                                    defaultMessage='Experimental Sidebar Features'\n                                />\n                            </legend>\n                            <div\n                                id='channelSidebarOrganizationRadioOn'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSidebarOrganizationSectionEnabled'\n                                        type='radio'\n                                        name='channelSidebarOrganization'\n                                        checked={this.state.settings.channel_sidebar_organization === 'true'}\n                                        onChange={this.updateSetting.bind(this, Settings.ChannelSidebarOrganization, 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div\n                                id='channelSidebarOrganizationRadioOff'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSidebarOrganizationSectionOff'\n                                        type='radio'\n                                        name='channelSidebarOrganization'\n                                        checked={this.state.settings.channel_sidebar_organization === 'false'}\n                                        onChange={this.updateSetting.bind(this, Settings.ChannelSidebarOrganization, 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div id='channelSidebarOrganizationelpText'>\n                                <br/>\n                                {helpChannelSidebarOrganizationText}\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'channel_sidebar_organization'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-light'/>\n            </React.Fragment>\n        );\n    };\n\n    renderChannelOrganizationSection = (): JSX.Element => {\n        const {\n            grouping,\n            sorting,\n        } = this.state.settings;\n\n        let contents: JSX.Element;\n\n        if (this.props.activeSection === 'groupChannels') {\n            const inputs: JSX.Element[] = [];\n\n            inputs.push(\n                <fieldset key='groupingSectionSetting'>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupChannelsTitle'\n                            defaultMessage='Channel grouping'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='byTypeOption'\n                                type='radio'\n                                name='groupChannels'\n                                checked={grouping === 'by_type'}\n                                onChange={this.updateSetting.bind(this, Settings.Grouping, 'by_type')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.groupByType'\n                                defaultMessage='Channels grouped by type'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='noneOption'\n                                type='radio'\n                                name='groupChannels'\n                                checked={grouping === 'none'}\n                                onChange={this.updateSetting.bind(this, Settings.Grouping, 'none')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.groupByNone'\n                                defaultMessage='Combine all channel types'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupDesc'\n                            defaultMessage='Group channels by type, or combine all types into a list.'\n                        />\n                    </div>\n                </fieldset>,\n            );\n\n            inputs.push(<hr key='sortingDivider'/>);\n\n            inputs.push(\n                <fieldset key='sortingOptions'>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.sortChannelsTitle'\n                            defaultMessage='Channel sorting'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='recentSectionEnabled'\n                                type='radio'\n                                name='sortChannels'\n                                checked={sorting === 'recent'}\n                                onChange={this.updateSetting.bind(this, Settings.Sorting, 'recent')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.sortRecent'\n                                defaultMessage='Recency'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='alphaSectionEnabled'\n                                type='radio'\n                                name='sortChannels'\n                                checked={sorting === 'alpha'}\n                                onChange={this.updateSetting.bind(this, Settings.Sorting, 'alpha')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.sortAlpha'\n                                defaultMessage='Alphabetically'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.sortDesc'\n                            defaultMessage='Sort channels alphabetically, or by most recent post.'\n                        />\n                    </div>\n                </fieldset>,\n            );\n\n            inputs.push(<hr key='divider'/>);\n\n            inputs.push(\n                <fieldset key='unreadOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='unreadAtTopOption'\n                                type='checkbox'\n                                checked={this.state.settings.unreadsAtTop === 'true'}\n                                onChange={(e) => this.updateSetting(Settings.UnreadsAtTop, (e.target.checked).toString())}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.unreads'\n                                defaultMessage='Unreads grouped separately'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.unreadsDesc'\n                            defaultMessage='Group unread channels separately until read.'\n                        />\n                    </div>\n                </fieldset>,\n            );\n\n            inputs.push(<hr key='groupingDivider'/>);\n\n            inputs.push(\n                <fieldset key='favoriteOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='favoriteAtTopOption'\n                                type='checkbox'\n                                checked={this.state.settings.favoriteAtTop === 'true'}\n                                onChange={(e) => this.updateSetting(Settings.FavoriteAtTop, (e.target.checked).toString())}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.favorites'\n                                defaultMessage='Favorites grouped separately'\n                            />\n                        </label>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.sidebar.favoritesDesc'\n                            defaultMessage='Channels marked as favorites will be grouped separately.'\n                        />\n                    </div>\n                </fieldset>,\n            );\n\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\n                            defaultMessage='Channel Grouping and Sorting'\n                        />\n                    }\n                    inputs={inputs}\n                    setting={'channel_grouping'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            contents = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\n                            defaultMessage='Channel Grouping and Sorting'\n                        />\n                    }\n                    describe={this.renderOrganizationLabel()}\n                    section={'groupChannels'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-light'/>\n            </React.Fragment>\n        );\n    };\n\n    renderChannelSwitcherSection = (): JSX.Element => {\n        let channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.windows');\n        let channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CTRL + K.';\n        if (isMac()) {\n            channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.mac');\n            channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CMD + K.';\n        }\n\n        const helpChannelSwitcherText = (\n            <FormattedMessage\n                id={channelSwitcherSectionDescId}\n                defaultMessage={channelSwitcherSectionDescDefault}\n            />\n        );\n\n        if (this.props.activeSection === 'channelSwitcher') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.channelSwitcherSectionTitle'\n                            defaultMessage='Channel Switcher'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='channelSwitcherSectionSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.channelSwitcherSectionTitle'\n                                    defaultMessage='Channel Switcher'\n                                />\n                            </legend>\n                            <div\n                                id='channelSwitcherRadioOn'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionEnabled'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'true'}\n                                        onChange={this.updateSetting.bind(this, Settings.ChannelSwitcherSection, 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div\n                                id='channelSwitcherRadioOff'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionOff'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'false'}\n                                        onChange={this.updateSetting.bind(this, Settings.ChannelSwitcherSection, 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div id='channelSwitcherHelpText'>\n                                <br/>\n                                {helpChannelSwitcherText}\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'channel_switcher_section'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.sidebar.channelSwitcherSectionTitle'\n                        defaultMessage='Channel Switcher'\n                    />\n                }\n                describe={this.renderChannelSwitcherLabel(this.props.channelSwitcherOption)}\n                section={'channelSwitcher'}\n                updateSection={this.updateSection}\n            />\n        );\n    };\n\n    render(): JSX.Element {\n        const {showUnusedOption, showChannelOrganization, showChannelSidebarOrganization, channelSidebarOrganizationOption} = this.props;\n\n        const channelSidebarOrganizationDisabled = channelSidebarOrganizationOption === 'false';\n\n        const channelOrganizationSection = (showChannelOrganization && channelSidebarOrganizationDisabled) ? this.renderChannelOrganizationSection() : null;\n        const channelSidebarOrganizationSection = showChannelSidebarOrganization ? this.renderChannelSidebarOrganizationSection() : null;\n        const autoCloseDMSection = showUnusedOption ? this.renderAutoCloseDMSection() : null;\n        const channelSwitcherSection = channelSidebarOrganizationDisabled ? this.renderChannelSwitcherSection() : null;\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div\n                            className='modal-back'\n                            onClick={this.props.collapseModal}\n                        >\n                            <LocalizedIcon\n                                className='fa fa-angle-left'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    id='sidebarTitle'\n                    className='user-settings'\n                >\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {channelSidebarOrganizationSection}\n                    {channelOrganizationSection}\n                    {channelSwitcherSection}\n                    {showUnusedOption ? <div className='divider-light'/> : <div className='divider-dark'/>}\n                    {autoCloseDMSection}\n                </div>\n            </div>\n        );\n    }\n}\n/* eslint-disable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators, Dispatch} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference, getSidebarPreferences, getNewSidebarPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from 'mattermost-redux/types/store';\n\nimport UserSettingsSidebar from './user_settings_sidebar';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    const closeUnusedDirectMessages = getPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'close_unused_direct_messages',\n        'after_seven_days',\n    );\n\n    const channelSwitcherOption = getPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'channel_switcher_section',\n        'true',\n    );\n\n    const channelSidebarOrganizationOption = getNewSidebarPreference(state);\n    const sidebarPreference = getSidebarPreferences(state);\n\n    return {\n        closeUnusedDirectMessages,\n        sidebarPreference,\n        unreadsAtTop: sidebarPreference.unreads_at_top,\n        favoriteAtTop: sidebarPreference.favorite_at_top,\n        channelSwitcherOption,\n        channelSidebarOrganizationOption: String(channelSidebarOrganizationOption),\n        showChannelOrganization: config.ExperimentalChannelOrganization === 'true',\n        showChannelSidebarOrganization: config.ExperimentalChannelSidebarOrganization !== 'disabled' && config.ExperimentalChannelSidebarOrganization !== 'always_on',\n        showUnusedOption: config.CloseUnusedDirectMessages === 'true',\n        user: getCurrentUser(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsSidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {UserProfile} from 'mattermost-redux/types/users';\n\nimport AdvancedTab from './advanced';\nimport DisplayTab from './display';\nimport GeneralTab from './general';\nimport NotificationsTab from './notifications';\nimport SecurityTab from './security';\nimport SidebarTab from './sidebar';\n\nexport type Props = {\n    user: UserProfile;\n    activeTab?: string;\n    activeSection?: string;\n    updateSection: (section: string) => void;\n    updateTab: (notifications: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setEnforceFocus: () => void;\n    setRequireConfirm: () => void;\n};\n\nexport default class UserSettings extends React.PureComponent<Props> {\n    render() {\n        if (this.props.activeTab === 'general') {\n            return (\n                <div>\n                    <GeneralTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        updateTab={this.props.updateTab}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'security') {\n            return (\n                <div>\n                    <SecurityTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'notifications') {\n            return (\n                <div>\n                    <NotificationsTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'display') {\n            return (\n                <div>\n                    <DisplayTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'sidebar') {\n            return (\n                <div>\n                    <SidebarTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'advanced') {\n            return (\n                <div>\n                    <AdvancedTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        }\n\n        return <div/>;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from 'mattermost-redux/types/store';\n\nimport UserSettings from './user_settings';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        user: getCurrentUser(state),\n    };\n}\n\nexport default connect(mapStateToProps)(UserSettings);\n"],"sourceRoot":""}