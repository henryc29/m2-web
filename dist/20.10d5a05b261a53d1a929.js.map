{"version":3,"sources":["webpack:///./components/common/back_button.tsx","webpack:///./components/do_verify_email/do_verify_email.tsx","webpack:///./components/do_verify_email/index.ts","webpack:///./images/logo.png"],"names":["BackButton","React","PureComponent","render","props","onClick","url","title","toString","DoVerifyEmail","constructor","actions","verifyUserEmail","verify","URLSearchParams","location","search","get","handleSuccess","handleError","VerifyEmailErrors","FAILED_EMAIL_VERIFICATION","state","verifyStatus","serverError","componentDidMount","verifyEmail","handleRedirect","isLoggedIn","GlobalActions","link","email","encodeURIComponent","redirectTo","browserHistory","push","setState","clearErrors","logError","message","AnnouncementBarMessages","EMAIL_VERIFIED","type","AnnouncementBarTypes","SUCCESS","trackEvent","me","getMe","FAILED_USER_STATE_GET","logoImage","siteName","mapStateToProps","config","getConfig","SiteName","Boolean","getCurrentUserId","mapDispatchToProps","dispatch","bindActionCreators","connect"],"mappings":"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","file":"20.10d5a05b261a53d1a929.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/',\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ServerError} from 'mattermost-redux/types/errors';\n\nimport {ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport {browserHistory} from 'utils/browser_history';\nimport {AnnouncementBarTypes, AnnouncementBarMessages, VerifyEmailErrors} from 'utils/constants';\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button';\nimport LoadingScreen from 'components/loading_screen';\n\nimport * as GlobalActions from 'actions/global_actions';\n\ntype Props = {\n    location: {\n        search: string;\n    };\n    siteName?: string;\n    actions: {\n        verifyUserEmail: (token: string) => ActionFunc | ActionResult;\n        getMe: () => ActionFunc | ActionResult;\n        logError: (error: ServerError, displayable: boolean) => void;\n        clearErrors: () => void;\n    };\n    isLoggedIn: boolean;\n\n}\n\ntype State = {\n    verifyStatus: string;\n    serverError: JSX.Element | null;\n}\n\nexport default class DoVerifyEmail extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            verifyStatus: 'pending',\n            serverError: null,\n        };\n    }\n\n    public componentDidMount(): void {\n        this.verifyEmail();\n    }\n\n    handleRedirect() {\n        if (this.props.isLoggedIn) {\n            GlobalActions.redirectUserToDefaultTeam();\n        } else {\n            let link = '/login?extra=verified';\n            const email = (new URLSearchParams(this.props.location.search)).get('email');\n            if (email) {\n                link += '&email=' + encodeURIComponent(email);\n            }\n            const redirectTo = (new URLSearchParams(this.props.location.search)).get('redirect_to');\n            if (redirectTo) {\n                link += '&redirect_to=' + redirectTo;\n            }\n            browserHistory.push(link);\n        }\n    }\n\n    async handleSuccess() {\n        this.setState({verifyStatus: 'success'});\n        this.props.actions.clearErrors();\n        if (this.props.isLoggedIn) {\n            this.props.actions.logError({\n                message: AnnouncementBarMessages.EMAIL_VERIFIED,\n                type: AnnouncementBarTypes.SUCCESS,\n            } as any, true);\n            trackEvent('settings', 'verify_email');\n            const me = await this.props.actions.getMe();\n            if ('data' in me) {\n                this.handleRedirect();\n            } else if ('error' in me) {\n                this.handleError(VerifyEmailErrors.FAILED_USER_STATE_GET);\n            }\n        } else {\n            this.handleRedirect();\n        }\n    }\n\n    handleError(type: string) {\n        let serverError = null;\n        if (type === VerifyEmailErrors.FAILED_EMAIL_VERIFICATION) {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.invalid_invite'\n                    defaultMessage='The invite link was invalid. Please speak with your Administrator to receive an invitation.'\n                />\n            );\n        } else if (type === VerifyEmailErrors.FAILED_USER_STATE_GET) {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.failed_update_user_state'\n                    defaultMessage='Please clear your cache and try to log in.'\n                />\n            );\n        }\n        this.setState({\n            verifyStatus: 'failure',\n            serverError,\n        });\n    }\n\n    verifyEmail = async () => {\n        const {actions: {verifyUserEmail}} = this.props;\n        const verify = await verifyUserEmail((new URLSearchParams(this.props.location.search)).get('token') || '');\n\n        if ('data' in verify) {\n            this.handleSuccess();\n        } else if ('error' in verify) {\n            this.handleError(VerifyEmailErrors.FAILED_EMAIL_VERIFICATION);\n        }\n    }\n\n    render() {\n        if (this.state.verifyStatus !== 'failure') {\n            return (<LoadingScreen/>);\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className={'form-group has-error'}>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <h1>{this.props.siteName}</h1>\n                            <h4 className='color--light'>\n                                <FormattedMessage\n                                    id='web.root.signup_info'\n                                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                                />\n                            </h4>\n                            {serverError}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators, Dispatch} from 'redux';\nimport {connect} from 'react-redux';\nimport {verifyUserEmail, getMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\n\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {GlobalState} from '../../types/store';\n\nimport DoVerifyEmail from './do_verify_email';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n    return {\n        isLoggedIn: Boolean(getCurrentUserId(state)),\n        siteName,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            verifyUserEmail,\n            getMe,\n            logError,\n            clearErrors,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DoVerifyEmail);\n","export default __webpack_public_path__ + \"files/ab8aa80cba445eb0fb75e6611c292567.png\";"],"sourceRoot":""}