{"version":3,"sources":["webpack:///./components/common/back_button.tsx","webpack:///./images/logo.png","webpack:///./components/common/site_name_and_description.tsx","webpack:///./components/create_team/components/display_name.jsx","webpack:///./components/create_team/components/team_url/team_url.tsx","webpack:///./components/create_team/components/team_url/index.ts","webpack:///./components/create_team/create_team.tsx","webpack:///./components/create_team/index.js"],"names":["BackButton","React","PureComponent","render","id","className","onClick","this","props","to","url","defaultMessage","title","toString","SiteNameAndDescription","customDescriptionText","siteName","description","Fragment","TeamSignupDisplayNamePage","constructor","super","e","preventDefault","trackEvent","displayName","state","teamDisplayName","trim","setState","nameError","length","Constants","MIN_TEAMNAME_LENGTH","MAX_TEAMNAME_LENGTH","values","min","max","newState","wizard","team","display_name","name","cleanUpUrlable","updateParent","currentTarget","select","target","value","componentDidMount","nameDivClass","alt","src","logoImage","type","placeholder","maxLength","autoFocus","onFocus","handleFocus","onChange","handleDisplayNameChange","spellCheck","submitNext","PropTypes","object","func","getState","store","TeamUrl","async","currentUser","getCurrentUser","teamName","roles","includes","teamList","actions","searchTeams","data","teamListWithName","map","filter","teamURL","cleanedName","URL","checkIfTeamExists","createTeam","test","index","RESERVED_TEAM_NAMES","indexOf","isLoading","teamSignup","JSON","parse","stringify","exists","createTeamData","error","history","push","DEFAULT_CHANNEL","message","getTeamName","urlTooltip","Tooltip","finishMessage","delayShow","OVERLAY_TIME_DELAY","placement","overlay","Button","bsStyle","disabled","href","submitBack","connect","dispatch","bindActionCreators","CreateTeam","currentChannel","currentTeam","match","path","config","getConfig","getCurrentChannel","getCurrentTeam","CustomDescriptionText","SiteName"],"mappings":"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","file":"18.299aff752d27861705fd.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/',\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","export default __webpack_public_path__ + \"files/ab8aa80cba445eb0fb75e6611c292567.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    customDescriptionText?: string;\n    siteName: string;\n}\n\nexport default class SiteNameAndDescription extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        siteName: 'Mattermost',\n    }\n\n    public render(): JSX.Element {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1 id='site_name'>{siteName}</h1>\n                <h4\n                    id='site_description'\n                    className='color--light'\n                >\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport {cleanUpUrlable} from 'utils/url';\nimport logoImage from 'images/logo.png';\nimport NextIcon from 'components/widgets/icons/fa_next_icon';\n\nexport default class TeamSignupDisplayNamePage extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Object containing team's display_name and name\n         */\n        state: PropTypes.object,\n\n        /*\n         * Function that updates parent component with state props\n         */\n        updateParent: PropTypes.func,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            teamDisplayName: this.props.state.team?.display_name || '', // eslint-disable-line camelcase\n        };\n    }\n\n    componentDidMount() {\n        trackEvent('signup', 'signup_team_01_name');\n    }\n\n    submitNext = (e) => {\n        e.preventDefault();\n        trackEvent('display_name', 'click_next');\n        var displayName = this.state.teamDisplayName.trim();\n        if (!displayName) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.display_name.required'\n                    defaultMessage='This field is required'\n                />),\n            });\n            return;\n        } else if (displayName.length < Constants.MIN_TEAMNAME_LENGTH || displayName.length > Constants.MAX_TEAMNAME_LENGTH) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.display_name.charLength'\n                    defaultMessage='Name must be {min} or more characters up to a maximum of {max}. You can add a longer team description later.'\n                    values={{\n                        min: Constants.MIN_TEAMNAME_LENGTH,\n                        max: Constants.MAX_TEAMNAME_LENGTH,\n                    }}\n                />),\n            });\n            return;\n        }\n\n        const newState = this.props.state;\n        newState.wizard = 'team_url';\n        newState.team.display_name = displayName;\n        newState.team.name = cleanUpUrlable(displayName);\n        this.props.updateParent(newState);\n    }\n\n    handleFocus = (e) => {\n        e.preventDefault();\n        e.currentTarget.select();\n    }\n\n    handleDisplayNameChange = (e) => {\n        this.setState({teamDisplayName: e.target.value});\n    }\n\n    render() {\n        var nameError = null;\n        var nameDivClass = 'form-group';\n        if (this.state.nameError) {\n            nameError = <label className='control-label'>{this.state.nameError}</label>;\n            nameDivClass += ' has-error';\n        }\n\n        return (\n            <div>\n                <form>\n                    <img\n                        alt={'signup logo'}\n                        className='signup-team-logo'\n                        src={logoImage}\n                    />\n                    <h2>\n                        <FormattedMessage\n                            id='create_team.display_name.teamName'\n                            defaultMessage='Team Name'\n                        />\n                    </h2>\n                    <div className={nameDivClass}>\n                        <div className='row'>\n                            <div className='col-sm-9'>\n                                <input\n                                    id='teamNameInput'\n                                    type='text'\n                                    className='form-control'\n                                    placeholder=''\n                                    maxLength='128'\n                                    value={this.state.teamDisplayName}\n                                    autoFocus={true}\n                                    onFocus={this.handleFocus}\n                                    onChange={this.handleDisplayNameChange}\n                                    spellCheck='false'\n                                />\n                            </div>\n                        </div>\n                        {nameError}\n                    </div>\n                    <div>\n                        <FormattedMessage\n                            id='create_team.display_name.nameHelp'\n                            defaultMessage='Name your team in any language. Your team name shows in menus and headings.'\n                        />\n                    </div>\n                    <button\n                        id='teamNameNextButton'\n                        type='submit'\n                        className='btn btn-primary mt-8'\n                        onClick={this.submitNext}\n                    >\n                        <FormattedMessage\n                            id='create_team.display_name.next'\n                            defaultMessage='Next'\n                        />\n                        <NextIcon/>\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n/* eslint-disable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport React from 'react';\nimport {Button, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Team, TeamSearchOpts, TeamsWithCount} from 'mattermost-redux/types/teams';\nimport {Client4Error} from 'mattermost-redux/types/client4';\n\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport store from 'stores/redux_store.jsx';\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport Constants from 'utils/constants.jsx';\nimport * as URL from 'utils/url';\nimport logoImage from 'images/logo.png';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport OverlayTrigger from 'components/overlay_trigger';\n\ntype State = {\n    isLoading: boolean;\n    nameError: string | JSX.Element;\n    teamURL: string;\n    teamName: string;\n}\n\ntype Props = {\n\n    /*\n     * Object containing team's display_name and name\n     */\n    state: {team: any; wizard: string};\n\n    /*\n     * Function that updates parent component with state props\n     */\n    updateParent: (state: Props['state']) => void;\n\n    /*\n     * Object with redux action creators\n     */\n    actions: {\n\n        /*\n         * Action creator to check if a team already exists\n         */\n        checkIfTeamExists: (teamName: string) => Promise<{exists: boolean}>;\n\n        /*\n     * Action creator to create a new team\n     */\n        createTeam: (team: Team) => Promise<{data: Team; error: Client4Error}>;\n        searchTeams: (term: string, opts: TeamSearchOpts) => Promise<{data: any}>;\n    };\n    history: {\n        push(path: string): void;\n    };\n}\nconst getState = store.getState;\n\nexport default class TeamUrl extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            nameError: '',\n            isLoading: false,\n            teamURL: props.state.team.name,\n            teamName: '',\n        };\n    }\n\n    public getTeamName = async () => {\n        const state = getState();\n        const currentUser = getCurrentUser(state);\n\n        let teamName = `${currentUser.roles.includes('system_admin') ? 'o' : 'u'}-uet`;\n\n        const teamList = await this.props.actions.searchTeams('', {});\n        if (teamList?.data) {\n            const teamListWithName = teamList.data.map((value: any) => value.name).filter((value: any) => value.includes('o-uet'));\n\n            teamName = `${teamName}-${teamListWithName.length + 1}`;\n        }\n        this.setState({teamName});\n    }\n\n    public componentDidMount() {\n        trackEvent('signup', 'signup_team_02_url');\n        this.getTeamName();\n    }\n\n    public submitBack = (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n        e.preventDefault();\n        trackEvent('signup', 'click_back');\n        const newState = this.props.state;\n        newState.wizard = 'display_name';\n        this.props.updateParent(newState);\n    }\n\n    public submitNext = async (e: React.MouseEvent<Button, MouseEvent>) => {\n        e.preventDefault();\n        trackEvent('signup', 'click_finish');\n\n        const name = this.state.teamURL.trim();\n        const cleanedName = URL.cleanUpUrlable(name);\n        const urlRegex = /^[a-z]+([a-z\\-0-9]+|(__)?)[a-z0-9]+$/g;\n        const {actions: {checkIfTeamExists, createTeam}} = this.props;\n\n        if (!name) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.team_url.required'\n                    defaultMessage='This field is required'\n                />),\n            });\n            return;\n        }\n\n        if (cleanedName.length < Constants.MIN_TEAMNAME_LENGTH || cleanedName.length > Constants.MAX_TEAMNAME_LENGTH) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.team_url.charLength'\n                    defaultMessage='Name must be {min} or more characters up to a maximum of {max}'\n                    values={{\n                        min: Constants.MIN_TEAMNAME_LENGTH,\n                        max: Constants.MAX_TEAMNAME_LENGTH,\n                    }}\n                />),\n            });\n            return;\n        }\n\n        if (cleanedName !== name || !urlRegex.test(name)) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.team_url.regex'\n                    defaultMessage=\"Use only lower case letters, numbers and dashes. Must start with a letter and can't end in a dash.\"\n                />),\n            });\n            return;\n        }\n\n        for (let index = 0; index < Constants.RESERVED_TEAM_NAMES.length; index++) {\n            if (cleanedName.indexOf(Constants.RESERVED_TEAM_NAMES[index]) === 0) {\n                this.setState({nameError: (\n                    <FormattedMarkdownMessage\n                        id='create_team.team_url.taken'\n                        defaultMessage='This URL [starts with a reserved word](!https://docs.mattermost.com/help/getting-started/creating-teams.html#team-url) or is unavailable. Please try another.'\n                    />),\n                });\n                return;\n            }\n        }\n\n        this.setState({isLoading: true});\n        const teamSignup = JSON.parse(JSON.stringify(this.props.state));\n        teamSignup.team.type = 'O';\n        teamSignup.team.name = this.state.teamName;\n\n        const checkIfTeamExistsData: { exists: boolean } = await checkIfTeamExists(name);\n        const exists = checkIfTeamExistsData.exists;\n\n        if (exists) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.team_url.unavailable'\n                    defaultMessage='This URL is taken or unavailable. Please try another.'\n                />),\n            });\n            this.setState({isLoading: false});\n            return;\n        }\n\n        const createTeamData: { data: Team; error: any } = await createTeam(teamSignup.team);\n        const data = createTeamData.data;\n        const error = createTeamData.error;\n\n        if (data) {\n            this.props.history.push('/' + data.name + '/channels/' + Constants.DEFAULT_CHANNEL);\n            trackEvent('signup', 'signup_team_03_complete');\n        } else if (error) {\n            this.setState({nameError: error.message});\n            this.setState({isLoading: false});\n        }\n    }\n\n    public handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        e.currentTarget.select();\n    }\n\n    public handleTeamURLInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({teamURL: e.target.value});\n    }\n\n    render() {\n        let nameError = null;\n        let nameDivClass = 'form-group';\n        if (this.state.nameError) {\n            nameError = <label className='control-label'>{this.state.nameError}</label>;\n            nameDivClass += ' has-error';\n        }\n\n        const title = `${URL.getSiteURL()}/`;\n        const urlTooltip = (\n            <Tooltip id='urlTooltip'>{title}</Tooltip>\n        );\n\n        let finishMessage = (\n            <FormattedMessage\n                id='create_team.team_url.finish'\n                defaultMessage='Finish'\n            />\n        );\n\n        if (this.state.isLoading) {\n            finishMessage = (\n                <FormattedMessage\n                    id='create_team.team_url.creatingTeam'\n                    defaultMessage='Creating team...'\n                />\n            );\n        }\n\n        return (\n            <div>\n                <form>\n                    <img\n                        alt={'signup team logo'}\n                        className='signup-team-logo'\n                        src={logoImage}\n                    />\n                    <h2>\n                        <FormattedMessage\n                            id='create_team.team_url.teamUrl'\n                            defaultMessage='Team URL'\n                        />\n                    </h2>\n                    <div className={nameDivClass}>\n                        <div className='row'>\n                            <div className='col-sm-11'>\n                                <div className='input-group input-group--limit'>\n                                    {this.state.teamName !== '' && (<OverlayTrigger\n                                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                                        placement='top'\n                                        overlay={urlTooltip}\n                                    // eslint-disable-next-line react/jsx-closing-bracket-location\n                                    >\n                                        <span className='input-group-addon'>\n                                            {title + this.state.teamName}\n                                        </span>\n                                    </OverlayTrigger>)}\n                                    {/* <input\n                                        id='teamURLInput'\n                                        type='text'\n                                        className='form-control'\n                                        placeholder=''\n                                        maxLength={128}\n                                        value={this.state.teamURL}\n                                        autoFocus={true}\n                                        onFocus={this.handleFocus}\n                                        onChange={this.handleTeamURLInputChange}\n                                        spellCheck='false'\n                                    /> */}\n                                </div>\n                            </div>\n                        </div>\n                        {nameError}\n                    </div>\n                    {/* <p>\n                        <FormattedMessage\n                            id='create_team.team_url.webAddress'\n                            defaultMessage='Choose the web address of your new team:'\n                        />\n                    </p>\n                    <ul className='color--light'>\n                        <li>\n                            <FormattedMessage\n                                id='create_team.team_url.hint1'\n                                defaultMessage='Short and memorable is best'\n                            />\n                        </li>\n                        <li>\n                            <FormattedMessage\n                                id='create_team.team_url.hint2'\n                                defaultMessage='Use lowercase letters, numbers and dashes'\n                            />\n                        </li>\n                        <li>\n                            <FormattedMessage\n                                id='create_team.team_url.hint3'\n                                defaultMessage=\"Must start with a letter and can't end in a dash\"\n                            />\n                        </li>\n                    </ul> */}\n                    <div className='mt-8'>\n                        <Button\n                            id='teamURLFinishButton'\n                            type='submit'\n                            bsStyle='primary'\n                            disabled={this.state.isLoading}\n                            onClick={(e: React.MouseEvent<Button, MouseEvent>) => this.submitNext(e)}\n                        >\n                            {finishMessage}\n                        </Button>\n                    </div>\n                    <div className='mt-8'>\n                        <a\n                            href='#'\n                            onClick={this.submitBack}\n                        >\n                            <FormattedMessage\n                                id='create_team.team_url.back'\n                                defaultMessage='Back to previous step'\n                            />\n                        </a>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {ActionFunc} from 'mattermost-redux/types/actions';\nimport {checkIfTeamExists, createTeam, getTeams as searchTeams} from 'mattermost-redux/actions/teams';\n\nimport {Team, TeamSearchOpts, TeamsWithCount} from 'mattermost-redux/types/teams';\nimport {Client4Error} from 'mattermost-redux/types/client4';\n\nimport TeamUrl from './team_url';\n\ntype Actions = {\n    searchTeams: (term: string, opts: TeamSearchOpts) => Promise<{data: any}>;\n    checkIfTeamExists: (teamName: string) => Promise<{exists: boolean}>;\n    createTeam: (team: Team) => Promise<{data: Team; error: Client4Error}>;\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            checkIfTeamExists,\n            createTeam,\n            searchTeams,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(TeamUrl);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Route, Switch, Redirect, RouteComponentProps} from 'react-router-dom';\n\nimport {Channel} from 'mattermost-redux/types/channels';\n\nimport {Team} from 'mattermost-redux/types/teams';\n\nimport AnnouncementBar from 'components/announcement_bar';\nimport BackButton from 'components/common/back_button';\nimport DisplayName from 'components/create_team/components/display_name';\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\nimport TeamUrl from 'components/create_team/components/team_url';\n\ntype Props = {\n\n    /*\n   * Object containing information on the current team, used to define BackButton's url\n   */\n    currentTeam: Team;\n\n    /*\n   * Object containing information on the current selected channel, used to define BackButton's url\n   */\n    currentChannel: Channel;\n\n    /*\n    * String containing the custom branding's text\n    */\n    customDescriptionText: string;\n\n    /*\n   * String containing the custom branding's Site Name\n   */\n    siteName: string;\n\n    /*\n   * Object from react-router\n   */\n    match: {\n        url: string;\n    };\n};\n\ntype State = {\n    team: {[key: string]: any};\n    wizard: string;\n};\n\nexport default class CreateTeam extends React.PureComponent<Props & RouteComponentProps, State> {\n    public constructor(props: Props & RouteComponentProps) {\n        super(props);\n\n        this.state = {\n            team: {},\n            wizard: 'display_name',\n        };\n    }\n\n    public updateParent = (state: State) => {\n        this.setState(state);\n        this.props.history.push('/create_team/' + state.wizard);\n    };\n\n    render() {\n        const {\n            currentChannel,\n            currentTeam,\n            customDescriptionText,\n            match,\n            siteName,\n        } = this.props;\n\n        let url = '/select_team';\n        if (currentTeam) {\n            url = `/${currentTeam.name}`;\n            if (currentChannel) {\n                url += `/channels/${currentChannel.name}`;\n            }\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                <BackButton url={url}/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <SiteNameAndDescription\n                            customDescriptionText={customDescriptionText}\n                            siteName={siteName}\n                        />\n                        <div className='signup__content'>\n                            <Switch>\n                                <Route\n                                    path={`${this.props.match.url}/display_name`}\n                                    render={(props) => (\n                                        <DisplayName\n                                            state={this.state}\n                                            updateParent={this.updateParent}\n                                            {...props}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/team_url`}\n                                    render={(props) => (\n                                        <TeamUrl\n                                            state={this.state}\n                                            updateParent={this.updateParent}\n                                            {...props}\n                                        />\n                                    )}\n                                />\n                                <Redirect to={`${match.url}/display_name`}/>\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport CreateTeam from './create_team';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const currentChannel = getCurrentChannel(state);\n    const currentTeam = getCurrentTeam(state);\n\n    const customDescriptionText = config.CustomDescriptionText;\n    const siteName = config.SiteName;\n\n    return {\n        currentChannel,\n        currentTeam,\n        customDescriptionText,\n        siteName,\n    };\n}\n\nexport default connect(mapStateToProps)(CreateTeam);\n"],"sourceRoot":""}