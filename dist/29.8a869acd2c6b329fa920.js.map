{"version":3,"sources":["webpack:///./components/pdf_preview.jsx"],"names":["PDFPreview","React","PureComponent","constructor","props","super","e","fileDownloadUrl","this","fileInfo","link","getFileDownloadUrl","id","preventDefault","window","location","href","pageIndex","prevProps","pdfPagesRendered","state","pdfPagesLoaded","scale","context","current","getContext","viewport","pdfPages","getViewport","height","width","renderContext","canvasContext","render","PDFJS","getDocument","fileUrl","then","onDocumentLoad","catch","onDocumentLoadError","pdf","numPages","setState","i","getPage","onPageLoad","reason","console","log","loading","success","page","Object","assign","createRef","componentDidMount","getPdfDocument","prevFileUrl","componentDidUpdate","renderPDFPage","className","pdfCanvases","push","ref","key","onClick","downloadFile","defaultMessage","PropTypes","object","isRequired","string","number"],"mappings":"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","file":"29.8a869acd2c6b329fa920.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport PDFJS from 'pdfjs-dist';\nimport {getFileDownloadUrl} from 'mattermost-redux/utils/file_utils';\n\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\nimport FileInfoPreview from 'components/file_info_preview';\n\nconst MAX_PDF_PAGES = 5;\n\nexport default class PDFPreview extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * Compare file types\n        */\n        fileInfo: PropTypes.object.isRequired,\n\n        /**\n        *  URL of pdf file to output and compare to update props url\n        */\n        fileUrl: PropTypes.string.isRequired,\n        scale: PropTypes.number.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.pdfPagesRendered = {};\n\n        this.state = {\n            pdf: null,\n            pdfPages: {},\n            pdfPagesLoaded: {},\n            numPages: 0,\n            loading: true,\n            success: false,\n        };\n\n        for (let i = 0; i < MAX_PDF_PAGES; i++) {\n            this[`pdfCanvasRef-${i}`] = React.createRef();\n        }\n    }\n\n    componentDidMount() {\n        this.getPdfDocument();\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.fileUrl !== state.prevFileUrl) {\n            return {\n                pdf: null,\n                pdfPages: {},\n                pdfPagesLoaded: {},\n                numPages: 0,\n                loading: true,\n                success: false,\n                prevFileUrl: props.fileUrl,\n            };\n        }\n        return null;\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.fileUrl !== prevProps.fileUrl) {\n            this.getPdfDocument();\n            this.pdfPagesRendered = {};\n        }\n\n        if (this.state.success) {\n            for (let i = 0; i < this.state.numPages; i++) {\n                this.renderPDFPage(i, prevProps);\n            }\n        }\n    }\n\n    downloadFile = (e) => {\n        const fileDownloadUrl = this.props.fileInfo.link || getFileDownloadUrl(this.props.fileInfo.id);\n        e.preventDefault();\n        window.location.href = fileDownloadUrl;\n    }\n\n    renderPDFPage = (pageIndex, prevProps) => {\n        if ((this.pdfPagesRendered[pageIndex] || !this.state.pdfPagesLoaded[pageIndex]) &&\n            (prevProps.scale === this.props.scale)) {\n            return;\n        }\n\n        const canvas = this[`pdfCanvasRef-${pageIndex}`].current;\n        const context = canvas.getContext('2d');\n        const viewport = this.state.pdfPages[pageIndex].getViewport(this.props.scale);\n\n        this[`pdfCanvasRef-${pageIndex}`].current.height = viewport.height;\n        this[`pdfCanvasRef-${pageIndex}`].current.width = viewport.width;\n\n        const renderContext = {\n            canvasContext: context,\n            viewport,\n        };\n\n        this.state.pdfPages[pageIndex].render(renderContext);\n        this.pdfPagesRendered[pageIndex] = true;\n    }\n\n    getPdfDocument = () => {\n        PDFJS.getDocument(this.props.fileUrl).then(this.onDocumentLoad).catch(this.onDocumentLoadError);\n    }\n\n    onDocumentLoad = (pdf) => {\n        const numPages = pdf.numPages <= MAX_PDF_PAGES ? pdf.numPages : MAX_PDF_PAGES;\n        this.setState({pdf, numPages});\n        for (let i = 1; i <= pdf.numPages; i++) {\n            pdf.getPage(i).then(this.onPageLoad);\n        }\n    }\n\n    onDocumentLoadError = (reason) => {\n        console.log('Unable to load PDF preview: ' + reason); //eslint-disable-line no-console\n        this.setState({loading: false, success: false});\n    }\n\n    onPageLoad = (page) => {\n        const pdfPages = Object.assign({}, this.state.pdfPages);\n        pdfPages[page.pageIndex] = page;\n\n        const pdfPagesLoaded = Object.assign({}, this.state.pdfPagesLoaded);\n        pdfPagesLoaded[page.pageIndex] = true;\n\n        this.setState({pdfPages, pdfPagesLoaded});\n\n        if (page.pageIndex === 0) {\n            this.setState({success: true, loading: false});\n        }\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <div className='view-image__loading'>\n                    <LoadingSpinner/>\n                </div>\n            );\n        }\n\n        if (!this.state.success) {\n            return (\n                <FileInfoPreview\n                    fileInfo={this.props.fileInfo}\n                    fileUrl={this.props.fileUrl}\n                />\n            );\n        }\n\n        const pdfCanvases = [];\n        for (let i = 0; i < this.state.numPages; i++) {\n            pdfCanvases.push(\n                <canvas\n                    ref={this[`pdfCanvasRef-${i}`]}\n                    key={'previewpdfcanvas' + i}\n                />,\n            );\n\n            if (i < this.state.numPages - 1 && this.state.numPages > 1) {\n                pdfCanvases.push(\n                    <div\n                        key={'previewpdfspacer' + i}\n                        className='pdf-preview-spacer'\n                    />,\n                );\n            }\n        }\n\n        if (this.state.pdf.numPages > MAX_PDF_PAGES) {\n            pdfCanvases.push(\n                <div\n                    className='pdf-max-pages'\n                    key='previewpdfmorepages'\n                >\n                    <button\n                        className='btn btn-primary'\n                        onClick={this.downloadFile}\n                    >\n                        {<i className='icon icon-download-outline pdf-download-btn-spacer'/> }\n                        <FormattedMessage\n                            id='pdf_preview.max_pages'\n                            defaultMessage='Download to read more pages'\n                        />\n                    </button>\n                </div>,\n            );\n        }\n\n        return (\n            <div className='post-code'>\n                {pdfCanvases}\n            </div>\n        );\n    }\n}\n"],"sourceRoot":""}