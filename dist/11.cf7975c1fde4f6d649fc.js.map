{"version":3,"sources":["webpack:///./components/common/back_button.tsx","webpack:///./images/logo.png","webpack:///./components/common/site_name_and_description.tsx","webpack:///./components/login/login_mfa.jsx","webpack:///./actions/views/login.js","webpack:///./components/login/login_controller/login_controller.jsx","webpack:///./components/login/login_controller/index.js"],"names":["BackButton","React","PureComponent","render","id","className","onClick","this","props","to","url","defaultMessage","title","toString","SiteNameAndDescription","customDescriptionText","siteName","description","Fragment","LoginMfa","constructor","super","e","preventDefault","token","target","value","trim","replace","state","setState","submit","loginId","toLowerCase","password","saving","serverError","errorClass","onSubmit","handleSubmit","type","name","placeholder","t","spellCheck","autoComplete","autoFocus","onChange","handleChange","disabled","localizeMessage","savingMessage","PropTypes","string","isRequired","func","login","mfaToken","dispatch","ignoreMfaRequiredError","UserActions","loginById","userId","async","promise","result","error","server_error_id","data","LoginController","sessionExpired","document","intl","formatMessage","closeSessionExpiredNotification","showNotification","body","Utils","requireInteraction","silent","window","focus","then","closeNotification","catch","onDismissSessionExpired","location","newQuery","search","browserHistory","pathname","hash","loginIdInput","current","passwordInput","msgId","emailSigninEnabled","usernameSigninEnabled","ldapEnabled","values","ldapUsername","ldapLoginFieldName","loading","actions","push","encodeURIComponent","showMfa","message","params","URLSearchParams","inviteToken","get","inviteId","team","addUserToTeamFromInvite","finishSignin","experimentalPrimaryTeam","redirectTo","LocalStorageStore","setWasLoggedIn","match","GlobalActions","brandImageError","enableCustomBrand","text","customBrandText","brandImageUrl","Client4","getBrandImageUrl","brandImageStyle","display","alt","src","onError","handleBrandImageError","style","options","mentions","imagesMetadata","loginPlaceholders","length","slice","join","enableSignUpWithEmail","enableSignUpWithGitLab","enableSignUpWithOffice365","enableSignUpWithGoogle","enableSignUpWithOpenId","enableLdap","enableSaml","extraParam","Constants","GET_TERMS_ERROR","TERMS_REJECTED","SIGNIN_CHANGE","SIGNIN_VERIFIED","PASSWORD_CHANGE","CREATE_LDAP","loginControls","gitlabSigninEnabled","googleSigninEnabled","office365SigninEnabled","openIdSigninEnabled","samlSigninEnabled","samlEnabled","key","preSubmit","margin","ref","handleLoginIdChange","createLoginPlaceholder","autoCapitalize","handlePasswordChange","enableOpenServer","checkSignUpEnabled","href","getOAuthRoute","buttonStyle","openidButtonColor","backgroundColor","buttonText","openidButtonText","getUrl","samlLoginButtonText","createExtraText","isLicensed","enableSignInWithUsername","enableSignInWithEmail","createRef","componentDidMount","configureTitle","currentUser","extra","email","getWasLoggedIn","set","SESSION_EXPIRED","showSessionExpiredNotificationIfNeeded","componentDidUpdate","componentWillUnmount","initializing","content","customContent","customClass","backButton","hideMfa","createLoginOptions","createCustomLogin","logoImage","intlShape","object","bool","shape","injectIntl","connect","config","getConfig","getLicense","IsLicensed","CustomBrandText","CustomDescriptionText","EnableCustomBrand","EnableLdap","EnableOpenServer","EnableSaml","EnableSignInWithEmail","EnableSignInWithUsername","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOffice365","EnableSignUpWithOpenId","LdapLoginFieldName","SamlLoginButtonText","OpenIdButtonText","OpenIdButtonColor","SiteName","requests","users","logout","status","RequestStatus","SUCCESS","storage","initialized","ExperimentalPrimaryTeam","getTeamByName","member","getMyTeamMember","team_id","getCurrentUser","bindActionCreators"],"mappings":"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","file":"11.cf7975c1fde4f6d649fc.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/',\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","export default __webpack_public_path__ + \"files/ab8aa80cba445eb0fb75e6611c292567.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    customDescriptionText?: string;\n    siteName: string;\n}\n\nexport default class SiteNameAndDescription extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        siteName: 'Mattermost',\n    }\n\n    public render(): JSX.Element {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1 id='site_name'>{siteName}</h1>\n                <h4\n                    id='site_description'\n                    className='color--light'\n                >\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SaveButton from 'components/save_button';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LoginMfa extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * User's login ID\n         */\n        loginId: PropTypes.string.isRequired,\n\n        /*\n         * User's password\n         */\n        password: PropTypes.string.isRequired,\n\n        /*\n         * Function to call when submitting user credentials\n         */\n        submit: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            saving: false,\n            token: '',\n            serverError: '',\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        const token = e.target.value.trim().replace(/\\s/g, '');\n\n        if (token !== this.state.token) {\n            this.setState({\n                token,\n            });\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        state.serverError = '';\n        state.saving = true;\n        this.setState(state);\n\n        this.props.submit(\n            this.props.loginId.toLowerCase(),\n            this.props.password,\n            this.state.token,\n        );\n    }\n\n    render() {\n        let serverError;\n        let errorClass = '';\n        if (this.state.serverError) {\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\n            errorClass = ' has-error';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='signup__email-container'>\n                    <p>\n                        <FormattedMessage\n                            id='login_mfa.enterToken'\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\n                        />\n                    </p>\n                    <div className={'form-group' + errorClass}>\n                        {serverError}\n                    </div>\n                    <div className={'form-group' + errorClass}>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            name='token'\n                            placeholder={{id: t('login_mfa.token'), defaultMessage: 'MFA Token'}}\n                            spellCheck='false'\n                            autoComplete='off'\n                            autoFocus={true}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={this.state.saving}\n                            onClick={this.handleSubmit}\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\n                        />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\n\nexport function login(loginId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.login(loginId, password, mfaToken)));\n    };\n}\n\nexport function loginById(userId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.loginById(userId, password, mfaToken)));\n    };\n}\n\nasync function ignoreMfaRequiredError(promise) {\n    let result = await promise;\n\n    if (result.error && result.error.server_error_id === 'api.context.mfa_required.app_error') {\n        result = {data: true};\n    }\n\n    return result;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as GlobalActions from 'actions/global_actions';\nimport LocalStorageStore from 'stores/local_storage_store';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport {intlShape} from 'utils/react_intl';\nimport * as Utils from 'utils/utils.jsx';\nimport {showNotification} from 'utils/notifications';\nimport {t} from 'utils/i18n.jsx';\n\nimport logoImage from 'images/logo.png';\n\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\nimport AnnouncementBar from 'components/announcement_bar';\nimport FormError from 'components/form_error';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport BackButton from 'components/common/back_button';\nimport LoadingScreen from 'components/loading_screen';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport SuccessIcon from 'components/widgets/icons/fa_success_icon';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\nimport LocalizedInput from 'components/localized_input/localized_input';\nimport Markdown from 'components/markdown';\n\nimport LoginMfa from '../login_mfa.jsx';\n\nclass LoginController extends React.PureComponent {\n    static propTypes = {\n        intl: intlShape.isRequired,\n\n        location: PropTypes.object.isRequired,\n        isLicensed: PropTypes.bool.isRequired,\n        currentUser: PropTypes.object,\n        customBrandText: PropTypes.string,\n        customDescriptionText: PropTypes.string,\n        enableCustomBrand: PropTypes.bool.isRequired,\n        enableLdap: PropTypes.bool.isRequired,\n        enableOpenServer: PropTypes.bool.isRequired,\n        enableSaml: PropTypes.bool.isRequired,\n        enableSignInWithEmail: PropTypes.bool.isRequired,\n        enableSignInWithUsername: PropTypes.bool.isRequired,\n        enableSignUpWithEmail: PropTypes.bool.isRequired,\n        enableSignUpWithGitLab: PropTypes.bool.isRequired,\n        enableSignUpWithGoogle: PropTypes.bool.isRequired,\n        enableSignUpWithOffice365: PropTypes.bool.isRequired,\n        enableSignUpWithOpenId: PropTypes.bool.isRequired,\n        experimentalPrimaryTeam: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n        samlLoginButtonText: PropTypes.string,\n        openidButtonText: PropTypes.string,\n        openidButtonColor: PropTypes.string,\n        siteName: PropTypes.string,\n        initializing: PropTypes.bool,\n        actions: PropTypes.shape({\n            login: PropTypes.func.isRequired,\n            addUserToTeamFromInvite: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        let loginId = '';\n        if ((new URLSearchParams(this.props.location.search)).get('extra') === Constants.SIGNIN_VERIFIED && (new URLSearchParams(this.props.location.search)).get('email')) {\n            loginId = (new URLSearchParams(this.props.location.search)).get('email');\n        }\n\n        this.state = {\n            ldapEnabled: this.props.isLicensed && this.props.enableLdap,\n            usernameSigninEnabled: this.props.enableSignInWithUsername,\n            emailSigninEnabled: this.props.enableSignInWithEmail,\n            samlEnabled: this.props.isLicensed && this.props.enableSaml,\n            loginId,\n            password: '',\n            showMfa: false,\n            loading: false,\n            sessionExpired: false,\n            brandImageError: false,\n        };\n\n        this.loginIdInput = React.createRef();\n        this.passwordInput = React.createRef();\n    }\n\n    componentDidMount() {\n        this.configureTitle();\n\n        if (this.props.currentUser) {\n            GlobalActions.redirectUserToDefaultTeam();\n            return;\n        }\n\n        const search = new URLSearchParams(this.props.location.search);\n        const extra = search.get('extra');\n        const email = search.get('email');\n\n        if (extra === Constants.SIGNIN_VERIFIED && email) {\n            this.passwordInput.current.focus();\n        }\n\n        // Determine if the user was unexpectedly logged out.\n        if (LocalStorageStore.getWasLoggedIn()) {\n            if (extra === Constants.SIGNIN_CHANGE) {\n                // Assume that if the user triggered a sign in change, it was intended to logout.\n                // We can't preflight this, since in some flows it's the server that invalidates\n                // our session after we use it to complete the sign in change.\n                LocalStorageStore.setWasLoggedIn(false);\n            } else {\n                // Although the authority remains the local sessionExpired bit on the state, set this\n                // extra field in the querystring to signal the desktop app. And although eslint\n                // complains about this, it is allowed: https://reactjs.org/docs/react-component.html#componentdidmount.\n                // eslint-disable-next-line react/no-did-mount-set-state\n                this.setState({sessionExpired: true});\n                search.set('extra', Constants.SESSION_EXPIRED);\n                browserHistory.replace(`${this.props.location.pathname}?${search}`);\n            }\n        }\n\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentDidUpdate() {\n        this.configureTitle();\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentWillUnmount() {\n        if (this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    configureTitle = () => {\n        if (this.state.sessionExpired) {\n            document.title = this.props.intl.formatMessage({\n                id: 'login.session_expired.title',\n                defaultMessage: '* {siteName} - Session Expired',\n            }, {\n                siteName: this.props.siteName,\n            });\n        } else {\n            document.title = this.props.siteName;\n        }\n    }\n\n    showSessionExpiredNotificationIfNeeded = () => {\n        if (this.state.sessionExpired && !this.closeSessionExpiredNotification) {\n            showNotification({\n                title: this.props.siteName,\n                body: Utils.localizeMessage(\n                    'login.session_expired.notification',\n                    'Session Expired: Please sign in to continue receiving notifications.',\n                ),\n                requireInteraction: true,\n                silent: false,\n                onClick: () => {\n                    window.focus();\n                    if (this.closeSessionExpiredNotification()) {\n                        this.closeSessionExpiredNotification();\n                        this.closeSessionExpiredNotification = null;\n                    }\n                },\n            }).then((closeNotification) => {\n                this.closeSessionExpiredNotification = closeNotification;\n            }).catch(() => {\n                // Ignore the failure to display the notification.\n            });\n        } else if (!this.state.sessionExpired && this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        // Discard any session expiry notice once the user interacts with the login page.\n        this.onDismissSessionExpired();\n\n        const {location} = this.props;\n        const newQuery = location.search.replace(/(extra=password_change)&?/i, '');\n        if (newQuery !== location.search) {\n            browserHistory.replace(`${location.pathname}${newQuery}${location.hash}`);\n        }\n\n        // password managers don't always call onInput handlers for form fields so it's possible\n        // for the state to get out of sync with what the user sees in the browser\n        let loginId = this.state.loginId;\n        if (this.loginIdInput.current) {\n            loginId = this.loginIdInput.current.value;\n            if (loginId !== this.state.loginId) {\n                this.setState({loginId});\n            }\n        }\n\n        let password = this.state.password;\n        if (this.passwordInput.current) {\n            password = this.passwordInput.current.value;\n            if (password !== this.state.password) {\n                this.setState({password});\n            }\n        }\n\n        // don't trim the password since we support spaces in passwords\n        loginId = loginId.trim().toLowerCase();\n\n        if (!loginId) {\n            t('login.noEmail');\n            t('login.noEmailLdapUsername');\n            t('login.noEmailUsername');\n            t('login.noEmailUsernameLdapUsername');\n            t('login.noLdapUsername');\n            t('login.noUsername');\n            t('login.noUsernameLdapUsername');\n\n            // it's slightly weird to be constructing the message ID, but it's a bit nicer than triply nested if statements\n            let msgId = 'login.no';\n            if (this.state.emailSigninEnabled) {\n                msgId += 'Email';\n            }\n            if (this.state.usernameSigninEnabled) {\n                msgId += 'Username';\n            }\n            if (this.state.ldapEnabled) {\n                msgId += 'LdapUsername';\n            }\n\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id={msgId}\n                        values={{\n                            ldapUsername: this.props.ldapLoginFieldName || Utils.localizeMessage('login.ldapUsernameLower', 'AD/LDAP username'),\n                        }}\n                    />\n                ),\n            });\n            return;\n        }\n\n        if (!password) {\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id='login.noPassword'\n                        defaultMessage='Please enter your password'\n                    />\n                ),\n            });\n            return;\n        }\n\n        this.submit(loginId, password, '');\n    }\n\n    submit = (loginId, password, token) => {\n        this.setState({serverError: null, loading: true});\n\n        this.props.actions.login(loginId, password, token).then(async ({error}) => {\n            if (error) {\n                if (error.server_error_id === 'api.user.login.not_verified.app_error') {\n                    browserHistory.push('/should_verify_email?&email=' + encodeURIComponent(loginId));\n                } else if (error.server_error_id === 'store.sql_user.get_for_login.app_error' ||\n                    error.server_error_id === 'ent.ldap.do_login.user_not_registered.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.userNotFound'\n                                defaultMessage=\"We couldn't find an account matching your login credentials.\"\n                            />\n                        ),\n                    });\n                } else if (error.server_error_id === 'api.user.check_user_password.invalid.app_error' || error.server_error_id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.invalidPassword'\n                                defaultMessage='Your password is incorrect.'\n                            />\n                        ),\n                    });\n                } else if (!this.state.showMfa && error.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({showMfa: false, serverError: error.message, loading: false});\n                }\n\n                return;\n            }\n\n            // check for query params brought over from signup_user_complete\n            const params = new URLSearchParams(this.props.location.search);\n            const inviteToken = params.get('t') || '';\n            const inviteId = params.get('id') || '';\n\n            if (inviteId || inviteToken) {\n                const {data: team} = await this.props.actions.addUserToTeamFromInvite(inviteToken, inviteId);\n                if (team) {\n                    this.finishSignin(team);\n                } else {\n                    // there's not really a good way to deal with this, so just let the user log in like normal\n                    this.finishSignin();\n                }\n            } else {\n                this.finishSignin();\n            }\n        });\n    }\n\n    finishSignin = (team) => {\n        const experimentalPrimaryTeam = this.props.experimentalPrimaryTeam;\n        const query = new URLSearchParams(this.props.location.search);\n        const redirectTo = query.get('redirect_to');\n\n        Utils.setCSRFFromCookie();\n\n        // Record a successful login to local storage. If an unintentional logout occurs, e.g.\n        // via session expiration, this bit won't get reset and we can notify the user as such.\n        LocalStorageStore.setWasLoggedIn(true);\n        if (redirectTo && redirectTo.match(/^\\/([^/]|$)/)) {\n            browserHistory.push(redirectTo);\n        } else if (team) {\n            browserHistory.push(`/${team.name}`);\n        } else if (experimentalPrimaryTeam) {\n            browserHistory.push(`/${experimentalPrimaryTeam}`);\n        } else {\n            GlobalActions.redirectUserToDefaultTeam();\n        }\n    }\n\n    handleLoginIdChange = (e) => {\n        this.setState({\n            loginId: e.target.value,\n        });\n    }\n\n    handlePasswordChange = (e) => {\n        this.setState({\n            password: e.target.value,\n        });\n    }\n\n    handleBrandImageError = () => {\n        this.setState({brandImageError: true});\n    }\n\n    createCustomLogin = () => {\n        if (this.props.enableCustomBrand) {\n            const text = this.props.customBrandText || '';\n            const brandImageUrl = Client4.getBrandImageUrl(0);\n            const brandImageStyle = this.state.brandImageError ? {display: 'none'} : {};\n\n            return (\n                <div>\n                    <img\n                        alt={'brand image'}\n                        src={brandImageUrl}\n                        onError={this.handleBrandImageError}\n                        style={brandImageStyle}\n                    />\n                    <div>\n                        <Markdown\n                            message={text}\n                            options={\n                                {mentions: false,\n                                    imagesMetadata: null}\n                            }\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginPlaceholder = () => {\n        const ldapEnabled = this.state.ldapEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        const loginPlaceholders = [];\n        if (emailSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.email', 'Email'));\n        }\n\n        if (usernameSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.username', 'Username'));\n        }\n\n        if (ldapEnabled) {\n            if (this.props.ldapLoginFieldName) {\n                loginPlaceholders.push(this.props.ldapLoginFieldName);\n            } else {\n                loginPlaceholders.push(Utils.localizeMessage('login.ldapUsername', 'AD/LDAP Username'));\n            }\n        }\n\n        if (loginPlaceholders.length >= 2) {\n            return loginPlaceholders.slice(0, loginPlaceholders.length - 1).join(', ') +\n                Utils.localizeMessage('login.placeholderOr', ' or ') +\n                loginPlaceholders[loginPlaceholders.length - 1];\n        } else if (loginPlaceholders.length === 1) {\n            return loginPlaceholders[0];\n        }\n\n        return '';\n    }\n\n    checkSignUpEnabled = () => {\n        return this.props.enableSignUpWithEmail ||\n            this.props.enableSignUpWithGitLab ||\n            this.props.enableSignUpWithOffice365 ||\n            this.props.enableSignUpWithGoogle ||\n            this.props.enableSignUpWithOpenId ||\n            this.props.enableLdap ||\n            this.props.enableSaml;\n    }\n\n    onDismissSessionExpired = () => {\n        LocalStorageStore.setWasLoggedIn(false);\n        this.setState({sessionExpired: false});\n    }\n\n    createExtraText = () => {\n        const extraParam = (new URLSearchParams(this.props.location.search)).get('extra');\n\n        if (this.state.sessionExpired) {\n            return (\n                <div className='alert alert-warning'>\n                    <WarningIcon/>\n                    {' '}\n                    <FormattedMessage\n                        id='login.session_expired'\n                        defaultMessage='Your session has expired. Please log in again.'\n                    />\n                    {' '}\n                    <Link\n                        className='btn-close'\n                        to='/login'\n                        onClick={this.onDismissSessionExpired}\n                    >\n                        <span>\n                            {'×'}\n                        </span>\n                    </Link>\n                </div>\n            );\n        }\n\n        if (extraParam === Constants.GET_TERMS_ERROR) {\n            return (\n                <div className='alert has-error no-padding'>\n                    <label className='control-label'>\n                        <FormattedMessage\n                            id='login.get_terms_error'\n                            defaultMessage='Unable to load terms of service. If this issue persists, contact your System Administrator.'\n                        />\n                    </label>\n                </div>\n            );\n        } else if (extraParam === Constants.TERMS_REJECTED) {\n            return (\n                <div className='alert alert-warning'>\n                    <WarningIcon/>\n                    <FormattedMarkdownMessage\n                        id='login.terms_rejected'\n                        defaultMessage='You must agree to the terms of service before accessing {siteName}. Please contact your System Administrator for more details.'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_CHANGE) {\n            return (\n                <div className='alert alert-success'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.changed'\n                        defaultMessage=' Sign-in method changed successfully'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_VERIFIED) {\n            return (\n                <div className='alert alert-success'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.verified'\n                        defaultMessage=' Email Verified'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.PASSWORD_CHANGE) {\n            return (\n                <div\n                    id='passwordUpdatedSuccess'\n                    className='alert alert-success'\n                >\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.passwordChanged'\n                        defaultMessage=' Password updated successfully'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.CREATE_LDAP) {\n            return (\n                <div className='alert alert-grey'>\n                    <FormattedMessage\n                        id='login.ldapCreate'\n                        defaultMessage=' Enter your AD/LDAP username and password to create an account.'\n                    />\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginOptions = () => {\n        const loginControls = [];\n\n        const ldapEnabled = this.state.ldapEnabled;\n        const gitlabSigninEnabled = this.props.enableSignUpWithGitLab;\n        const googleSigninEnabled = this.props.enableSignUpWithGoogle;\n        const office365SigninEnabled = this.props.enableSignUpWithOffice365;\n        const openIdSigninEnabled = this.props.enableSignUpWithOpenId;\n        const samlSigninEnabled = this.state.samlEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        if (emailSigninEnabled || usernameSigninEnabled || ldapEnabled) {\n            let errorClass = '';\n            if (this.state.serverError) {\n                errorClass = ' has-error';\n            }\n\n            loginControls.push(\n                <form\n                    key='loginBoxes'\n                    onSubmit={this.preSubmit}\n                >\n                    <div className='signup__email-container'>\n                        <FormError\n                            error={this.state.serverError}\n                            margin={true}\n                        />\n                        <div className={'form-group' + errorClass}>\n                            <input\n                                id='loginId'\n                                className='form-control'\n                                ref={this.loginIdInput}\n                                name='loginId'\n                                value={this.state.loginId}\n                                onChange={this.handleLoginIdChange}\n                                placeholder={this.createLoginPlaceholder()}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                                autoFocus={true}\n                            />\n                        </div>\n                        <div className={'form-group' + errorClass}>\n                            <LocalizedInput\n                                id='loginPassword'\n                                type='password'\n                                className='form-control'\n                                ref={this.passwordInput}\n                                name='password'\n                                value={this.state.password}\n                                onChange={this.handlePasswordChange}\n                                placeholder={{id: t('login.password'), defaultMessage: 'Password'}}\n                                spellCheck='false'\n                            />\n                        </div>\n                        <div className='form-group'>\n                            <button\n                                id='loginButton'\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                <LoadingWrapper\n                                    id='login_button_signing'\n                                    loading={this.state.loading}\n                                    text={Utils.localizeMessage('login.signInLoading', 'Signing in...')}\n                                >\n                                    <FormattedMessage\n                                        id='login.signIn'\n                                        defaultMessage='Sign in'\n                                    />\n                                </LoadingWrapper>\n                            </button>\n                        </div>\n                    </div>\n                </form>,\n            );\n        }\n\n        if (this.props.enableOpenServer && this.checkSignUpEnabled()) {\n            loginControls.push(\n                <div\n                    className='form-group'\n                    key='signup'\n                >\n                    <span>\n                        <FormattedMessage\n                            id='login.noAccount'\n                            defaultMessage=\"Don't have an account? \"\n                        />\n                        <Link\n                            id='signup'\n                            to={'/signup_user_complete' + this.props.location.search}\n                            className='signup-team-login'\n                        >\n                            <FormattedMessage\n                                id='login.create'\n                                defaultMessage='Create one now'\n                            />\n                        </Link>\n                    </span>\n                </div>,\n            );\n        }\n\n        if (usernameSigninEnabled || emailSigninEnabled) {\n            loginControls.push(\n                <div\n                    id='login_forgot'\n                    key='forgotPassword'\n                    className='form-group'\n                >\n                    <Link to={'/reset_password'}>\n                        <FormattedMessage\n                            id='login.forgot'\n                            defaultMessage='I forgot my password.'\n                        />\n                    </Link>\n                </div>,\n            );\n        }\n\n        if ((emailSigninEnabled || usernameSigninEnabled || ldapEnabled) && (gitlabSigninEnabled || googleSigninEnabled || samlSigninEnabled || office365SigninEnabled || openIdSigninEnabled)) {\n            loginControls.push(\n                <div\n                    key='divider'\n                    className='or__container'\n                >\n                    <FormattedMessage\n                        id='login.or'\n                        defaultMessage='or'\n                    />\n                </div>,\n            );\n\n            loginControls.push(\n                <h5 key='oauthHeader'>\n                    <FormattedMessage\n                        id='login.signInWith'\n                        defaultMessage='Sign in with:'\n                    />\n                </h5>,\n            );\n        }\n\n        if (gitlabSigninEnabled) {\n            loginControls.push(\n                <a\n                    id='GitLabButton'\n                    className='btn btn-custom-login gitlab'\n                    key='gitlab'\n                    href={Client4.getOAuthRoute() + '/gitlab/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.gitlab'\n                                defaultMessage='GitLab'\n                            />\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (googleSigninEnabled) {\n            loginControls.push(\n                <a\n                    id='GoogleButton'\n                    className='btn btn-custom-login google'\n                    key='google'\n                    href={Client4.getOAuthRoute() + '/google/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.google'\n                                defaultMessage='Google Apps'\n                            />\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (office365SigninEnabled) {\n            loginControls.push(\n                <a\n                    id='Office365Button'\n                    className='btn btn-custom-login office365'\n                    key='office365'\n                    href={Client4.getOAuthRoute() + '/office365/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.office365'\n                                defaultMessage='Office 365'\n                            />\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (openIdSigninEnabled) {\n            const buttonStyle = {};\n            if (this.props.openidButtonColor) {\n                buttonStyle.backgroundColor = this.props.openidButtonColor;\n            }\n            let buttonText = (\n                <FormattedMessage\n                    id='login.openid'\n                    defaultMessage='Open ID'\n                />\n            );\n            if (this.props.openidButtonText) {\n                buttonText = this.props.openidButtonText;\n            }\n            loginControls.push(\n                <a\n                    id='OpenIdButton'\n                    className='btn btn-custom-login openid'\n                    style={buttonStyle}\n                    key='openid'\n                    href={Client4.getOAuthRoute() + '/openid/login' + this.props.location.search}\n                >\n                    <span>\n                        <span>\n                            {buttonText}\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (samlSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login saml'\n                    key='saml'\n                    href={Client4.getUrl() + '/login/sso/saml' + this.props.location.search}\n                >\n                    <span>\n                        <span\n                            className='icon fa fa-lock fa--margin-top'\n                            title='Saml icon'\n                        />\n                        <span>\n                            {this.props.samlLoginButtonText}\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (loginControls.length === 0) {\n            loginControls.push(\n                <FormError\n                    key='noMethods'\n                    error={\n                        <FormattedMessage\n                            id='login.noMethods'\n                            defaultMessage='No sign-in methods are enabled. Please contact your System Administrator.'\n                        />\n                    }\n                    margin={true}\n                />,\n            );\n        }\n\n        return (\n            <div>\n                {this.createExtraText()}\n                {loginControls}\n            </div>\n        );\n    }\n\n    hideMfa = () => {\n        this.setState({showMfa: false});\n    }\n\n    render() {\n        const {\n            customDescriptionText,\n            siteName,\n            initializing,\n        } = this.props;\n\n        if (initializing) {\n            return (<LoadingScreen/>);\n        }\n\n        let content;\n        let customContent;\n        let customClass;\n        let backButton;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.state.loginId}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n            backButton = (<BackButton onClick={this.hideMfa}/>);\n        } else {\n            content = this.createLoginOptions();\n            customContent = this.createCustomLogin();\n            if (customContent) {\n                customClass = 'branded';\n            }\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                {backButton}\n                <div\n                    id='login_section'\n                    className='col-sm-12'\n                >\n                    <div className={'signup-team__container ' + customClass}>\n                        <div className='signup__markdown'>\n                            {customContent}\n                        </div>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <SiteNameAndDescription\n                                customDescriptionText={customDescriptionText}\n                                siteName={siteName}\n                            />\n                            {content}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(LoginController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getTeamByName, getMyTeamMember} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {RequestStatus} from 'mattermost-redux/constants';\n\nimport {addUserToTeamFromInvite} from 'actions/team_actions';\n\nimport {login} from 'actions/views/login';\n\nimport LoginController from './login_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const license = getLicense(state);\n\n    const isLicensed = license.IsLicensed === 'true';\n\n    const customBrandText = config.CustomBrandText;\n    const customDescriptionText = config.CustomDescriptionText;\n    const enableCustomBrand = config.EnableCustomBrand === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableOpenServer = config.EnableOpenServer === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignInWithEmail = config.EnableSignInWithEmail === 'true';\n    const enableSignInWithUsername = config.EnableSignInWithUsername === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const enableSignUpWithOpenId = config.EnableSignUpWithOpenId === 'true';\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n    const samlLoginButtonText = config.SamlLoginButtonText;\n    const openidButtonText = config.OpenIdButtonText;\n    const openidButtonColor = config.OpenIdButtonColor;\n\n    const siteName = config.SiteName;\n    const initializing = state.requests.users.logout.status === RequestStatus.SUCCESS || !state.storage.initialized;\n\n    // Only set experimental team if user is on that team\n    let experimentalPrimaryTeam = config.ExperimentalPrimaryTeam;\n    if (experimentalPrimaryTeam) {\n        const team = getTeamByName(state, experimentalPrimaryTeam);\n        if (team) {\n            const member = getMyTeamMember(state, team.id);\n            if (!member || !member.team_id) {\n                experimentalPrimaryTeam = null;\n            }\n        } else {\n            experimentalPrimaryTeam = null;\n        }\n    }\n\n    return {\n        currentUser: getCurrentUser(state),\n        isLicensed,\n        customBrandText,\n        customDescriptionText,\n        enableCustomBrand,\n        enableLdap,\n        enableOpenServer,\n        enableSaml,\n        enableSignInWithEmail,\n        enableSignInWithUsername,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOffice365,\n        enableSignUpWithOpenId,\n        experimentalPrimaryTeam,\n        ldapLoginFieldName,\n        samlLoginButtonText,\n        openidButtonText,\n        openidButtonColor,\n        siteName,\n        initializing,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            login,\n            addUserToTeamFromInvite,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginController);\n"],"sourceRoot":""}