{"version":3,"sources":["webpack:///./components/common/back_button.tsx","webpack:///./images/logo.png","webpack:///./components/do_verify_email/do_verify_email.tsx","webpack:///./components/do_verify_email/index.ts"],"names":["BackButton","React","PureComponent","render","id","className","onClick","this","props","to","url","defaultMessage","title","toString","DoVerifyEmail","constructor","super","async","actions","verifyUserEmail","verify","URLSearchParams","location","search","get","handleSuccess","handleError","VerifyEmailErrors","FAILED_EMAIL_VERIFICATION","state","verifyStatus","serverError","componentDidMount","verifyEmail","handleRedirect","isLoggedIn","GlobalActions","link","email","encodeURIComponent","redirectTo","browserHistory","push","setState","clearErrors","logError","message","AnnouncementBarMessages","EMAIL_VERIFIED","type","AnnouncementBarTypes","SUCCESS","trackEvent","me","getMe","FAILED_USER_STATE_GET","alt","src","logoImage","siteName","connect","getConfig","SiteName","Boolean","getCurrentUserId","dispatch","bindActionCreators"],"mappings":"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","file":"19.8895858d6c7e994ddaab.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/',\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","export default __webpack_public_path__ + \"files/ab8aa80cba445eb0fb75e6611c292567.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ServerError} from 'mattermost-redux/types/errors';\n\nimport {ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport {browserHistory} from 'utils/browser_history';\nimport {AnnouncementBarTypes, AnnouncementBarMessages, VerifyEmailErrors} from 'utils/constants';\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button';\nimport LoadingScreen from 'components/loading_screen';\n\nimport * as GlobalActions from 'actions/global_actions';\n\ntype Props = {\n    location: {\n        search: string;\n    };\n    siteName?: string;\n    actions: {\n        verifyUserEmail: (token: string) => ActionFunc | ActionResult;\n        getMe: () => ActionFunc | ActionResult;\n        logError: (error: ServerError, displayable: boolean) => void;\n        clearErrors: () => void;\n    };\n    isLoggedIn: boolean;\n\n}\n\ntype State = {\n    verifyStatus: string;\n    serverError: JSX.Element | null;\n}\n\nexport default class DoVerifyEmail extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            verifyStatus: 'pending',\n            serverError: null,\n        };\n    }\n\n    public componentDidMount(): void {\n        this.verifyEmail();\n    }\n\n    handleRedirect() {\n        if (this.props.isLoggedIn) {\n            GlobalActions.redirectUserToDefaultTeam();\n        } else {\n            let link = '/login?extra=verified';\n            const email = (new URLSearchParams(this.props.location.search)).get('email');\n            if (email) {\n                link += '&email=' + encodeURIComponent(email);\n            }\n            const redirectTo = (new URLSearchParams(this.props.location.search)).get('redirect_to');\n            if (redirectTo) {\n                link += '&redirect_to=' + redirectTo;\n            }\n            browserHistory.push(link);\n        }\n    }\n\n    async handleSuccess() {\n        this.setState({verifyStatus: 'success'});\n        this.props.actions.clearErrors();\n        if (this.props.isLoggedIn) {\n            this.props.actions.logError({\n                message: AnnouncementBarMessages.EMAIL_VERIFIED,\n                type: AnnouncementBarTypes.SUCCESS,\n            } as any, true);\n            trackEvent('settings', 'verify_email');\n            const me = await this.props.actions.getMe();\n            if ('data' in me) {\n                this.handleRedirect();\n            } else if ('error' in me) {\n                this.handleError(VerifyEmailErrors.FAILED_USER_STATE_GET);\n            }\n        } else {\n            this.handleRedirect();\n        }\n    }\n\n    handleError(type: string) {\n        let serverError = null;\n        if (type === VerifyEmailErrors.FAILED_EMAIL_VERIFICATION) {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.invalid_invite'\n                    defaultMessage='The invite link was invalid. Please speak with your Administrator to receive an invitation.'\n                />\n            );\n        } else if (type === VerifyEmailErrors.FAILED_USER_STATE_GET) {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.failed_update_user_state'\n                    defaultMessage='Please clear your cache and try to log in.'\n                />\n            );\n        }\n        this.setState({\n            verifyStatus: 'failure',\n            serverError,\n        });\n    }\n\n    verifyEmail = async () => {\n        const {actions: {verifyUserEmail}} = this.props;\n        const verify = await verifyUserEmail((new URLSearchParams(this.props.location.search)).get('token') || '');\n\n        if ('data' in verify) {\n            this.handleSuccess();\n        } else if ('error' in verify) {\n            this.handleError(VerifyEmailErrors.FAILED_EMAIL_VERIFICATION);\n        }\n    }\n\n    render() {\n        if (this.state.verifyStatus !== 'failure') {\n            return (<LoadingScreen/>);\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className={'form-group has-error'}>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <h1>{this.props.siteName}</h1>\n                            <h4 className='color--light'>\n                                <FormattedMessage\n                                    id='web.root.signup_info'\n                                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                                />\n                            </h4>\n                            {serverError}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators, Dispatch} from 'redux';\nimport {connect} from 'react-redux';\nimport {verifyUserEmail, getMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\n\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {GlobalState} from '../../types/store';\n\nimport DoVerifyEmail from './do_verify_email';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n    return {\n        isLoggedIn: Boolean(getCurrentUserId(state)),\n        siteName,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            verifyUserEmail,\n            getMe,\n            logError,\n            clearErrors,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DoVerifyEmail);\n"],"sourceRoot":""}