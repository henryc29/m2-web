{"version":3,"sources":["webpack:///./actions/views/mfa.js","webpack:///./components/access_history_modal/access_history_modal.tsx","webpack:///./components/access_history_modal/index.ts","webpack:///./components/activity_log_modal/activity_log_modal.jsx","webpack:///./components/activity_log_modal/components/activity_log.jsx","webpack:///./components/activity_log_modal/components/more_info.tsx","webpack:///./components/activity_log_modal/index.js","webpack:///./components/setting_picture.jsx","webpack:///./components/suggestion/timezone_provider.jsx","webpack:///./components/user_settings/advanced/index.js","webpack:///./components/user_settings/advanced/join_leave_section/index.js","webpack:///./components/user_settings/advanced/join_leave_section/join_leave_section.jsx","webpack:///./components/user_settings/advanced/user_settings_advanced.jsx","webpack:///./components/user_settings/display/index.ts","webpack:///./components/user_settings/display/manage_languages/index.ts","webpack:///./components/user_settings/display/manage_languages/manage_languages.tsx","webpack:///./components/user_settings/display/manage_timezones/index.ts","webpack:///./components/user_settings/display/manage_timezones/manage_timezones.tsx","webpack:///./components/user_settings/display/user_settings_display.tsx","webpack:///./components/user_settings/display/user_settings_theme/color_chooser.tsx","webpack:///./components/user_settings/display/user_settings_theme/custom_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/index.js","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/index.js","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/premade_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/user_settings_theme.jsx","webpack:///./components/user_settings/general/index.ts","webpack:///./components/user_settings/general/user_settings_general.tsx","webpack:///./components/user_settings/index.ts","webpack:///./components/user_settings/notifications/desktop_notification_settings.jsx","webpack:///./components/user_settings/notifications/email_notification_setting/email_notification_setting.tsx","webpack:///./components/user_settings/notifications/email_notification_setting/index.ts","webpack:///./components/user_settings/notifications/index.js","webpack:///./components/user_settings/notifications/manage_auto_responder.jsx","webpack:///./components/user_settings/notifications/user_settings_notifications.jsx","webpack:///./components/user_settings/security/index.ts","webpack:///./components/user_settings/security/mfa_section/index.ts","webpack:///./components/user_settings/security/mfa_section/mfa_section.tsx","webpack:///./components/user_settings/security/user_access_token_section/index.ts","webpack:///./components/user_settings/security/user_access_token_section/user_access_token_section.tsx","webpack:///./components/user_settings/security/user_settings_security.tsx","webpack:///./components/user_settings/sidebar/index.ts","webpack:///./components/user_settings/sidebar/user_settings_sidebar.tsx","webpack:///./components/user_settings/user_settings.tsx","webpack:///./components/widgets/icons/fa_back_icon.jsx","webpack:///./node_modules/mattermost-redux/actions/timezone.js","webpack:///./node_modules/mattermost-redux/utils/notify_props.js"],"names":["activateMfa","code","dispatch","getState","currentUserId","getCurrentUserId","UserActions","deactivateMfa","generateMfaSecret","AccessHistoryModal","React","PureComponent","constructor","props","actions","getUserAudits","setState","show","state","componentDidMount","onShow","render","content","userAudits","length","onHide","mapStateToProps","getCurrentUserAudits","mapDispatchToProps","bindActionCreators","connect","ActivityLogModal","altId","e","preventDefault","modalContent","$","target","closest","addClass","setTimeout","removeClass","revokeSession","then","getSessions","sessions","loading","activityList","reduce","array","currentSession","index","type","push","id","locale","submitRevoke","PropTypes","string","isRequired","oneOfType","object","func","shape","ActivityLog","moreInfo","session","device_id","includes","deviceTypeId","deviceTypeMessage","devicePicture","deviceTitle","localizeMessage","t","General","PUSH_NOTIFY_APPLE_REACT_NATIVE","PUSH_NOTIFY_ANDROID_REACT_NATIVE","devicePlatform","lastAccessTime","Date","last_activity_at","platform","isMobileSession","sessionInfo","mobileSessionInfo","os","indexOf","browser","date","getMonthLong","time","handleMoreInfo","number","MoreInfo","firstAccessTime","create_at","getUserSessions","getCurrentLocale","SettingPicture","Component","removeSrc","setDefaultSrc","updateSection","confirmButton","current","focus","loadingPicture","onRemove","onSetDefault","onSubmit","focusFirstElement","onFileChange","selectInput","value","click","file","previewBlob","URL","createObjectURL","reader","FileReader","onload","orientation","FileUtils","result","orientationStyles","image","readAsArrayBuffer","imageContext","imageStyles","backgroundImage","defaultImageSrc","src","imageElement","title","handler","handleRemoveSrc","handleSetDefaultSrc","Constants","OVERLAY_TIME_DELAY","settingList","createRef","addEventListener","handleFileSelected","componentDidUpdate","prevProps","setPicture","componentWillUnmount","revokeObjectURL","removeEventListener","img","renderImg","confirmButtonClass","disableSaveButtonFocus","submitActive","imgRender","buttonRender","handleFileChange","handleInputFile","handleSave","helpText","clientError","serverError","handleCancel","bool","maxFileSize","TimezoneSuggestion","Suggestion","item","isSelection","timezone","className","handleClick","node","baseProps","TimezoneProvider","Provider","handlePretextChanged","timezonePrefix","resultsCallback","displayAllTimezones","filterTimezones","matchedPretext","terms","getSupportedTimezones","items","component","filteredTimezones","filter","getTimezoneRegion","toLowerCase","makeMapStateToProps","getAdvancedSettingsCategory","makeGetCategory","config","getConfig","enablePreviewFeatures","EnablePreviewFeatures","enableUserDeactivation","EnableUserDeactivation","advancedSettingsCategory","Preferences","CATEGORY_ADVANCED_SETTINGS","sendOnCtrlEnter","get","codeBlockOnCtrlEnter","formatting","joinLeave","currentUser","getCurrentUser","savePreferences","updateUserActive","revokeAllSessionsForUser","AdvancedSettingsDisplay","getPreference","ADVANCED_FILTER_JOIN_LEAVE","JoinLeaveSection","currentTarget","joinLeaveState","section","onUpdateSection","joinLeavePreference","category","user_id","name","activeSection","AdvancedSections","JOIN_LEAVE","handleOnChange","handleSubmit","isSaving","handleUpdateSection","renderOnOffLabel","PreReleaseFeatures","PRE_RELEASE_FEATURES","advancedSettings","settings","send_on_ctrl_enter","code_block_ctrl_enter","join_leave","preReleaseFeaturesKeys","Object","keys","enabledFeatures","as","key","feature","FeatureTogglePrefix","label","previewFeaturesEnabled","showDeactivateAccountModal","preReleaseFeatures","setting","checked","String","forEach","lastIndexOf","features","preferences","userId","Array","isArray","error","message","data","emitUserLoggedOutEvent","getStateFromProps","description","default","defaultMessage","mac","Utils","ctrlSendTitle","ctrlSendDesc","updateSetting","bind","enabled","renderCtrlEnterLabel","ctrlEnter","codeBlockCtrlEnter","renderFeatureLabel","ctrlSendSection","getCtrlSendText","ctrlSendActive","inputs","formattingSection","renderFormattingSection","formattingSectionDivider","previewFeaturesSection","previewFeaturesSectionDivider","toggleFeature","saveEnabledFeatures","count","deactivateAccountSection","makeConfirmationModal","auth_service","handleShowDeactivateAccountModal","deactivateMemberButton","handleDeactivateAccountSubmit","handleHideDeactivateAccountModal","closeModal","collapseModal","timezones","getTimezones","userTimezone","getUserTimezone","automaticTimezoneNotSet","useAutomaticTimezone","automaticTimezone","shouldAutoUpdateTimezone","allowCustomThemes","AllowCustomThemes","enableLinkPreviews","EnableLinkPreviews","defaultClientLocale","DefaultClientLocale","enableThemeSelection","EnableThemeSelection","enableTimezone","ExperimentalTimezone","lockTeammateNameDisplay","getLicense","LockTeammateNameDisplay","configTeammateNameDisplay","TeammateNameDisplay","currentUserTimezone","getUserCurrentTimezone","militaryTime","CATEGORY_DISPLAY_SETTINGS","USE_MILITARY_TIME","USE_MILITARY_TIME_DEFAULT","teammateNameDisplay","NAME_NAME_FORMAT","channelDisplayMode","CHANNEL_DISPLAY_MODE","CHANNEL_DISPLAY_MODE_DEFAULT","messageDisplay","MESSAGE_DISPLAY","MESSAGE_DISPLAY_DEFAULT","collapseDisplay","COLLAPSE_DISPLAY","COLLAPSE_DISPLAY_DEFAULT","linkPreviewDisplay","LINK_PREVIEW_DISPLAY","LINK_PREVIEW_DISPLAY_DEFAULT","autoUpdateTimezone","UserSettingsDisplay","updateMe","ManageLanguages","ManageLanguage","modalBody","document","querySelector","isKeyPressed","KeyCodes","ESCAPE","openMenu","classList","remove","stopPropagation","ENTER","add","selectedOption","user","submitUser","res","Error","locales","I18n","userLocale","reactSelectContainer","handleContainerKeyDown","options","languages","map","l","order","sort","a","b","lang","reactStyles","menuPortal","provided","zIndex","input","body","setLanguage","handleKeyDown","handleMenuClose","handleMenuOpen","changeLanguage","ManageTimezones","manualTimezoneInput","selected","manualTimezone","oldUseAutomaticTimezone","oldAutomaticTimezone","oldManualTimezone","timezoneNotChanged","toString","updatedUser","getBrowserTimezone","timezoneRegion","noTimezonesFromServer","automaticTimezoneInput","handleAutomaticTimezone","providers","onChange","handleTimezoneSelected","SuggestionList","changeTimezone","getDisplayStateFromProps","timePreference","teammateNameDisplayPreference","channelDisplayModePreference","messageDisplayPreference","collapseDisplayPreference","linkPreviewDisplayPreference","updateState","newState","prevSections","theme","clock","linkpreview","message_display","channel_display_mode","handleChannelDisplayModeRadio","handlemessageDisplayRadio","handleCollapseRadio","handleLinkPreviewRadio","display","createSection","firstOption","secondOption","thirdOption","disabled","extraInfo","submit","firstMessage","radionButtonText","moreColon","firstMessageMore","moreId","moreMessage","secondMessage","secondMessageMore","thirdMessage","messageTitle","messageDesc","format","firstDisplay","secondDisplay","thirdSection","thirdDisplay","describe","collapseSection","defaultDisplay","linkPreviewSection","clockSection","teammateNameDisplaySection","TEAMMATE_NAME_DISPLAY","SHOW_USERNAME","SHOW_NICKNAME_FULLNAME","SHOW_FULLNAME","timezoneSelection","Boolean","messageDisplaySection","MESSAGE_DISPLAY_CLEAN","MESSAGE_DISPLAY_COMPACT","channelDisplayModeSection","CHANNEL_DISPLAY_MODE_FULL_SCREEN","CHANNEL_DISPLAY_MODE_CENTERED","languagesSection","themeSection","setRequireConfirm","setEnforceFocus","ColorChooser","handleChange","newColor","COPY_SUCCESS_INTERVAL","messages","defineMessages","sidebarBg","sidebarText","sidebarHeaderBg","sidebarHeaderTextColor","sidebarUnreadText","sidebarTextHoverBg","sidebarTextActiveBorder","sidebarTextActiveColor","onlineIndicator","awayIndicator","dndIndicator","mentionBg","mentionColor","centerChannelBg","centerChannelColor","newMessageSeparator","linkColor","buttonBg","buttonColor","errorTextColor","mentionHighlightBg","mentionHighlightLink","codeTheme","CustomThemeChooser","settingId","color","updateTheme","newTheme","mentionBj","copyTheme","setCopyTheme","text","window","clipboardData","getData","JSON","parse","err","setThemeDefaults","stringify","textarea","refs","setSelectionRange","sidebarStylesHeader","toggle","toggleSection","sidebarStyles","centerChannelStylesHeader","centerChannelStyles","linkAndButtonStylesHeader","linkAndButtonStyles","selectTheme","execCommand","showCopySuccess","copySuccess","style","assign","ontransitionend","contains","overflowY","sidebarElements","centerChannelElements","linkAndButtonElements","THEME_ELEMENTS","element","codeThemeOptions","codeThemeURL","themes","codeThemeIndex","iconURL","uiName","popoverContent","onCodeThemeChange","group","handleColorChange","pasteBox","pasteBoxChange","onChangeHandle","toggleSidebarStyles","toggleCenterChannelStyles","toggleLinkAndButtonStyles","getThemeCategory","currentTeamId","getCurrentTeamId","getTheme","applyToAllTeams","CATEGORY_THEME","showAllTeamsCheckbox","getMyTeamsCount","saveTheme","deleteTeamSpecificThemes","UserSettingsTheme","allowedThemes","AllowedThemes","split","PremadeThemeChooser","premadeThemes","hasAllowedThemes","trim","k","THEMES","hasOwnProperty","premadeTheme","activeClass","replace","propTypes","arrayOf","defaultProps","ThemeSetting","teamId","originalTheme","themeChanged","field","AppDispatcher","handleViewAction","ActionTypes","TOGGLE_IMPORT_THEME_MODAL","callback","ReactDOM","findDOMNode","resetFields","DEFAULT_CODE_THEME","updateType","displayCustom","custom","premade","themeUI","handleImportModal","allTeamsCheckbox","submitTheme","focused","requireEmailVerification","RequireEmailVerification","parseInt","MaxFileSize","ldapFirstNameAttributeSet","LdapFirstNameAttributeSet","ldapLastNameAttributeSet","LdapLastNameAttributeSet","samlFirstNameAttributeSet","SamlFirstNameAttributeSet","samlLastNameAttributeSet","SamlLastNameAttributeSet","ldapNicknameAttributeSet","LdapNicknameAttributeSet","samlNicknameAttributeSet","SamlNicknameAttributeSet","samlPositionAttributeSet","SamlPositionAttributeSet","ldapPositionAttributeSet","LdapPositionAttributeSet","ldapPictureAttributeSet","LdapPictureAttributeSet","logError","clearErrors","getMe","sendVerificationEmail","setDefaultProfileImage","uploadProfileImage","UserSettingsGeneralTab","holders","usernameReserved","usernameRestrictions","validEmail","emailMatch","incorrectPassword","emptyPassword","validImage","imageTooLarge","uploadImage","uploadImageMobile","fullName","nickname","username","profilePicture","close","position","email","resendStatus","showSpinner","handleEmailResend","formatMessage","intl","usernameError","errObj","ValidationErrors","RESERVED_NAME","min","MIN_USERNAME_LENGTH","max","MAX_USERNAME_LENGTH","trackEvent","firstName","lastName","first_name","last_name","confirmEmail","currentPassword","isEmail","emailError","password","emailUpdated","sectionIsSaving","verificationEnabled","AnnouncementBarMessages","EMAIL_VERIFICATION_REQUIRED","AnnouncementBarTypes","SUCCESS","server_error_id","pictureFile","AcceptedProfileImageTypes","size","setupInitialState","files","originalEmail","createEmailSection","emailSection","emailVerificationEnabled","updateEmail","MAX_EMAIL_LENGTH","updateConfirmEmail","updateCurrentPassword","submitEmail","GITLAB_SERVICE","GOOGLE_SERVICE","OFFICE365_SERVICE","OPENID_SERVICE","LDAP_SERVICE","SAML_SERVICE","nameSection","OAUTH_SERVICES","updateFirstName","MAX_FIRSTNAME_LENGTH","updateLastName","MAX_LASTNAME_LENGTH","notifClick","updateTab","notifLink","notify","submitName","nicknameSection","nicknameLabel","updateNickname","MAX_NICKNAME_LENGTH","submitNickname","usernameSection","usernameLabel","updateUsername","submitUsername","positionSection","positionLabel","updatePosition","MAX_POSITION_LENGTH","submitPosition","pictureSection","setDefault","imgSrc","submitPicture","last_picture_update","setDefaultProfilePicture","updatePicture","minMessage","injectIntl","UserSettings","DesktopNotificationSettings","cancel","getAttribute","setParentState","activityRadio","activity","NotificationLevels","MENTION","NONE","soundSection","notificationSelection","soundRadio","sound","sounds","from","isDesktopApp","desktop","semver","gte","version","setDesktopNotificationSound","dropdownSoundRef","ALL","saving","handleMaxUpdateSection","formattedMessageProps","hasSoundOption","handleMinUpdateSection","selectedSound","blurDropdown","blur","active","buildMaximizedSetting","buildMinimizedSetting","SECONDS_PER_MINUTE","EmailNotificationSetting","enableEmail","newInterval","emailInterval","emailIntervalPreference","CATEGORY_NOTIFICATIONS","EMAIL_INTERVAL","onCancel","sendEmailNotifications","INTERVAL_IMMEDIATE","INTERVAL_HOUR","INTERVAL_FIFTEEN_MINUTES","batchingOptions","batchingInfo","enableEmailBatching","INTERVAL_NEVER","getEmailInterval","getDerivedStateFromProps","nextProps","prevState","renderMinSettingView","renderMaxSettingView","INTERVAL_NOT_SET","EnableEmailBatching","SendEmailNotifications","sendPushNotifications","SendPushNotifications","enableAutoResponder","ExperimentalEnableAutomaticReplies","UserSettingsNotifications","MESSAGE_MAX_LENGTH","ManageAutoResponder","autoResponderActive","autoResponderMessage","activeToggle","handleAutoResponderChecked","resize","onMessageChanged","getNotificationsStateFromProps","desktopNotificationSound","comments","pushActivity","pushStatus","UserStatuses","AWAY","notify_props","desktop_sound","desktop_notification_sound","push_status","auto_responder_active","auto_responder_message","usernameKey","customKeys","firstNameKey","channelKey","mention_keys","splice","join","channel","desktopActivity","desktopSound","customKeysChecked","notifyCommentsLevel","NotificationsTab","mentionKeys","stringKeys","val","customCheckRef","customMentionsRef","updateCustomMentionKeys","pushActivityRadio","pushStatusRadio","ONLINE","pushStatusSettings","handlePushStatusRadio","OFFLINE","handlePushRadio","drawerRef","wrapperRef","handleNotifyCommentsRadio","keysSection","handleUpdateFirstNameKey","updateFirstNameKey","handleUpdateUsernameKey","updateUsernameKey","handleUpdateChannelKey","updateChannelKey","onCustomChange","concat","i","substring","commentsSection","commentsActive","autoResponderSection","setStateValue","pushNotificationSection","createPushNotificationSection","handleEmailRadio","activeTab","ownProps","tokensEnabled","EnableUserAccessTokens","userHasTokenRole","UserUtils","roles","enableOAuthServiceProvider","EnableOAuthServiceProvider","enableSignUpWithEmail","EnableSignUpWithEmail","enableSignUpWithGitLab","EnableSignUpWithGitLab","enableSignUpWithGoogle","EnableSignUpWithGoogle","enableSignUpWithOpenId","EnableSignUpWithOpenId","enableLdap","EnableLdap","enableSaml","EnableSaml","enableSignUpWithOffice365","EnableSignUpWithOffice365","experimentalEnableAuthenticationTransfer","ExperimentalEnableAuthenticationTransfer","canUseAccessTokens","passwordConfig","getPasswordConfig","getBool","updateUserPassword","getAuthorizedOAuthApps","deauthorizeOAuthApp","SecurityTab","license","mfaLicensed","IsLicensed","MFA","mfaEnabled","EnableMultifactorAuthentication","mfaEnforced","EnforceMultifactorAuthentication","mfaActive","mfaAvailable","mfa_active","MfaSection","SECTION_MFA","browserHistory","buttonText","removeMfa","setupMfa","renderTitle","renderDescription","renderContent","renderHelpText","userAccessTokens","entities","users","myUserAccessTokens","getUserAccessTokensForUser","createUserAccessToken","revokeUserAccessToken","enableUserAccessToken","disableUserAccessToken","clearUserAccessTokens","UserAccessTokenSection","SECTION_TOKENS","TOKEN_CREATING","TOKEN_CREATED","TOKEN_NOT_CREATING","tokenCreationState","handleCancelConfirm","newtokendescriptionRef","tokenError","confirmCopyToken","newToken","confirmAction","showConfirmModal","confirmTitle","confirmMessage","token","confirmComplete","confirmHideCancel","handleCreateToken","confirmCreateToken","tokenId","revokeToken","tokenListClass","tokenList","values","activeLink","activeStatus","is_active","deactivateToken","activateToken","confirmRevokeToken","noTokenText","isMobile","newTokenSection","saveTokenKeyPress","stopCreatingToken","startCreatingToken","SECTION_PASSWORD","SECTION_SIGNIN","SECTION_APPS","authorizedApps","newPassword","confirmPassword","passwordError","valid","defaultState","getDefaultState","savingPassword","appId","app","submitPassword","updateNewPassword","updateConfirmPassword","d","last_password_update","emailOption","gitlabOption","googleOption","office365Option","openidOption","ldapOption","samlOption","encodeURIComponent","link","apps","homepage","deauthorizeApp","icon_url","icon50","wrapperClass","authService","loadAuthorizedOAuthApps","passwordSection","createPasswordSection","numMethods","signInSection","createSignInSection","oauthSection","createOAuthAppsSection","tokensSection","ariaLabel","closeUnusedDirectMessages","CATEGORY_SIDEBAR_SETTINGS","channelSwitcherOption","channelSidebarOrganizationOption","getNewSidebarPreference","sidebarPreference","getSidebarPreferences","unreadsAtTop","unreads_at_top","favoriteAtTop","favorite_at_top","showChannelOrganization","ExperimentalChannelOrganization","showChannelSidebarOrganization","ExperimentalChannelSidebarOrganization","showUnusedOption","CloseUnusedDirectMessages","UserSettingsSidebar","Settings","grouping","sorting","close_unused_direct_messages","channel_switcher_section","channel_sidebar_organization","ChannelGrouping","ChannelSorting","updatedSidebarSettings","trackSettingChangeIfNecessary","Grouping","Sorting","UnreadsAtTop","FavoriteAtTop","NewSidebar","sectionName","contents","renderAutoCloseDMLabel","sortingId","sortingDefaultMessage","atTopId","atTopDefaultMessage","helpChannelSidebarOrganizationText","renderChannelSwitcherLabel","ChannelSidebarOrganization","renderOrganizationLabel","channelSwitcherSectionDescId","channelSwitcherSectionDescDefault","isMac","helpChannelSwitcherText","ChannelSwitcherSection","channelSidebarOrganizationDisabled","channelOrganizationSection","renderChannelOrganizationSection","channelSidebarOrganizationSection","renderChannelSidebarOrganizationSection","autoCloseDMSection","renderAutoCloseDMSection","channelSwitcherSection","renderChannelSwitcherSection","BackIcon","useIntl"],"mappings":"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","file":"9.bd618c553beafafd42e8.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nexport function activateMfa(code) {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, true, code));\n    };\n}\n\nexport function deactivateMfa() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, false));\n    };\n}\n\nexport function generateMfaSecret() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.generateMfaSecret(currentUserId));\n    };\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport AuditTable from 'components/audit_table';\nimport LoadingScreen from 'components/loading_screen';\n\ntype Props = {\n    onHide: () => void;\n    actions: {\n        getUserAudits: (userId: string, page?: number, perPage?: number) => void;\n    };\n    userAudits: any[];\n    currentUserId: string;\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class AccessHistoryModal extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    public onShow = () => { // public for testing\n        this.props.actions.getUserAudits(this.props.currentUserId, 0, 200);\n    }\n\n    public onHide = () => { // public for testing\n        this.setState({show: false});\n    }\n\n    public componentDidMount() {\n        this.onShow();\n    }\n\n    public render() {\n        let content;\n        if (this.props.userAudits.length === 0) {\n            content = (<LoadingScreen/>);\n        } else {\n            content = (\n                <AuditTable\n                    audits={this.props.userAudits}\n                    showIp={true}\n                    showSession={true}\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='accessHistoryModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='accessHistoryModalLabel'\n                    >\n                        <FormattedMessage\n                            id='access_history.title'\n                            defaultMessage='Access History'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {getUserAudits} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserAudits as getCurrentUserAudits} from 'mattermost-redux/selectors/entities/users';\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport AccessHistoryModal from './access_history_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        userAudits: getCurrentUserAudits(state) || [],\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            getUserAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccessHistoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport ActivityLog from 'components/activity_log_modal/components/activity_log.jsx';\nimport LoadingScreen from 'components/loading_screen';\n\nexport default class ActivityLogModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The current user id\n         */\n        currentUserId: PropTypes.string.isRequired,\n\n        /**\n         * Current user's sessions\n         */\n        sessions: PropTypes.oneOfType([\n            PropTypes.array,\n            PropTypes.object,\n        ]).isRequired,\n\n        /**\n         * Current user's locale\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * Function that's called when user closes the modal\n         */\n        onHide: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n\n            /**\n             * Function to refresh sessions from server\n             */\n            getSessions: PropTypes.func.isRequired,\n\n            /**\n             * Function to revoke a particular session\n             */\n            revokeSession: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    submitRevoke = (altId, e) => {\n        e.preventDefault();\n        var modalContent = $(e.target).closest('.modal-content'); // eslint-disable-line jquery/no-closest\n        modalContent.addClass('animation--highlight');\n        setTimeout(() => {\n            modalContent.removeClass('animation--highlight');\n        }, 1500);\n        this.props.actions.revokeSession(this.props.currentUserId, altId).then(() => {\n            this.props.actions.getSessions(this.props.currentUserId);\n        });\n    }\n\n    onShow = () => {\n        this.props.actions.getSessions(this.props.currentUserId);\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    componentDidMount() {\n        this.onShow();\n    }\n\n    render() {\n        let content;\n        if (this.props.sessions.loading) {\n            content = <LoadingScreen/>;\n        } else {\n            const activityList = this.props.sessions.reduce((array, currentSession, index) => {\n                if (currentSession.props.type === 'UserAccessToken') {\n                    return array;\n                }\n\n                array.push(\n                    <ActivityLog\n                        key={currentSession.id}\n                        index={index}\n                        locale={this.props.locale}\n                        currentSession={currentSession}\n                        submitRevoke={this.submitRevoke}\n                    />,\n                );\n                return array;\n            }, []);\n\n            content = <form role='form'>{activityList}</form>;\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='activityLogModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='activityLogModalLabel'\n                    >\n                        <FormattedMessage\n                            id='activity_log.activeSessions'\n                            defaultMessage='Active Sessions'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p className='session-help-text'>\n                        <FormattedMessage\n                            id='activity_log.sessionsDescription'\n                            defaultMessage=\"Sessions are created when you log in through a new browser on a device. Sessions let you use Mattermost without having to log in again for a time period specified by the system administrator. To end the session sooner, use the 'Log Out' button.\"\n                        />\n                    </p>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {General} from 'mattermost-redux/constants';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {getMonthLong, t} from 'utils/i18n';\n\nimport MoreInfo from './more_info';\n\nexport default class ActivityLog extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The index of this instance within the list\n         */\n        index: PropTypes.number.isRequired,\n\n        /**\n         * The current locale of the user\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * The session that's to be displayed\n         */\n        currentSession: PropTypes.object.isRequired,\n\n        /**\n         * Function to revoke session\n         */\n        submitRevoke: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            moreInfo: false,\n        };\n    }\n\n    handleMoreInfo = () => {\n        this.setState({moreInfo: true});\n    }\n\n    submitRevoke = (e) => {\n        this.props.submitRevoke(this.props.currentSession.id, e);\n    }\n\n    isMobileSession = (session) => {\n        return session.device_id && (session.device_id.includes('apple') || session.device_id.includes('android'));\n    };\n\n    mobileSessionInfo = (session) => {\n        let deviceTypeId;\n        let deviceTypeMessage;\n        let devicePicture;\n        let deviceTitle;\n\n        if (session.device_id.includes('apple')) {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n            deviceTypeId = t('activity_log_modal.iphoneNativeClassicApp');\n            deviceTypeMessage = 'iPhone Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_APPLE_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.iphoneNativeApp');\n                deviceTypeMessage = 'iPhone Native App';\n            }\n        } else if (session.device_id.includes('android')) {\n            devicePicture = 'fa fa-android';\n            deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            deviceTypeId = t('activity_log_modal.androidNativeClassicApp');\n            deviceTypeMessage = 'Android Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_ANDROID_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.androidNativeApp');\n                deviceTypeMessage = 'Android Native App';\n            }\n        }\n\n        return {\n            devicePicture,\n            deviceTitle,\n            devicePlatform: (\n                <FormattedMessage\n                    id={deviceTypeId}\n                    defaultMessage={deviceTypeMessage}\n                />\n            ),\n        };\n    };\n\n    render() {\n        const {\n            index,\n            locale,\n            currentSession,\n        } = this.props;\n\n        const lastAccessTime = new Date(currentSession.last_activity_at);\n        let devicePlatform = currentSession.props.platform;\n        let devicePicture = '';\n        let deviceTitle = '';\n\n        if (currentSession.props.platform === 'Windows') {\n            devicePicture = 'fa fa-windows';\n            deviceTitle = localizeMessage('device_icons.windows', 'Windows Icon');\n        } else if (this.isMobileSession(currentSession)) {\n            const sessionInfo = this.mobileSessionInfo(currentSession);\n            devicePicture = sessionInfo.devicePicture;\n            devicePlatform = sessionInfo.devicePlatform;\n        } else if (currentSession.props.platform === 'Macintosh' ||\n            currentSession.props.platform === 'iPhone') {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n        } else if (currentSession.props.platform === 'Linux') {\n            if (currentSession.props.os.indexOf('Android') >= 0) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.android'\n                        defaultMessage='Android'\n                    />\n                );\n                devicePicture = 'fa fa-android';\n                deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            } else {\n                devicePicture = 'fa fa-linux';\n                deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n            }\n        } else if (currentSession.props.os.indexOf('Linux') !== -1) {\n            devicePicture = 'fa fa-linux';\n            deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n        }\n\n        if (currentSession.props.browser.indexOf('Desktop App') !== -1) {\n            devicePlatform = (\n                <FormattedMessage\n                    id='activity_log_modal.desktop'\n                    defaultMessage='Native Desktop App'\n                />\n            );\n        }\n\n        return (\n            <div\n                key={'activityLogEntryKey' + index}\n                className='activity-log__table'\n            >\n                <div className='activity-log__report'>\n                    <div className='report__platform'>\n                        <i\n                            className={devicePicture}\n                            title={deviceTitle}\n                        />{devicePlatform}\n                    </div>\n                    <div className='report__info'>\n                        <div>\n                            <FormattedMessage\n                                id='activity_log.lastActivity'\n                                defaultMessage='Last activity: {date}, {time}'\n                                values={{\n                                    date: (\n                                        <FormattedDate\n                                            value={lastAccessTime}\n                                            day='2-digit'\n                                            month={getMonthLong(locale)}\n                                            year='numeric'\n                                        />\n                                    ),\n                                    time: (\n                                        <FormattedTime\n                                            value={lastAccessTime}\n                                            hour='2-digit'\n                                            minute='2-digit'\n                                        />\n                                    ),\n                                }}\n                            />\n                        </div>\n                        <MoreInfo\n                            locale={locale}\n                            currentSession={currentSession}\n                            moreInfo={this.state.moreInfo}\n                            handleMoreInfo={this.handleMoreInfo}\n                        />\n                    </div>\n                </div>\n                <div className='activity-log__action'>\n                    <button\n                        onClick={this.submitRevoke}\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='activity_log.logout'\n                            defaultMessage='Log Out'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\n\nimport {getMonthLong} from 'utils/i18n';\n\ntype Props = {\n    locale: string;\n    currentSession: {\n        props: {\n            os: string;\n            platform: string;\n            browser: string;\n        };\n        create_at: number;\n        last_activity_at: number;\n        id: string;\n    };\n    handleMoreInfo: () => void;\n    moreInfo: boolean;\n};\n\nexport default function MoreInfo(props: Props) {\n    const {locale, currentSession, handleMoreInfo, moreInfo} = props;\n\n    if (moreInfo) {\n        const firstAccessTime = new Date(currentSession.create_at);\n\n        return (\n            <div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.firstTime'\n                        defaultMessage='First time active: {date}, {time}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={firstAccessTime}\n                                    day='2-digit'\n                                    month={getMonthLong(locale)}\n                                    year='numeric'\n                                />\n                            ),\n                            time: (\n                                <FormattedTime\n                                    value={firstAccessTime}\n                                    hour='2-digit'\n                                    minute='2-digit'\n                                />\n                            ),\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.os'\n                        defaultMessage='OS: {os}'\n                        values={{\n                            os: currentSession.props.os,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.browser'\n                        defaultMessage='Browser: {browser}'\n                        values={{\n                            browser: currentSession.props.browser,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.sessionId'\n                        defaultMessage='Session ID: {id}'\n                        values={{\n                            id: currentSession.id,\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <a\n            className='theme'\n            href='#'\n            onClick={handleMoreInfo}\n        >\n            <FormattedMessage\n                id='activity_log.moreInfo'\n                defaultMessage='More info'\n            />\n        </a>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getSessions, revokeSession} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserSessions} from 'mattermost-redux/selectors/entities/users';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport ActivityLogModal from './activity_log_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        sessions: getUserSessions(state),\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSessions,\n            revokeSession,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivityLogModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Tooltip} from 'react-bootstrap';\n\nimport {Constants} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport * as FileUtils from 'utils/file_utils.jsx';\n\nimport FormError from 'components/form_error';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nexport default class SettingPicture extends Component {\n    static defaultProps = {\n        imageContext: 'profile',\n    };\n    static propTypes = {\n        clientError: PropTypes.string,\n        serverError: PropTypes.string,\n        src: PropTypes.string,\n        defaultImageSrc: PropTypes.string,\n        file: PropTypes.object,\n        loadingPicture: PropTypes.bool,\n        submitActive: PropTypes.bool,\n        onRemove: PropTypes.func,\n        onSetDefault: PropTypes.func,\n        onSubmit: PropTypes.func,\n        title: PropTypes.string,\n        onFileChange: PropTypes.func,\n        updateSection: PropTypes.func,\n        imageContext: PropTypes.string,\n        maxFileSize: PropTypes.number,\n        helpText: PropTypes.object,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.settingList = React.createRef();\n        this.selectInput = React.createRef();\n        this.confirmButton = React.createRef();\n\n        this.state = {\n            image: null,\n            removeSrc: false,\n            setDefaultSrc: false,\n        };\n    }\n\n    focusFirstElement() {\n        if (this.settingList.current) {\n            this.settingList.current.focus();\n        }\n    }\n\n    componentDidMount() {\n        this.focusFirstElement();\n\n        if (this.selectInput.current) {\n            this.selectInput.current.addEventListener('input', this.handleFileSelected);\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.file !== this.props.file) {\n            this.setPicture(this.props.file);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.previewBlob) {\n            URL.revokeObjectURL(this.previewBlob);\n        }\n\n        if (this.selectInput.current) {\n            this.selectInput.current.removeEventListener('input', this.handleFileSelected);\n        }\n    }\n\n    handleCancel = (e) => {\n        this.setState({removeSrc: false, setDefaultSrc: false});\n        this.props.updateSection(e);\n    }\n\n    handleFileSelected = () => {\n        if (this.confirmButton.current) {\n            this.confirmButton.current.focus();\n        }\n    }\n\n    handleSave = (e) => {\n        e.preventDefault();\n        if (this.props.loadingPicture) {\n            return;\n        }\n        if (this.state.removeSrc) {\n            this.props.onRemove();\n        } else if (this.state.setDefaultSrc) {\n            this.props.onSetDefault();\n        } else {\n            this.props.onSubmit();\n        }\n    }\n\n    handleRemoveSrc = (e) => {\n        e.preventDefault();\n        this.setState({removeSrc: true});\n        this.focusFirstElement();\n    }\n\n    handleSetDefaultSrc = (e) => {\n        e.preventDefault();\n        this.setState({setDefaultSrc: true});\n        this.focusFirstElement();\n    }\n\n    handleFileChange = (e) => {\n        this.setState({removeSrc: false, setDefaultSrc: false});\n        this.props.onFileChange(e);\n    }\n\n    handleInputFile = () => {\n        this.selectInput.current.value = '';\n        this.selectInput.current.click();\n    }\n\n    setPicture = (file) => {\n        if (file) {\n            this.previewBlob = URL.createObjectURL(file);\n\n            var reader = new FileReader();\n            reader.onload = (e) => {\n                const orientation = FileUtils.getExifOrientation(e.target.result);\n                const orientationStyles = FileUtils.getOrientationStyles(orientation);\n\n                this.setState({\n                    image: this.previewBlob,\n                    orientationStyles,\n                });\n            };\n            reader.readAsArrayBuffer(file);\n        }\n    }\n\n    renderImg = () => {\n        const imageContext = this.props.imageContext;\n\n        if (this.props.file) {\n            const imageStyles = {\n                backgroundImage: 'url(' + this.state.image + ')',\n                ...this.state.orientationStyles,\n            };\n\n            return (\n                <div className={`${imageContext}-img-preview`}>\n                    <div className='img-preview__image'>\n                        <div\n                            alt={`${imageContext} image preview`}\n                            style={imageStyles}\n                            className={`${imageContext}-img-preview`}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        if (this.state.setDefaultSrc) {\n            return (\n                <img\n                    className={`${imageContext}-img`}\n                    alt={`${imageContext} image`}\n                    src={this.props.defaultImageSrc}\n                />\n            );\n        }\n\n        if (this.props.src && !this.state.removeSrc) {\n            const imageElement = (\n                <img\n                    className={`${imageContext}-img`}\n                    alt={`${imageContext} image`}\n                    src={this.props.src}\n                />\n            );\n            if (!this.props.onRemove && !this.props.onSetDefault) {\n                return imageElement;\n            }\n\n            let title;\n            let handler;\n            if (this.props.onRemove) {\n                title = (\n                    <FormattedMessage\n                        id='setting_picture.remove'\n                        defaultMessage='Remove This Icon'\n                    />\n                );\n                handler = this.handleRemoveSrc;\n            } else if (this.props.onSetDefault) {\n                title = (\n                    <FormattedMessage\n                        id='setting_picture.remove_profile_picture'\n                        defaultMessage='Remove Profile Picture'\n                    />\n                );\n                handler = this.handleSetDefaultSrc;\n            }\n\n            return (\n                <div className={`${imageContext}-img__container`}>\n                    <div\n                        className='img-preview__image'\n                        aria-hidden={true}\n                    >\n                        {imageElement}\n                    </div>\n                    <OverlayTrigger\n                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                        placement='right'\n                        overlay={(\n                            <Tooltip id='removeIcon'>\n                                <div aria-hidden={true}>\n                                    {title}\n                                </div>\n                            </Tooltip>\n                        )}\n                    >\n                        <button\n                            data-testid='removeSettingPicture'\n                            className={`${imageContext}-img__remove`}\n                            onClick={handler}\n                        >\n                            <span aria-hidden={true}>{'×'}</span>\n                            <span className='sr-only'>{title}</span>\n                        </button>\n                    </OverlayTrigger>\n                </div>\n            );\n        }\n        return null;\n    }\n\n    render() {\n        const img = this.renderImg();\n\n        let confirmButtonClass = 'btn btn-sm';\n        let disableSaveButtonFocus = false;\n        if (this.props.submitActive || this.state.removeSrc || this.state.setDefaultSrc) {\n            confirmButtonClass += ' btn-primary';\n        } else {\n            confirmButtonClass += ' btn-inactive disabled';\n            disableSaveButtonFocus = true;\n        }\n\n        let imgRender;\n        if (img) {\n            imgRender = (\n                <li\n                    className='setting-list-item'\n                    role='presentation'\n                >\n                    {img}\n                </li>\n            );\n        }\n\n        let buttonRender;\n        if (this.props.onSubmit) {\n            buttonRender = (\n                <span>\n                    <input\n                        data-testid='uploadPicture'\n                        ref={this.selectInput}\n                        className='hidden'\n                        accept='.jpg,.png,.bmp'\n                        type='file'\n                        onChange={this.handleFileChange}\n                        disabled={this.props.loadingPicture}\n                        aria-hidden={true}\n                        tabIndex='-1'\n                    />\n                    <button\n                        data-testid='inputSettingPictureButton'\n                        className='btn btn-sm btn-primary btn-file sel-btn'\n                        disabled={this.props.loadingPicture}\n                        onClick={this.handleInputFile}\n                        aria-label={localizeMessage('setting_picture.select', 'Select')}\n                    >\n                        <FormattedMessage\n                            id='setting_picture.select'\n                            defaultMessage='Select'\n                        />\n                    </button>\n                    <button\n                        tabIndex={disableSaveButtonFocus ? '-1' : '0'}\n                        data-testid='saveSettingPicture'\n                        disabled={disableSaveButtonFocus}\n                        ref={this.confirmButton}\n                        className={confirmButtonClass}\n                        onClick={this.handleSave}\n                        aria-label={this.props.loadingPicture ? localizeMessage('setting_picture.uploading', 'Uploading...') : localizeMessage('setting_picture.save', 'Save')}\n                    >\n                        <LoadingWrapper\n                            loading={this.props.loadingPicture}\n                            text={localizeMessage('setting_picture.uploading', 'Uploading...')}\n                        >\n                            <FormattedMessage\n                                id='setting_picture.save'\n                                defaultMessage='Save'\n                            />\n                        </LoadingWrapper>\n                    </button>\n                </span>\n            );\n        }\n        return (\n            <section className='section-max form-horizontal'>\n                <h4 className='col-xs-12 section-title'>\n                    {this.props.title}\n                </h4>\n                <div className='col-xs-offset-3 col-xs-8'>\n                    <div\n                        className='setting-list'\n                        ref={this.settingList}\n                        tabIndex='-1'\n                        aria-label={this.props.title}\n                        aria-describedby='setting-picture__helptext'\n                    >\n                        {imgRender}\n                        <div\n                            id='setting-picture__helptext'\n                            className='setting-list-item pt-3'\n                        >\n                            {this.props.helpText}\n                        </div>\n                        <div\n                            className='setting-list-item'\n                        >\n                            <hr/>\n                            <FormError\n                                errors={[this.props.clientError, this.props.serverError]}\n                                type={'modal'}\n                            />\n                            {buttonRender}\n                            <button\n                                data-testid='cancelSettingPicture'\n                                className='btn btn-link btn-sm theme'\n                                href='#'\n                                onClick={this.handleCancel}\n                                aria-label={localizeMessage('setting_picture.cancel', 'Cancel')}\n                            >\n                                <FormattedMessage\n                                    id='setting_picture.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\n\nimport {getSupportedTimezones} from 'utils/timezone';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass TimezoneSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n        const timezone = item;\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                onClick={this.handleClick}\n                className={className}\n                ref={(node) => {\n                    this.node = node;\n                }}\n                {...Suggestion.baseProps}\n            >\n                {timezone}\n            </div>\n        );\n    }\n}\n\nexport default class TimezoneProvider extends Provider {\n    handlePretextChanged(timezonePrefix, resultsCallback) {\n        if (timezonePrefix.length === 0) {\n            this.displayAllTimezones(resultsCallback, timezonePrefix);\n            return true;\n        }\n\n        if (timezonePrefix) {\n            this.filterTimezones(resultsCallback, timezonePrefix);\n            return true;\n        }\n\n        return false;\n    }\n\n    async displayAllTimezones(resultsCallback) {\n        resultsCallback({\n            matchedPretext: '',\n            terms: getSupportedTimezones(),\n            items: getSupportedTimezones(),\n            component: TimezoneSuggestion,\n        });\n    }\n\n    async filterTimezones(resultsCallback, timezonePrefix) {\n        const filteredTimezones = getSupportedTimezones().filter((t) => (\n            getTimezoneRegion(t).toLowerCase().indexOf(timezonePrefix) >= 0 ||\n                t.toLowerCase().indexOf(timezonePrefix) >= 0\n        ));\n\n        resultsCallback({\n            matchedPretext: timezonePrefix,\n            terms: filteredTimezones,\n            items: filteredTimezones,\n            component: TimezoneSuggestion,\n        });\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {get, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {updateUserActive, revokeAllSessionsForUser} from 'mattermost-redux/actions/users';\n\nimport {Preferences} from 'utils/constants';\n\nimport AdvancedSettingsDisplay from './user_settings_advanced.jsx';\n\nfunction makeMapStateToProps() {\n    const getAdvancedSettingsCategory = makeGetCategory();\n\n    return (state) => {\n        const config = getConfig(state);\n\n        const enablePreviewFeatures = config.EnablePreviewFeatures === 'true';\n        const enableUserDeactivation = config.EnableUserDeactivation === 'true';\n\n        return {\n            advancedSettingsCategory: getAdvancedSettingsCategory(state, Preferences.CATEGORY_ADVANCED_SETTINGS),\n            sendOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter', 'false'),\n            codeBlockOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', 'true'),\n            formatting: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'formatting', 'true'),\n            joinLeave: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', 'true'),\n            currentUser: getCurrentUser(state),\n            enablePreviewFeatures,\n            enableUserDeactivation,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n            updateUserActive,\n            revokeAllSessionsForUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(AdvancedSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport JoinLeaveSection from './join_leave_section.jsx';\n\nfunction mapStateToProps(state) {\n    const joinLeave = getPreference(\n        state,\n        Preferences.CATEGORY_ADVANCED_SETTINGS,\n        Preferences.ADVANCED_FILTER_JOIN_LEAVE,\n        'true',\n    );\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        joinLeave,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JoinLeaveSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport {AdvancedSections} from 'utils/constants';\n\nexport default class JoinLeaveSection extends React.PureComponent {\n    static propTypes = {\n        activeSection: PropTypes.string,\n        currentUserId: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string,\n        onUpdateSection: PropTypes.func.isRequired,\n        renderOnOffLabel: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            joinLeaveState: props.joinLeave,\n        };\n    }\n\n    handleOnChange = (e) => {\n        const value = e.currentTarget.value;\n\n        this.setState({joinLeaveState: value});\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState({joinLeaveState: this.props.joinLeave});\n        }\n\n        this.props.onUpdateSection(section);\n    }\n\n    handleSubmit = () => {\n        const {actions, currentUserId, onUpdateSection} = this.props;\n        const joinLeavePreference = {category: Preferences.CATEGORY_ADVANCED_SETTINGS, user_id: currentUserId, name: Preferences.ADVANCED_FILTER_JOIN_LEAVE, value: this.state.joinLeaveState};\n        actions.savePreferences(currentUserId, [joinLeavePreference]);\n\n        onUpdateSection();\n    }\n\n    render() {\n        const {joinLeaveState} = this.state;\n        if (this.props.activeSection === AdvancedSections.JOIN_LEAVE) {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.joinLeaveTitle'\n                            defaultMessage='Enable Join/Leave Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='joinLeaveSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveTitle'\n                                    defaultMessage='Enable Join/Leave Messages'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOn'\n                                        type='radio'\n                                        value={'true'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'true'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOff'\n                                        type='radio'\n                                        value={'false'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'false'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveDesc'\n                                    defaultMessage='When \"On\", System Messages saying a user has joined or left a channel will be visible. When \"Off\", the System Messages about joining or leaving a channel will be hidden. A message will still show up when you are added to a channel, so you can receive a notification.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={AdvancedSections.JOIN_LEAVE}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.joinLeaveTitle'\n                        defaultMessage='Enable Join/Leave Messages'\n                    />\n                }\n                describe={this.props.renderOnOffLabel(joinLeaveState)}\n                section={AdvancedSections.JOIN_LEAVE}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ConfirmModal from 'components/confirm_modal';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport JoinLeaveSection from './join_leave_section';\n\nconst PreReleaseFeatures = Constants.PRE_RELEASE_FEATURES;\n\nexport default class AdvancedSettingsDisplay extends React.PureComponent {\n    static propTypes = {\n        currentUser: PropTypes.object.isRequired,\n        advancedSettingsCategory: PropTypes.array.isRequired,\n        sendOnCtrlEnter: PropTypes.string.isRequired,\n        codeBlockOnCtrlEnter: PropTypes.bool,\n        formatting: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string.isRequired,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        enablePreviewFeatures: PropTypes.bool,\n        enableUserDeactivation: PropTypes.bool,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n            updateUserActive: PropTypes.func.isRequired,\n            revokeAllSessionsForUser: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = () => {\n        const advancedSettings = this.props.advancedSettingsCategory;\n        const settings = {\n            send_on_ctrl_enter: this.props.sendOnCtrlEnter,\n            code_block_ctrl_enter: this.props.codeBlockOnCtrlEnter,\n            formatting: this.props.formatting,\n            join_leave: this.props.joinLeave,\n        };\n\n        const preReleaseFeaturesKeys = Object.keys(PreReleaseFeatures);\n        let enabledFeatures = 0;\n        for (const as of advancedSettings) {\n            for (const key of preReleaseFeaturesKeys) {\n                const feature = PreReleaseFeatures[key];\n\n                if (as.name === Constants.FeatureTogglePrefix + feature.label) {\n                    settings[as.name] = as.value;\n\n                    if (as.value === 'true') {\n                        enabledFeatures += 1;\n                    }\n                }\n            }\n        }\n\n        const isSaving = false;\n\n        const previewFeaturesEnabled = this.props.enablePreviewFeatures;\n        const showDeactivateAccountModal = false;\n\n        return {\n            preReleaseFeatures: PreReleaseFeatures,\n            settings,\n            preReleaseFeaturesKeys,\n            enabledFeatures,\n            isSaving,\n            previewFeaturesEnabled,\n            showDeactivateAccountModal,\n        };\n    }\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n        this.setState(settings);\n    }\n\n    toggleFeature = (feature, checked) => {\n        const settings = this.state.settings;\n        settings[Constants.FeatureTogglePrefix + feature] = String(checked);\n\n        let enabledFeatures = 0;\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0 && this.state.settings[setting] === 'true') {\n                enabledFeatures++;\n            }\n        });\n\n        this.setState({settings, enabledFeatures});\n    }\n\n    saveEnabledFeatures = () => {\n        const features = [];\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0) {\n                features.push(setting);\n            }\n        });\n\n        this.handleSubmit(features);\n    }\n\n    handleSubmit = async (settings) => {\n        const preferences = [];\n        const {actions, currentUser} = this.props;\n        const userId = currentUser.id;\n\n        // this should be refactored so we can actually be certain about what type everything is\n        (Array.isArray(settings) ? settings : [settings]).forEach((setting) => {\n            preferences.push({\n                user_id: userId,\n                category: Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n        });\n\n        this.setState({isSaving: true});\n        await actions.savePreferences(userId, preferences);\n\n        this.handleUpdateSection('');\n    }\n\n    handleDeactivateAccountSubmit = async () => {\n        const userId = this.props.currentUser.id;\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateUserActive(userId, false).\n            then(({error}) => {\n                if (error) {\n                    this.setState({serverError: error.message});\n                }\n            });\n\n        const {data, error} = await this.props.actions.revokeAllSessionsForUser(userId);\n        if (data) {\n            emitUserLoggedOutEvent();\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleShowDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: true,\n        });\n    }\n\n    handleHideDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: false,\n        });\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState(this.getStateFromProps());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    }\n\n    // This function changes ctrl to cmd when OS is mac\n    getCtrlSendText = () => {\n        const description = {\n            default: {\n                id: t('user.settings.advance.sendDesc'),\n                defaultMessage: 'When enabled, CTRL + ENTER will send the message and ENTER inserts a new line.',\n            },\n            mac: {\n                id: t('user.settings.advance.sendDesc.mac'),\n                defaultMessage: 'When enabled, ⌘ + ENTER will send the message and ENTER inserts a new line.',\n            },\n        };\n        const title = {\n            default: {\n                id: t('user.settings.advance.sendTitle'),\n                defaultMessage: 'Send Messages on CTRL+ENTER',\n            },\n            mac: {\n                id: t('user.settings.advance.sendTitle.mac'),\n                defaultMessage: 'Send Messages on ⌘+ENTER',\n            },\n        };\n        if (Utils.isMac()) {\n            return {\n                ctrlSendTitle: title.mac,\n                ctrlSendDesc: description.mac,\n            };\n        }\n        return {\n            ctrlSendTitle: title.default,\n            ctrlSendDesc: description.default,\n        };\n    }\n\n    renderOnOffLabel(enabled) {\n        if (enabled === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.on'\n                defaultMessage='On'\n            />\n        );\n    }\n\n    renderCtrlEnterLabel() {\n        const ctrlEnter = this.state.settings.send_on_ctrl_enter;\n        const codeBlockCtrlEnter = this.state.settings.code_block_ctrl_enter;\n        if (ctrlEnter === 'false' && codeBlockCtrlEnter === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        } else if (ctrlEnter === 'true' && codeBlockCtrlEnter === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.onForAllMessages'\n                    defaultMessage='On for all messages'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='user.settings.advance.onForCode'\n                defaultMessage='On only for code blocks starting with ```'\n            />\n        );\n    }\n\n    renderFormattingSection = () => {\n        if (this.props.activeSection === 'formatting') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.formattingTitle'\n                            defaultMessage='Enable Post Formatting'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='formattingSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingTitle'\n                                    defaultMessage='Enable Post Formatting'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOn'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOff'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingDesc'\n                                    defaultMessage='If enabled, posts will be formatted to create links, show emoji, style the text, and add line breaks. By default, this setting is enabled.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'formatting'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.formattingTitle'\n                        defaultMessage='Enable Post Formatting'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.formatting)}\n                section={'formatting'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderFeatureLabel(feature) {\n        switch (feature) {\n        case 'MARKDOWN_PREVIEW':\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.markdown_preview'\n                    defaultMessage='Show markdown preview option in message input box'\n                />\n            );\n        default:\n            return null;\n        }\n    }\n\n    render() {\n        const serverError = this.state.serverError || null;\n        let ctrlSendSection;\n        const {ctrlSendTitle, ctrlSendDesc} = this.getCtrlSendText();\n\n        if (this.props.activeSection === 'advancedCtrlSend') {\n            const ctrlSendActive = [\n                this.state.settings.send_on_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'false',\n            ];\n\n            const inputs = [\n                <fieldset key='ctrlSendSetting'>\n                    <legend className='form-legend hidden-label'>\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOn'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[0]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'true');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForAllMessages'\n                                defaultMessage='On for all messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOnForCode'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[1]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForCode'\n                                defaultMessage='On only for code blocks starting with ```'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOff'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[2]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'false');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.off'\n                                defaultMessage='Off'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage {...ctrlSendDesc}/>\n                    </div>\n                </fieldset>,\n            ];\n            ctrlSendSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    inputs={inputs}\n                    submit={this.handleSubmit.bind(this, ['send_on_ctrl_enter', 'code_block_ctrl_enter'])}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            ctrlSendSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    describe={this.renderCtrlEnterLabel()}\n                    section={'advancedCtrlSend'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const formattingSection = this.renderFormattingSection();\n        let formattingSectionDivider = null;\n        if (formattingSection) {\n            formattingSectionDivider = <div className='divider-light'/>;\n        }\n\n        let previewFeaturesSection;\n        let previewFeaturesSectionDivider;\n        if (this.state.previewFeaturesEnabled && this.state.preReleaseFeaturesKeys.length > 0) {\n            previewFeaturesSectionDivider = (\n                <div className='divider-light'/>\n            );\n\n            if (this.props.activeSection === 'advancedPreviewFeatures') {\n                const inputs = [];\n\n                this.state.preReleaseFeaturesKeys.forEach((key) => {\n                    const feature = this.state.preReleaseFeatures[key];\n                    inputs.push(\n                        <div key={'advancedPreviewFeatures_' + feature.label}>\n                            <div className='checkbox'>\n                                <label>\n                                    <input\n                                        id={'advancedPreviewFeatures' + feature.label}\n                                        type='checkbox'\n                                        checked={this.state.settings[Constants.FeatureTogglePrefix + feature.label] === 'true'}\n                                        onChange={(e) => {\n                                            this.toggleFeature(feature.label, e.target.checked);\n                                        }}\n                                    />\n                                    {this.renderFeatureLabel(key)}\n                                </label>\n                            </div>\n                        </div>,\n                    );\n                });\n\n                inputs.push(\n                    <div key='advancedPreviewFeatures_helptext'>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.preReleaseDesc'\n                            defaultMessage=\"Check any pre-released features you'd like to preview.  You may also need to refresh the page before the setting will take effect.\"\n                        />\n                    </div>,\n                );\n                previewFeaturesSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.preReleaseTitle'\n                                defaultMessage='Preview Pre-release Features'\n                            />\n                        }\n                        inputs={inputs}\n                        submit={this.saveEnabledFeatures}\n                        saving={this.state.isSaving}\n                        server_error={serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                previewFeaturesSection = (\n                    <SettingItemMin\n                        title={Utils.localizeMessage('user.settings.advance.preReleaseTitle', 'Preview Pre-release Features')}\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.enabledFeatures'\n                                defaultMessage='{count, number} {count, plural, one {Feature} other {Features}} Enabled'\n                                values={{count: this.state.enabledFeatures}}\n                            />\n                        }\n                        section={'advancedPreviewFeatures'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        let deactivateAccountSection = '';\n        let makeConfirmationModal = '';\n        const currentUser = this.props.currentUser;\n\n        if (currentUser.auth_service === '' && this.props.enableUserDeactivation) {\n            if (this.props.activeSection === 'deactivateAccount') {\n                deactivateAccountSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        inputs={[\n                            <div key='formattingSetting'>\n                                <div>\n                                    <br/>\n                                    <FormattedMessage\n                                        id='user.settings.advance.deactivateDesc'\n                                        defaultMessage='Deactivating your account removes your ability to log in to this server and disables all email and mobile notifications. To reactivate your account, contact your System Administrator.'\n                                    />\n                                </div>\n                            </div>,\n                        ]}\n                        saveButtonText={'Deactivate'}\n                        setting={'deactivateAccount'}\n                        submit={this.handleShowDeactivateAccountModal}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                deactivateAccountSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateDescShort'\n                                defaultMessage=\"Click 'Edit' to deactivate your account\"\n                            />\n                        }\n                        section={'deactivateAccount'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n\n            const confirmButtonClass = 'btn btn-danger';\n            const deactivateMemberButton = (\n                <FormattedMessage\n                    id='user.settings.advance.deactivate_member_modal.deactivateButton'\n                    defaultMessage='Yes, deactivate my account'\n                />\n            );\n\n            makeConfirmationModal = (\n                <ConfirmModal\n                    show={this.state.showDeactivateAccountModal}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateAccountTitle'\n                            defaultMessage='Confirm Deactivation'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateDesc'\n                            defaultMessage='Are you sure you want to deactivate your account? This can only be reversed by your System Administrator.'\n                        />\n                    }\n                    confirmButtonClass={confirmButtonClass}\n                    confirmButtonText={deactivateMemberButton}\n                    onConfirm={this.handleDeactivateAccountSubmit}\n                    onCancel={this.handleHideDeactivateAccountModal}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {ctrlSendSection}\n                    {formattingSectionDivider}\n                    {formattingSection}\n                    <div className='divider-light'/>\n                    <JoinLeaveSection\n                        activeSection={this.props.activeSection}\n                        onUpdateSection={this.handleUpdateSection}\n                        renderOnOffLabel={this.renderOnOffLabel}\n                    />\n                    {previewFeaturesSectionDivider}\n                    {previewFeaturesSection}\n                    {formattingSectionDivider}\n                    {deactivateAccountSection}\n                    <div className='divider-dark'/>\n                    {makeConfirmationModal}\n                </div>\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {GenericAction} from 'mattermost-redux/types/actions';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getSupportedTimezones} from 'mattermost-redux/actions/general';\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\nimport {getConfig, getSupportedTimezones as getTimezones, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\n\nimport {Preferences} from 'utils/constants';\n\nimport {GlobalState} from 'types/store';\n\nimport UserSettingsDisplay from './user_settings_display';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const timezones = getTimezones(state);\n    const currentUserId = getCurrentUserId(state);\n    const userTimezone = getUserTimezone(state, currentUserId);\n    const automaticTimezoneNotSet = userTimezone && userTimezone.useAutomaticTimezone && !userTimezone.automaticTimezone;\n    const shouldAutoUpdateTimezone = !userTimezone || automaticTimezoneNotSet;\n    const allowCustomThemes = config.AllowCustomThemes === 'true';\n    const enableLinkPreviews = config.EnableLinkPreviews === 'true';\n    const defaultClientLocale = config.DefaultClientLocale as string;\n    const enableThemeSelection = config.EnableThemeSelection === 'true';\n    const enableTimezone = config.ExperimentalTimezone === 'true';\n    const lockTeammateNameDisplay = getLicense(state).LockTeammateNameDisplay === 'true' && config.LockTeammateNameDisplay === 'true';\n    const configTeammateNameDisplay = config.TeammateNameDisplay as string;\n\n    return {\n        lockTeammateNameDisplay,\n        allowCustomThemes,\n        configTeammateNameDisplay,\n        enableLinkPreviews,\n        defaultClientLocale,\n        enableThemeSelection,\n        enableTimezone,\n        timezones,\n        userTimezone,\n        shouldAutoUpdateTimezone,\n        currentUserTimezone: getUserCurrentTimezone(userTimezone) as string,\n        militaryTime: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, Preferences.USE_MILITARY_TIME_DEFAULT),\n        teammateNameDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.NAME_NAME_FORMAT, configTeammateNameDisplay),\n        channelDisplayMode: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT),\n        messageDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT),\n        collapseDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT),\n        linkPreviewDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            getSupportedTimezones,\n            autoUpdateTimezone,\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\n\nimport ManageLanguages from './manage_languages';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            updateMe,\n        }, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageLanguages);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect, {ValueType} from 'react-select';\nimport {ActionResult} from 'mattermost-redux/types/actions';\nimport {UserProfile} from 'mattermost-redux/types/users';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport {isKeyPressed} from 'utils/utils.jsx';\nimport Constants from 'utils/constants';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n};\n\ntype Props = {\n    user: UserProfile;\n    locale: string;\n    updateSection: (section: string) => void;\n    actions: Actions;\n};\n\ntype SelectedOption = {\n    value: string;\n    label: string;\n}\n\ntype State = {\n    isSaving: boolean;\n    openMenu: boolean;\n    locale: string;\n    serverError?: string;\n    selectedOption: SelectedOption;\n};\n\nexport default class ManageLanguage extends React.PureComponent<Props, State> {\n    reactSelectContainer: React.RefObject<HTMLDivElement>;\n    constructor(props: Props) {\n        super(props);\n        const locales: any = I18n.getLanguages();\n        const userLocale = props.locale;\n        const selectedOption = {\n            value: locales[userLocale].value,\n            label: locales[userLocale].name,\n        };\n        this.reactSelectContainer = React.createRef();\n\n        this.state = {\n            locale: props.locale,\n            selectedOption,\n            isSaving: false,\n            openMenu: false,\n        };\n    }\n\n    componentDidMount() {\n        const reactSelectContainer = this.reactSelectContainer.current;\n        if (reactSelectContainer) {\n            reactSelectContainer.addEventListener(\n                'keydown',\n                this.handleContainerKeyDown,\n            );\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.removeEventListener(\n                'keydown',\n                this.handleContainerKeyDown,\n            );\n        }\n    }\n\n    handleContainerKeyDown = (e: KeyboardEvent) => {\n        const modalBody = document.querySelector('.modal-body');\n        if (isKeyPressed(e, Constants.KeyCodes.ESCAPE) && this.state.openMenu) {\n            modalBody?.classList.remove('no-scroll');\n            this.setState({openMenu: false});\n            e.stopPropagation();\n        }\n    };\n\n    handleKeyDown = (e: React.KeyboardEvent) => {\n        const modalBody = document.querySelector('.modal-body');\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            modalBody?.classList.add('no-scroll');\n            this.setState({openMenu: true});\n        }\n    };\n\n    setLanguage = (selectedOption: ValueType<SelectedOption>) => {\n        if (selectedOption && 'value' in selectedOption) {\n            this.setState({\n                locale: selectedOption.value,\n                selectedOption,\n            });\n        }\n    };\n\n    changeLanguage = () => {\n        if (this.props.user.locale === this.state.locale) {\n            this.props.updateSection('');\n        } else {\n            this.submitUser({\n                ...this.props.user,\n                locale: this.state.locale,\n            });\n        }\n    };\n\n    submitUser = (user: UserProfile) => {\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe(user).then((res) => {\n            if ('data' in res) {\n                // Do nothing since changing the locale essentially refreshes the page\n            } else if ('error' in res) {\n                let serverError;\n                const {error} = res;\n                if (error instanceof Error) {\n                    serverError = error.message;\n                } else {\n                    serverError = error;\n                }\n                this.setState({serverError, isSaving: false});\n            }\n        });\n    };\n\n    handleMenuClose = () => {\n        const modalBody = document.querySelector('.modal-body');\n        if (modalBody) {\n            modalBody.classList.remove('no-scroll');\n        }\n        this.setState({openMenu: false});\n    };\n\n    handleMenuOpen = () => {\n        const modalBody = document.querySelector('.modal-body');\n        if (modalBody) {\n            modalBody.classList.add('no-scroll');\n        }\n        this.setState({openMenu: true});\n    };\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = (\n                <label className='has-error'>{this.state.serverError}</label>\n            );\n        }\n\n        const options: SelectedOption[] = [];\n        const locales: any = I18n.getLanguages();\n\n        const languages = Object.keys(locales).\n            map((l) => {\n                return {\n                    value: locales[l].value as string,\n                    name: locales[l].name,\n                    order: locales[l].order,\n                };\n            }).\n            sort((a, b) => a.order - b.order);\n\n        languages.forEach((lang) => {\n            options.push({value: lang.value, label: lang.name});\n        });\n\n        const reactStyles = {\n            menuPortal: (provided: React.CSSProperties) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n        };\n\n        const input = (\n            <div key='changeLanguage'>\n                <br/>\n                <label\n                    className='control-label'\n                    id='changeInterfaceLanguageLabel'\n                >\n                    <FormattedMessage\n                        id='user.settings.languages.change'\n                        defaultMessage='Change interface language'\n                    />\n                </label>\n                <div\n                    ref={this.reactSelectContainer}\n                    className='pt-2'\n                >\n                    <ReactSelect\n                        className='react-select react-select-top'\n                        classNamePrefix='react-select'\n                        id='displayLanguage'\n                        menuIsOpen={this.state.openMenu}\n                        menuPortalTarget={document.body}\n                        styles={reactStyles}\n                        options={options}\n                        clearable={false}\n                        onChange={this.setLanguage}\n                        onKeyDown={this.handleKeyDown}\n                        value={this.state.selectedOption}\n                        onMenuClose={this.handleMenuClose}\n                        onMenuOpen={this.handleMenuOpen}\n                        aria-labelledby='changeInterfaceLanguageLabel'\n                    />\n                    {serverError}\n                </div>\n                <div>\n                    <br/>\n                    <FormattedMarkdownMessage\n                        id='user.settings.languages.promote'\n                        defaultMessage='Select which language Mattermost displays in the user interface.\\n \\nWould you like to help with translations? Join the [Mattermost Translation Server](!http://translate.mattermost.com/) to contribute.'\n                    />\n                </div>\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.language'\n                        defaultMessage='Language'\n                    />\n                }\n                width='medium'\n                submit={this.changeLanguage}\n                saving={this.state.isSaving}\n                inputs={[input]}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\nimport {UserProfile} from 'mattermost-redux/types/users';\n\nimport ManageTimezones from './manage_timezones';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            updateMe,\n        }, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageTimezones);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedMessage} from 'react-intl';\n\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {ActionResult} from 'mattermost-redux/types/actions';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {getBrowserTimezone} from 'utils/timezone';\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\nimport TimezoneProvider from 'components/suggestion/timezone_provider.jsx';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n}\n\ntype Props ={\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    useAutomaticTimezone: boolean;\n    automaticTimezone: string;\n    manualTimezone: string;\n    timezones: string[];\n    actions: Actions;\n}\n\ntype State ={\n    useAutomaticTimezone: boolean;\n    automaticTimezone: string;\n    manualTimezone: string;\n    manualTimezoneInput: string;\n    isSaving: boolean;\n    serverError?: string;\n}\n\nexport default class ManageTimezones extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            useAutomaticTimezone: props.useAutomaticTimezone,\n            automaticTimezone: props.automaticTimezone,\n            manualTimezone: props.manualTimezone,\n            manualTimezoneInput: props.manualTimezone,\n            isSaving: false,\n        };\n    }\n\n    onChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        this.setState({manualTimezoneInput: e.target.value});\n    };\n\n    handleTimezoneSelected = (selected: string) => {\n        if (!selected) {\n            return;\n        }\n\n        this.setState({\n            manualTimezone: selected,\n            manualTimezoneInput: selected,\n        });\n    };\n\n    timezoneNotChanged = () => {\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const {\n            useAutomaticTimezone: oldUseAutomaticTimezone,\n            automaticTimezone: oldAutomaticTimezone,\n            manualTimezone: oldManualTimezone,\n        } = this.props;\n\n        return (\n            useAutomaticTimezone === oldUseAutomaticTimezone &&\n            automaticTimezone === oldAutomaticTimezone &&\n            manualTimezone === oldManualTimezone\n        );\n    };\n\n    changeTimezone = () => {\n        if (this.timezoneNotChanged()) {\n            this.props.updateSection('');\n            return;\n        }\n\n        this.submitUser();\n    };\n\n    submitUser = () => {\n        const {user, actions} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const timezone = {\n            useAutomaticTimezone: useAutomaticTimezone.toString(),\n            automaticTimezone,\n            manualTimezone,\n        };\n\n        const updatedUser = {\n            ...user,\n            timezone,\n        };\n\n        actions.updateMe(updatedUser).\n            then((res) => {\n                if ('data' in res) {\n                    this.props.updateSection('');\n                } else if ('error' in res) {\n                    const {error} = res;\n                    let serverError;\n                    if (error instanceof Error) {\n                        serverError = error.message;\n                    } else {\n                        serverError = error as string;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    };\n\n    handleAutomaticTimezone = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const useAutomaticTimezone = e.target.checked;\n        let automaticTimezone = '';\n\n        if (useAutomaticTimezone) {\n            automaticTimezone = getBrowserTimezone();\n        }\n\n        this.setState({\n            useAutomaticTimezone,\n            automaticTimezone,\n        });\n    };\n\n    handleManualTimezone = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        this.setState({manualTimezone: e.target.value});\n    };\n\n    render() {\n        const {timezones} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n        } = this.state;\n\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const inputs = [];\n\n        const timezoneRegion = (\n            <div\n                className='section-describe pt-2'\n            >\n                {useAutomaticTimezone && getTimezoneRegion(automaticTimezone)}\n            </div>\n        );\n\n        const noTimezonesFromServer = timezones.length === 0;\n        const automaticTimezoneInput = (\n            <div className='checkbox'>\n                <label>\n                    <input\n                        id='automaticTimezoneInput'\n                        type='checkbox'\n                        checked={useAutomaticTimezone}\n                        onChange={this.handleAutomaticTimezone}\n                        disabled={noTimezonesFromServer}\n                    />\n                    <FormattedMessage\n                        id='user.settings.timezones.automatic'\n                        defaultMessage='Set automatically'\n                    />\n                    {timezoneRegion}\n                </label>\n            </div>\n        );\n\n        const providers = [new TimezoneProvider()];\n        const manualTimezoneInput = (\n            <div key='changeTimezone'>\n                <label className='control-label'>\n                    <FormattedMessage\n                        id='user.settings.timezones.change'\n                        defaultMessage='Change timezone'\n                    />\n                </label>\n                <div className='pt-2'>\n                    <SuggestionBox\n                        className='form-control focused'\n                        type='search'\n                        onChange={this.onChange}\n                        value={this.state.manualTimezoneInput}\n                        onItemSelected={this.handleTimezoneSelected}\n                        listComponent={SuggestionList}\n                        maxLength='64'\n                        requiredCharacters={0}\n                        providers={providers}\n                        listStyle='bottom'\n                        completeOnTab={false}\n                        renderDividers={false}\n                        openOnFocus={true}\n                        disabled={noTimezonesFromServer}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(automaticTimezoneInput);\n\n        if (!useAutomaticTimezone) {\n            inputs.push(manualTimezoneInput);\n        }\n\n        inputs.push(\n            <div>\n                <br/>\n                <FormattedMessage\n                    id='user.settings.timezones.promote'\n                    defaultMessage='Select the time zone used for timestamps in the user interface and email notifications.'\n                />\n            </div>,\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.timezone'\n                        defaultMessage='Timezone'\n                    />\n                }\n                containerStyle='timezone-container'\n                width='medium'\n                submit={this.changeTimezone}\n                saving={this.state.isSaving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedMessage} from 'react-intl';\nimport {PreferenceType} from 'mattermost-redux/types/preferences';\nimport {UserProfile, UserTimezone} from 'mattermost-redux/types/users';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {getBrowserTimezone} from 'utils/timezone.jsx';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ThemeSetting from 'components/user_settings/display/user_settings_theme';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport ManageTimezones from './manage_timezones';\nimport ManageLanguages from './manage_languages';\n\nconst Preferences = Constants.Preferences;\n\nfunction getDisplayStateFromProps(props: Props) {\n    return {\n        militaryTime: props.militaryTime,\n        teammateNameDisplay: props.teammateNameDisplay,\n        channelDisplayMode: props.channelDisplayMode,\n        messageDisplay: props.messageDisplay,\n        collapseDisplay: props.collapseDisplay,\n        linkPreviewDisplay: props.linkPreviewDisplay,\n    };\n}\n\ntype Option = {\n    value: string;\n    radionButtonText: {\n        id: string;\n        message: string;\n        moreId?: string;\n        moreMessage?: string;\n    };\n}\n\ntype SectionProps ={\n    section: string;\n    display: string;\n    defaultDisplay: string;\n    value: string;\n    title: {\n        id: string;\n        message: string;\n    };\n    firstOption: Option;\n    secondOption: Option;\n    thirdOption?: Option;\n    description: {\n        id: string;\n        message: string;\n    };\n    disabled?: boolean;\n}\n\ntype Props = {\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    activeSection?: string;\n    closeModal?: () => void;\n    collapseModal?: () => void;\n    setRequireConfirm?: () => void;\n    setEnforceFocus?: () => void;\n    timezones: string[];\n    userTimezone: UserTimezone;\n    allowCustomThemes: boolean;\n    enableLinkPreviews: boolean;\n    defaultClientLocale: string;\n    enableThemeSelection: boolean;\n    configTeammateNameDisplay: string;\n    currentUserTimezone: string;\n    enableTimezone: boolean;\n    shouldAutoUpdateTimezone: boolean;\n    lockTeammateNameDisplay: boolean;\n    militaryTime: string;\n    teammateNameDisplay: string;\n    channelDisplayMode: string;\n    messageDisplay: string;\n    collapseDisplay: string;\n    linkPreviewDisplay: string;\n    actions: {\n        savePreferences: (userId: string, preferences: PreferenceType[]) => void;\n        getSupportedTimezones: () => void;\n        autoUpdateTimezone: (deviceTimezone: string) => void;\n    };\n}\n\ntype State = {\n    [key: string]: any;\n    isSaving: boolean;\n    militaryTime: string;\n    teammateNameDisplay: string;\n    channelDisplayMode: string;\n    messageDisplay: string;\n    collapseDisplay: string;\n    linkPreviewDisplay: string;\n    handleSubmit?: () => void;\n    serverError?: string;\n}\n\nexport default class UserSettingsDisplay extends React.PureComponent<Props, State> {\n    public prevSections: {\n        theme: string;\n\n        clock: string;\n        linkpreview: string;\n        message_display: string;\n        channel_display_mode: string;\n        languages: string;\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            ...getDisplayStateFromProps(props),\n            isSaving: false,\n        };\n\n        if (props.timezones.length === 0) {\n            props.actions.getSupportedTimezones();\n        }\n\n        this.prevSections = {\n            theme: 'dummySectionName', // dummy value that should never match any section name\n            clock: 'theme',\n            linkpreview: 'clock',\n            message_display: 'linkpreview',\n            channel_display_mode: 'message_display',\n            languages: 'channel_display_mode',\n        };\n    }\n\n    componentDidMount() {\n        const {actions, enableTimezone, shouldAutoUpdateTimezone} = this.props;\n\n        if (enableTimezone && shouldAutoUpdateTimezone) {\n            actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.teammateNameDisplay !== prevProps.teammateNameDisplay) {\n            this.updateState();\n        }\n    }\n\n    handleSubmit = async () => {\n        const userId = this.props.user.id;\n\n        const timePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.USE_MILITARY_TIME,\n            value: this.state.militaryTime,\n        };\n        const teammateNameDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.NAME_NAME_FORMAT,\n            value: this.state.teammateNameDisplay,\n        };\n        const channelDisplayModePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CHANNEL_DISPLAY_MODE,\n            value: this.state.channelDisplayMode,\n        };\n        const messageDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.MESSAGE_DISPLAY,\n            value: this.state.messageDisplay,\n        };\n        const collapseDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSE_DISPLAY,\n            value: this.state.collapseDisplay,\n        };\n        const linkPreviewDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.LINK_PREVIEW_DISPLAY,\n            value: this.state.linkPreviewDisplay,\n        };\n\n        this.setState({isSaving: true});\n\n        const preferences = [\n            timePreference,\n            channelDisplayModePreference,\n            messageDisplayPreference,\n            collapseDisplayPreference,\n            linkPreviewDisplayPreference,\n            teammateNameDisplayPreference,\n        ];\n\n        await this.props.actions.savePreferences(userId, preferences);\n\n        this.updateSection('');\n    }\n\n    handleClockRadio = (militaryTime: string) => {\n        this.setState({militaryTime});\n    }\n\n    handleTeammateNameDisplayRadio = (teammateNameDisplay: string) => {\n        this.setState({teammateNameDisplay});\n    }\n\n    handleChannelDisplayModeRadio(channelDisplayMode: string) {\n        this.setState({channelDisplayMode});\n    }\n\n    handlemessageDisplayRadio(messageDisplay: string) {\n        this.setState({messageDisplay});\n    }\n\n    handleCollapseRadio(collapseDisplay: string) {\n        this.setState({collapseDisplay});\n    }\n\n    handleLinkPreviewRadio(linkPreviewDisplay: string) {\n        this.setState({linkPreviewDisplay});\n    }\n\n    handleOnChange(display: {[key: string]: any}) {\n        this.setState({...display});\n    }\n\n    updateSection = (section: string) => {\n        this.updateState();\n        this.props.updateSection(section);\n    }\n\n    updateState = () => {\n        const newState = getDisplayStateFromProps(this.props);\n        if (!Utils.areObjectsEqual(newState, this.state)) {\n            this.setState(newState);\n        }\n\n        this.setState({isSaving: false});\n    }\n\n    createSection(props: SectionProps) {\n        const {\n            section,\n            display,\n            value,\n            title,\n            firstOption,\n            secondOption,\n            thirdOption,\n            description,\n            disabled,\n        } = props;\n        let extraInfo = null;\n        let submit: (() => Promise<void>) | null = this.handleSubmit;\n\n        const firstMessage = (\n            <FormattedMessage\n                id={firstOption.radionButtonText.id}\n                defaultMessage={firstOption.radionButtonText.message}\n            />\n        );\n\n        let moreColon;\n        let firstMessageMore;\n        if (firstOption.radionButtonText.moreId) {\n            moreColon = ': ';\n            firstMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={firstOption.radionButtonText.moreId}\n                        defaultMessage={firstOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        const secondMessage = (\n            <FormattedMessage\n                id={secondOption.radionButtonText.id}\n                defaultMessage={secondOption.radionButtonText.message}\n            />\n        );\n\n        let secondMessageMore;\n        if (secondOption.radionButtonText.moreId) {\n            secondMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={secondOption.radionButtonText.moreId}\n                        defaultMessage={secondOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        let thirdMessage;\n        if (thirdOption) {\n            thirdMessage = (\n                <FormattedMessage\n                    id={thirdOption.radionButtonText.id}\n                    defaultMessage={thirdOption.radionButtonText.message}\n                />\n            );\n        }\n\n        const messageTitle = (\n            <FormattedMessage\n                id={title.id}\n                defaultMessage={title.message}\n            />\n        );\n\n        const messageDesc = (\n            <FormattedMessage\n                id={description.id}\n                defaultMessage={description.message}\n            />\n        );\n\n        if (this.props.activeSection === section) {\n            const format = [false, false, false];\n            if (value === firstOption.value) {\n                format[0] = true;\n            } else if (value === secondOption.value) {\n                format[1] = true;\n            } else {\n                format[2] = true;\n            }\n\n            const name = section + 'Format';\n            const key = section + 'UserDisplay';\n\n            const firstDisplay = {\n                [display]: firstOption.value,\n            };\n\n            const secondDisplay = {\n                [display]: secondOption.value,\n            };\n\n            let thirdSection;\n            if (thirdOption && thirdMessage) {\n                const thirdDisplay = {\n                    [display]: thirdOption.value,\n                };\n\n                thirdSection = (\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'C'}\n                                type='radio'\n                                name={name}\n                                checked={format[2]}\n                                onChange={() => this.handleOnChange(thirdDisplay)}\n                            />\n                            {thirdMessage}\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            let inputs = [\n                <fieldset key={key}>\n                    <legend className='form-legend hidden-label'>\n                        {messageTitle}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'A'}\n                                type='radio'\n                                name={name}\n                                checked={format[0]}\n                                onChange={() => this.handleOnChange(firstDisplay)}\n                            />\n                            {firstMessage}\n                            {moreColon}\n                            {firstMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'B'}\n                                type='radio'\n                                name={name}\n                                checked={format[1]}\n                                onChange={() => this.handleOnChange(secondDisplay)}\n                            />\n                            {secondMessage}\n                            {moreColon}\n                            {secondMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    {thirdSection}\n                    <div>\n                        <br/>\n                        {messageDesc}\n                    </div>\n                </fieldset>,\n            ];\n\n            if (display === 'teammateNameDisplay' && disabled) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.display.teammateNameDisplay'\n                            defaultMessage='This field is handled through your System Administrator. If you want to change it, you need to do so through your System Administrator.'\n                        />\n                    </span>\n                );\n                submit = null;\n                inputs = [];\n            }\n            return (\n                <div>\n                    <SettingItemMax\n                        title={messageTitle}\n                        inputs={inputs}\n                        submit={submit}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.updateSection}\n                        extraInfo={extraInfo}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        let describe;\n        if (value === firstOption.value) {\n            describe = firstMessage;\n        } else if (value === secondOption.value) {\n            describe = secondMessage;\n        } else {\n            describe = thirdMessage;\n        }\n\n        return (\n            <div>\n                <SettingItemMin\n                    title={messageTitle}\n                    describe={describe}\n                    section={section}\n                    updateSection={this.updateSection}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n    }\n\n    render() {\n        const collapseSection = this.createSection({\n            section: 'collapse',\n            display: 'collapseDisplay',\n            value: this.state.collapseDisplay,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.collapseDisplay'),\n                message: 'Default Appearance of Image Previews',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOn'),\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOff'),\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: t('user.settings.display.collapseDesc'),\n                message: 'Set whether previews of image links and image attachment thumbnails show as expanded or collapsed by default. This setting can also be controlled using the slash commands /expand and /collapse.',\n            },\n        });\n\n        let linkPreviewSection = null;\n\n        if (this.props.enableLinkPreviews) {\n            linkPreviewSection = this.createSection({\n                section: 'linkpreview',\n                display: 'linkPreviewDisplay',\n                value: this.state.linkPreviewDisplay,\n                defaultDisplay: 'true',\n                title: {\n                    id: t('user.settings.display.linkPreviewDisplay'),\n                    message: 'Website Link Previews',\n                },\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOn'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOff'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.linkPreviewDesc'),\n                    message: 'When available, the first web link in a message will show a preview of the website content below the message.',\n                },\n            });\n            this.prevSections.message_display = 'linkpreview';\n        } else {\n            this.prevSections.message_display = this.prevSections.linkpreview;\n        }\n\n        const clockSection = this.createSection({\n            section: 'clock',\n            display: 'militaryTime',\n            value: this.state.militaryTime,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.clockDisplay'),\n                message: 'Clock Display',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.normalClock'),\n                    message: '12-hour clock (example: 4:00 PM)',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.militaryClock'),\n                    message: '24-hour clock (example: 16:00)',\n                },\n            },\n            description: {\n                id: t('user.settings.display.preferTime'),\n                message: 'Select how you prefer time displayed.',\n            },\n        });\n\n        const teammateNameDisplaySection = this.createSection({\n            section: Preferences.NAME_NAME_FORMAT,\n            display: 'teammateNameDisplay',\n            value: this.props.lockTeammateNameDisplay ? this.props.configTeammateNameDisplay : this.state.teammateNameDisplay,\n            defaultDisplay: this.props.configTeammateNameDisplay,\n            title: {\n                id: t('user.settings.display.teammateNameDisplayTitle'),\n                message: 'Teammate Name Display',\n            },\n            firstOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayUsername'),\n                    message: 'Show username',\n                },\n            },\n            secondOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayNicknameFullname'),\n                    message: 'Show nickname if one exists, otherwise show first and last name',\n                },\n            },\n            thirdOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayFullname'),\n                    message: 'Show first and last name',\n                },\n            },\n            description: {\n                id: t('user.settings.display.teammateNameDisplayDescription'),\n                message: 'Set how to display other user\\'s names in posts and the Direct Messages list.',\n            },\n            disabled: this.props.lockTeammateNameDisplay,\n        });\n\n        let timezoneSelection;\n        if (this.props.enableTimezone && !this.props.shouldAutoUpdateTimezone) {\n            const userTimezone = this.props.userTimezone;\n            if (this.props.activeSection === 'timezone') {\n                timezoneSelection = (\n                    <div>\n                        <ManageTimezones\n                            user={this.props.user}\n                            timezones={this.props.timezones}\n                            useAutomaticTimezone={Boolean(userTimezone.useAutomaticTimezone)}\n                            automaticTimezone={userTimezone.automaticTimezone}\n                            manualTimezone={userTimezone.manualTimezone}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                timezoneSelection = (\n                    <div>\n                        <SettingItemMin\n                            title={\n                                <FormattedMessage\n                                    id='user.settings.display.timezone'\n                                    defaultMessage='Timezone'\n                                />\n                            }\n                            describe={getTimezoneRegion(this.props.currentUserTimezone)}\n                            section={'timezone'}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            }\n        }\n\n        const messageDisplaySection = this.createSection({\n            section: Preferences.MESSAGE_DISPLAY,\n            display: 'messageDisplay',\n            value: this.state.messageDisplay,\n            defaultDisplay: Preferences.MESSAGE_DISPLAY_CLEAN,\n            title: {\n                id: t('user.settings.display.messageDisplayTitle'),\n                message: 'Message Display',\n            },\n            firstOption: {\n                value: Preferences.MESSAGE_DISPLAY_CLEAN,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayClean'),\n                    message: 'Standard',\n                    moreId: t('user.settings.display.messageDisplayCleanDes'),\n                    moreMessage: 'Easy to scan and read.',\n                },\n            },\n            secondOption: {\n                value: Preferences.MESSAGE_DISPLAY_COMPACT,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayCompact'),\n                    message: 'Compact',\n                    moreId: t('user.settings.display.messageDisplayCompactDes'),\n                    moreMessage: 'Fit as many messages on the screen as we can.',\n                },\n            },\n            description: {\n                id: t('user.settings.display.messageDisplayDescription'),\n                message: 'Select how messages in a channel should be displayed.',\n            },\n        });\n\n        const channelDisplayModeSection = this.createSection({\n            section: Preferences.CHANNEL_DISPLAY_MODE,\n            display: 'channelDisplayMode',\n            value: this.state.channelDisplayMode,\n            defaultDisplay: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n            title: {\n                id: t('user.settings.display.channelDisplayTitle'),\n                message: 'Channel Display',\n            },\n            firstOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n                radionButtonText: {\n                    id: t('user.settings.display.fullScreen'),\n                    message: 'Full width',\n                },\n            },\n            secondOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                radionButtonText: {\n                    id: t('user.settings.display.fixedWidthCentered'),\n                    message: 'Fixed width, centered',\n                },\n            },\n            description: {\n                id: t('user.settings.display.channeldisplaymode'),\n                message: 'Select the width of the center channel.',\n            },\n        });\n\n        let languagesSection;\n        let userLocale = this.props.user.locale;\n        if (this.props.activeSection === 'languages') {\n            if (!I18n.isLanguageAvailable(userLocale)) {\n                userLocale = this.props.defaultClientLocale;\n            }\n            languagesSection = (\n                <div>\n                    <ManageLanguages\n                        user={this.props.user}\n                        locale={userLocale}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        } else {\n            let locale;\n            if (I18n.isLanguageAvailable(userLocale)) {\n                locale = I18n.getLanguageInfo(userLocale).name;\n            } else {\n                locale = I18n.getLanguageInfo(this.props.defaultClientLocale).name;\n            }\n\n            languagesSection = (\n                <div>\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.display.language'\n                                defaultMessage='Language'\n                            />\n                        }\n                        describe={locale}\n                        section={'languages'}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        if (Object.keys(I18n.getLanguages()).length === 1) {\n            languagesSection = null;\n        }\n\n        let themeSection;\n        if (this.props.enableThemeSelection) {\n            themeSection = (\n                <div>\n                    <ThemeSetting\n                        selected={this.props.activeSection === 'theme'}\n                        updateSection={this.updateSection}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        allowCustomThemes={this.props.allowCustomThemes}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        return (\n            <div id='displaySettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='displaySettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {themeSection}\n                    {clockSection}\n                    {teammateNameDisplaySection}\n                    {timezoneSelection}\n                    {linkPreviewSection}\n                    {collapseSection}\n                    {messageDisplaySection}\n                    {channelDisplayModeSection}\n                    {languagesSection}\n                </div>\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport ColorInput from 'components/color_input';\n\ntype Props = {\n    id: string;\n    label: React.ReactNode;\n    value: string;\n    onChange?: (id: string, newColor: string) => void;\n}\n\nexport default function ColorChooser(props: Props) {\n    const handleChange = (newColor: string) => {\n        props.onChange?.(props.id, newColor);\n    };\n\n    return (\n        <React.Fragment>\n            <label className='custom-label'>{props.label}</label>\n            <ColorInput\n                id={props.id}\n                value={props.value}\n                onChange={handleChange}\n            />\n        </React.Fragment>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedMessage} from 'react-intl';\nimport {setThemeDefaults} from 'mattermost-redux/utils/theme_utils';\n\nimport {t} from 'utils/i18n';\n\nimport Constants from 'utils/constants';\n\nimport LocalizedIcon from 'components/localized_icon';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport Popover from 'components/widgets/popover';\n\nimport ColorChooser from './color_chooser';\n\nconst COPY_SUCCESS_INTERVAL = 3000;\n\nconst messages = defineMessages({\n    sidebarBg: {\n        id: t('user.settings.custom_theme.sidebarBg'),\n        defaultMessage: 'Sidebar BG',\n    },\n    sidebarText: {\n        id: t('user.settings.custom_theme.sidebarText'),\n        defaultMessage: 'Sidebar Text',\n    },\n    sidebarHeaderBg: {\n        id: t('user.settings.custom_theme.sidebarHeaderBg'),\n        defaultMessage: 'Sidebar Header BG',\n    },\n    sidebarHeaderTextColor: {\n        id: t('user.settings.custom_theme.sidebarHeaderTextColor'),\n        defaultMessage: 'Sidebar Header Text',\n    },\n    sidebarUnreadText: {\n        id: t('user.settings.custom_theme.sidebarUnreadText'),\n        defaultMessage: 'Sidebar Unread Text',\n    },\n    sidebarTextHoverBg: {\n        id: t('user.settings.custom_theme.sidebarTextHoverBg'),\n        defaultMessage: 'Sidebar Text Hover BG',\n    },\n    sidebarTextActiveBorder: {\n        id: t('user.settings.custom_theme.sidebarTextActiveBorder'),\n        defaultMessage: 'Sidebar Text Active Border',\n    },\n    sidebarTextActiveColor: {\n        id: t('user.settings.custom_theme.sidebarTextActiveColor'),\n        defaultMessage: 'Sidebar Text Active Color',\n    },\n    onlineIndicator: {\n        id: t('user.settings.custom_theme.onlineIndicator'),\n        defaultMessage: 'Online Indicator',\n    },\n    awayIndicator: {\n        id: t('user.settings.custom_theme.awayIndicator'),\n        defaultMessage: 'Away Indicator',\n    },\n    dndIndicator: {\n        id: t('user.settings.custom_theme.dndIndicator'),\n        defaultMessage: 'Do Not Disturb Indicator',\n    },\n    mentionBg: {\n        id: t('user.settings.custom_theme.mentionBg'),\n        defaultMessage: 'Mention Jewel BG',\n    },\n    mentionColor: {\n        id: t('user.settings.custom_theme.mentionColor'),\n        defaultMessage: 'Mention Jewel Text',\n    },\n    centerChannelBg: {\n        id: t('user.settings.custom_theme.centerChannelBg'),\n        defaultMessage: 'Center Channel BG',\n    },\n    centerChannelColor: {\n        id: t('user.settings.custom_theme.centerChannelColor'),\n        defaultMessage: 'Center Channel Text',\n    },\n    newMessageSeparator: {\n        id: t('user.settings.custom_theme.newMessageSeparator'),\n        defaultMessage: 'New Message Separator',\n    },\n    linkColor: {\n        id: t('user.settings.custom_theme.linkColor'),\n        defaultMessage: 'Link Color',\n    },\n    buttonBg: {\n        id: t('user.settings.custom_theme.buttonBg'),\n        defaultMessage: 'Button BG',\n    },\n    buttonColor: {\n        id: t('user.settings.custom_theme.buttonColor'),\n        defaultMessage: 'Button Text',\n    },\n    errorTextColor: {\n        id: t('user.settings.custom_theme.errorTextColor'),\n        defaultMessage: 'Error Text Color',\n    },\n    mentionHighlightBg: {\n        id: t('user.settings.custom_theme.mentionHighlightBg'),\n        defaultMessage: 'Mention Highlight BG',\n    },\n    mentionHighlightLink: {\n        id: t('user.settings.custom_theme.mentionHighlightLink'),\n        defaultMessage: 'Mention Highlight Link',\n    },\n    codeTheme: {\n        id: t('user.settings.custom_theme.codeTheme'),\n        defaultMessage: 'Code Theme',\n    },\n});\n\nexport default class CustomThemeChooser extends React.PureComponent {\n    static propTypes = {\n        theme: PropTypes.object.isRequired,\n        updateTheme: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        const copyTheme = this.setCopyTheme(this.props.theme);\n\n        this.state = {\n            copyTheme,\n        };\n    }\n\n    handleColorChange = (settingId, color) => {\n        const {updateTheme, theme} = this.props;\n        if (theme[settingId] !== color) {\n            const newTheme = {\n                ...theme,\n                type: 'custom',\n                [settingId]: color,\n            };\n\n            // For backwards compatability\n            if (settingId === 'mentionBg') {\n                newTheme.mentionBj = color;\n            }\n\n            updateTheme(newTheme);\n\n            const copyTheme = this.setCopyTheme(newTheme);\n\n            this.setState({\n                copyTheme,\n            });\n        }\n    }\n\n    setCopyTheme(theme) {\n        const copyTheme = Object.assign({}, theme);\n        delete copyTheme.type;\n        delete copyTheme.image;\n\n        return JSON.stringify(copyTheme);\n    }\n\n    pasteBoxChange = (e) => {\n        let text = '';\n\n        if (window.clipboardData && window.clipboardData.getData) { // IE\n            text = window.clipboardData.getData('Text');\n        } else {\n            text = e.clipboardData.getData('Text');//e.clipboardData.getData('text/plain');\n        }\n\n        if (text.length === 0) {\n            return;\n        }\n\n        let theme;\n        try {\n            theme = JSON.parse(text);\n        } catch (err) {\n            return;\n        }\n\n        setThemeDefaults(theme);\n\n        this.setState({\n            copyTheme: JSON.stringify(theme),\n        });\n\n        theme.type = 'custom';\n        this.props.updateTheme(theme);\n    }\n\n    onChangeHandle = (e) => {\n        e.stopPropagation();\n    }\n\n    selectTheme = () => {\n        const textarea = this.refs.textarea;\n        textarea.focus();\n        textarea.setSelectionRange(0, this.state.copyTheme.length);\n    }\n\n    toggleSidebarStyles = (e) => {\n        e.preventDefault();\n\n        this.refs.sidebarStylesHeader.classList.toggle('open');\n        this.toggleSection(this.refs.sidebarStyles);\n    }\n\n    toggleCenterChannelStyles = (e) => {\n        e.preventDefault();\n\n        this.refs.centerChannelStylesHeader.classList.toggle('open');\n        this.toggleSection(this.refs.centerChannelStyles);\n    }\n\n    toggleLinkAndButtonStyles = (e) => {\n        e.preventDefault();\n\n        this.refs.linkAndButtonStylesHeader.classList.toggle('open');\n        this.toggleSection(this.refs.linkAndButtonStyles);\n    }\n\n    toggleSection(node) {\n        node.classList.toggle('open');\n\n        // set overflow after animation, so the colorchooser is fully shown\n        node.ontransitionend = () => {\n            if (node.classList.contains('open')) {\n                node.style.overflowY = 'inherit';\n            } else {\n                node.style.overflowY = 'hidden';\n            }\n        };\n    }\n\n    onCodeThemeChange = (e) => {\n        const theme = {\n            ...this.props.theme,\n            type: 'custom',\n            codeTheme: e.target.value,\n        };\n\n        this.props.updateTheme(theme);\n    }\n\n    copyTheme = () => {\n        this.selectTheme();\n        document.execCommand('copy');\n        this.showCopySuccess();\n    }\n\n    showCopySuccess = () => {\n        const copySuccess = document.querySelector('.copy-theme-success');\n        copySuccess.style.display = 'inline-block';\n\n        setTimeout(() => {\n            copySuccess.style.display = 'none';\n        }, COPY_SUCCESS_INTERVAL);\n    }\n\n    render() {\n        const theme = this.props.theme;\n\n        const sidebarElements = [];\n        const centerChannelElements = [];\n        const linkAndButtonElements = [];\n        Constants.THEME_ELEMENTS.forEach((element, index) => {\n            if (element.id === 'codeTheme') {\n                const codeThemeOptions = [];\n                let codeThemeURL = '';\n\n                element.themes.forEach((codeTheme, codeThemeIndex) => {\n                    if (codeTheme.id === theme[element.id]) {\n                        codeThemeURL = codeTheme.iconURL;\n                    }\n                    codeThemeOptions.push(\n                        <option\n                            key={'code-theme-key' + codeThemeIndex}\n                            value={codeTheme.id}\n                        >\n                            {codeTheme.uiName}\n                        </option>,\n                    );\n                });\n\n                var popoverContent = (\n                    <Popover\n                        popoverStyle='info'\n                        id='code-popover'\n                        className='code-popover'\n                    >\n                        <img\n                            width='200'\n                            alt={'code theme image'}\n                            src={codeThemeURL}\n                        />\n                    </Popover>\n                );\n\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group'\n                        key={'custom-theme-key' + index}\n                    >\n                        <label className='custom-label'>\n                            <FormattedMessage {...messages[element.id]}/>\n                        </label>\n                        <div\n                            className='input-group theme-group group--code dropdown'\n                            id={element.id}\n                        >\n                            <select\n                                id='codeThemeSelect'\n                                className='form-control'\n                                type='text'\n                                defaultValue={theme[element.id]}\n                                onChange={this.onCodeThemeChange}\n                            >\n                                {codeThemeOptions}\n                            </select>\n                            <OverlayTrigger\n                                placement='top'\n                                overlay={popoverContent}\n                                ref='headerOverlay'\n                            >\n                                <span className='input-group-addon'>\n                                    <img\n                                        alt={'code theme image'}\n                                        src={codeThemeURL}\n                                    />\n                                </span>\n                            </OverlayTrigger>\n                        </div>\n                    </div>,\n                );\n            } else if (element.group === 'centerChannelElements') {\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else if (element.group === 'sidebarElements') {\n                // Need to support old typo mentionBj element for mentionBg\n                let color = theme[element.id];\n                if (!color && element.id === 'mentionBg') {\n                    color = theme.mentionBj;\n                }\n\n                sidebarElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={color}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else {\n                linkAndButtonElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            }\n        });\n\n        const pasteBox = (\n            <div className='col-sm-12'>\n                <label className='custom-label'>\n                    <FormattedMessage\n                        id='user.settings.custom_theme.copyPaste'\n                        defaultMessage='Copy to share or paste theme colors here:'\n                    />\n                </label>\n                <textarea\n                    ref='textarea'\n                    className='form-control'\n                    id='pasteBox'\n                    value={this.state.copyTheme}\n                    onCopy={this.showCopySuccess}\n                    onPaste={this.pasteBoxChange}\n                    onChange={this.onChangeHandle}\n                    onClick={this.selectTheme}\n                />\n                <div className='mt-3'>\n                    <button\n                        className='btn btn-link copy-theme-button'\n                        onClick={this.copyTheme}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copyThemeColors'\n                            defaultMessage='Copy Theme Colors'\n                        />\n                    </button>\n                    <span\n                        className='alert alert-success copy-theme-success'\n                        role='alert'\n                        style={{display: 'none'}}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copied'\n                            defaultMessage='✔ Copied'\n                        />\n                    </span>\n                </div>\n            </div>\n        );\n\n        return (\n            <div className='appearance-section pt-2'>\n                <div className='theme-elements row'>\n                    <div\n                        ref='sidebarStylesHeader'\n                        id='sidebarStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleSidebarStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.sidebarTitle'\n                            defaultMessage='Sidebar Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='sidebarStyles'\n                        className='theme-elements__body'\n                    >\n                        {sidebarElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='centerChannelStylesHeader'\n                        id='centerChannelStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleCenterChannelStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.centerChannelTitle'\n                            defaultMessage='Center Channel Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='centerChannelStyles'\n                        id='centerChannelStyles'\n                        className='theme-elements__body'\n                    >\n                        {centerChannelElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='linkAndButtonStylesHeader'\n                        id='linkAndButtonsStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleLinkAndButtonStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.linkButtonTitle'\n                            defaultMessage='Link and Button Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='linkAndButtonStyles'\n                        className='theme-elements__body'\n                    >\n                        {linkAndButtonElements}\n                    </div>\n                </div>\n                <div className='row mt-3'>\n                    {pasteBox}\n                </div>\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTheme, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeamId, getMyTeamsCount} from 'mattermost-redux/selectors/entities/teams';\n\nimport {saveTheme, deleteTeamSpecificThemes} from 'mattermost-redux/actions/preferences';\n\nimport {Preferences} from 'utils/constants';\n\nimport UserSettingsTheme from './user_settings_theme.jsx';\n\nfunction makeMapStateToProps() {\n    const getThemeCategory = makeGetCategory();\n\n    return (state) => {\n        return {\n            currentTeamId: getCurrentTeamId(state),\n            theme: getTheme(state),\n            applyToAllTeams: getThemeCategory(state, Preferences.CATEGORY_THEME).length <= 1,\n            showAllTeamsCheckbox: getMyTeamsCount(state) > 1,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            saveTheme,\n            deleteTeamSpecificThemes,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(UserSettingsTheme);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PremadeThemeChooser from './premade_theme_chooser.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const allowedThemes = (config.AllowedThemes && config.AllowedThemes.split(',')) || [];\n\n    return {\n        allowedThemes,\n    };\n}\n\nexport default connect(mapStateToProps)(PremadeThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class PremadeThemeChooser extends React.PureComponent {\n    render() {\n        const theme = this.props.theme;\n\n        const premadeThemes = [];\n        const allowedThemes = this.props.allowedThemes;\n        const hasAllowedThemes = allowedThemes.length > 1 || (allowedThemes[0] && allowedThemes[0].trim().length > 0);\n\n        for (const k in Constants.THEMES) {\n            if (Constants.THEMES.hasOwnProperty(k)) {\n                if (hasAllowedThemes && allowedThemes.indexOf(k) < 0) {\n                    continue;\n                }\n\n                const premadeTheme = Object.assign({}, Constants.THEMES[k]);\n\n                let activeClass = '';\n                if (premadeTheme.type === theme.type) {\n                    activeClass = 'active';\n                }\n\n                premadeThemes.push(\n                    <div\n                        className='col-xs-6 col-sm-3 premade-themes'\n                        key={'premade-theme-key' + k}\n                    >\n                        <div\n                            id={`premadeTheme${premadeTheme.type.replace(' ', '')}`}\n                            className={activeClass}\n                            onClick={() => this.props.updateTheme(premadeTheme)}\n                        >\n                            <label>\n                                <img\n                                    alt={'premade theme ' + k}\n                                    className='img-responsive'\n                                    src={premadeTheme.image}\n                                />\n                                <div className='theme-label'>{Utils.toTitleCase(premadeTheme.type)}</div>\n                            </label>\n                        </div>\n                    </div>,\n                );\n            }\n        }\n\n        return (\n            <div className='row appearance-section'>\n                <div className='clearfix'>\n                    {premadeThemes}\n                </div>\n            </div>\n        );\n    }\n}\n\nPremadeThemeChooser.propTypes = {\n    theme: PropTypes.object.isRequired,\n    updateTheme: PropTypes.func.isRequired,\n    allowedThemes: PropTypes.arrayOf(PropTypes.string),\n};\n\nPremadeThemeChooser.defaultProps = {\n    allowedThemes: [],\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ActionTypes, Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport AppDispatcher from 'dispatcher/app_dispatcher.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport CustomThemeChooser from './custom_theme_chooser.jsx';\nimport PremadeThemeChooser from './premade_theme_chooser';\n\nexport default class ThemeSetting extends React.PureComponent {\n    static propTypes = {\n        actions: PropTypes.shape({\n            saveTheme: PropTypes.func.isRequired,\n            deleteTeamSpecificThemes: PropTypes.func.isRequired,\n        }).isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        theme: PropTypes.object,\n        selected: PropTypes.bool.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        allowCustomThemes: PropTypes.bool,\n        focused: PropTypes.bool.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...this.getStateFromProps(props),\n            isSaving: false,\n        };\n\n        this.originalTheme = Object.assign({}, this.state.theme);\n    }\n\n    componentDidMount() {\n        if (this.props.selected) {\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border'); // eslint-disable-line jquery/no-class\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selected && !this.props.selected) {\n            this.resetFields();\n        }\n\n        if (this.props.selected) {\n            $('.color-btn').removeClass('active-border'); // eslint-disable-line jquery/no-class\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border'); // eslint-disable-line jquery/no-class\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.selected) {\n            Utils.applyTheme(this.props.theme);\n        }\n    }\n\n    getStateFromProps(props = this.props) {\n        const theme = {...props.theme};\n        if (!theme.codeTheme) {\n            theme.codeTheme = Constants.DEFAULT_CODE_THEME;\n        }\n\n        return {\n            theme,\n            type: theme.type || 'premade',\n            showAllTeamsCheckbox: props.showAllTeamsCheckbox,\n            applyToAllTeams: props.applyToAllTeams,\n        };\n    }\n\n    submitTheme = async () => {\n        const teamId = this.state.applyToAllTeams ? '' : this.props.currentTeamId;\n\n        this.setState({isSaving: true});\n\n        await this.props.actions.saveTheme(teamId, this.state.theme);\n\n        if (this.state.applyToAllTeams) {\n            await this.props.actions.deleteTeamSpecificThemes();\n        }\n\n        this.props.setRequireConfirm(false);\n        this.originalTheme = Object.assign({}, this.state.theme);\n        this.props.updateSection('');\n        this.setState({isSaving: false});\n    };\n\n    updateTheme = (theme) => {\n        let themeChanged = this.state.theme.length === theme.length;\n        if (!themeChanged) {\n            for (const field in theme) {\n                if (theme.hasOwnProperty(field)) {\n                    if (this.state.theme[field] !== theme[field]) {\n                        themeChanged = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.props.setRequireConfirm(themeChanged);\n\n        this.setState({theme});\n        Utils.applyTheme(theme);\n    };\n\n    updateType(type) {\n        this.setState({type});\n    }\n\n    resetFields = () => {\n        const state = this.getStateFromProps();\n        state.serverError = null;\n        this.setState(state);\n\n        Utils.applyTheme(state.theme);\n\n        this.props.setRequireConfirm(false);\n    };\n\n    handleImportModal = () => {\n        AppDispatcher.handleViewAction({\n            type: ActionTypes.TOGGLE_IMPORT_THEME_MODAL,\n            value: true,\n            callback: this.updateTheme,\n        });\n\n        this.props.setEnforceFocus(false);\n    };\n\n    handleUpdateSection = (section) => {\n        this.props.updateSection(section);\n    };\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        const displayCustom = this.state.type === 'custom';\n\n        let custom;\n        let premade;\n        if (displayCustom && this.props.allowCustomThemes) {\n            custom = (\n                <div key='customThemeChooser'>\n                    <CustomThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        } else {\n            premade = (\n                <div key='premadeThemeChooser'>\n                    <br/>\n                    <PremadeThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        }\n\n        let themeUI;\n        if (this.props.selected) {\n            const inputs = [];\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='premadeThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='standardThemes'\n                                type='radio'\n                                name='theme'\n                                checked={!displayCustom}\n                                onChange={this.updateType.bind(this, 'premade')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.themeColors'\n                                defaultMessage='Theme Colors'\n                            />\n                        </label>\n                        <br/>\n                    </div>,\n                );\n            }\n\n            inputs.push(premade);\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='customThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='customThemes'\n                                type='radio'\n                                name='theme'\n                                checked={displayCustom}\n                                onChange={this.updateType.bind(this, 'custom')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.customTheme'\n                                defaultMessage='Custom Theme'\n                            />\n                        </label>\n                    </div>,\n                );\n\n                inputs.push(custom);\n\n                inputs.push(\n                    <div key='otherThemes'>\n                        <br/>\n                        <a\n                            id='otherThemes'\n                            href='http://docs.mattermost.com/help/settings/theme-colors.html#custom-theme-examples'\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.otherThemes'\n                                defaultMessage='See other themes'\n                            />\n                        </a>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div\n                        key='importSlackThemeButton'\n                        className='pt-2'\n                    >\n                        <button\n                            id='slackImportTheme'\n                            className='theme style--none color--link'\n                            onClick={this.handleImportModal}\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.import'\n                                defaultMessage='Import theme colors from Slack'\n                            />\n                        </button>\n                    </div>,\n                );\n            }\n\n            let allTeamsCheckbox = null;\n            if (this.state.showAllTeamsCheckbox) {\n                allTeamsCheckbox = (\n                    <div className='checkbox user-settings__submit-checkbox'>\n                        <label>\n                            <input\n                                id='applyThemeToAllTeams'\n                                type='checkbox'\n                                checked={this.state.applyToAllTeams}\n                                onChange={(e) => this.setState({applyToAllTeams: e.target.checked})}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.applyToAllTeams'\n                                defaultMessage='Apply new theme to all my teams'\n                            />\n                        </label>\n                    </div>\n                );\n            }\n\n            themeUI = (\n                <SettingItemMax\n                    inputs={inputs}\n                    submitExtra={allTeamsCheckbox}\n                    submit={this.submitTheme}\n                    disableEnterSubmit={true}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    width='full'\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            themeUI = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.theme.title'\n                            defaultMessage='Theme'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.display.theme.describe'\n                            defaultMessage='Open to manage your theme'\n                        />\n                    }\n                    section={'theme'}\n                    updateSection={this.handleUpdateSection}\n                    focused={this.props.focused}\n                />\n            );\n        }\n\n        return themeUI;\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\nimport {\n    getMe,\n    updateMe,\n    sendVerificationEmail,\n    setDefaultProfileImage,\n    uploadProfileImage,\n} from 'mattermost-redux/actions/users';\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport UserSettingsGeneralTab, {Props} from './user_settings_general';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    const requireEmailVerification = config.RequireEmailVerification === 'true';\n    const maxFileSize = parseInt(config.MaxFileSize!, 10);\n    const ldapFirstNameAttributeSet = config.LdapFirstNameAttributeSet === 'true';\n    const ldapLastNameAttributeSet = config.LdapLastNameAttributeSet === 'true';\n    const samlFirstNameAttributeSet = config.SamlFirstNameAttributeSet === 'true';\n    const samlLastNameAttributeSet = config.SamlLastNameAttributeSet === 'true';\n    const ldapNicknameAttributeSet = config.LdapNicknameAttributeSet === 'true';\n    const samlNicknameAttributeSet = config.SamlNicknameAttributeSet === 'true';\n    const samlPositionAttributeSet = config.SamlPositionAttributeSet === 'true';\n    const ldapPositionAttributeSet = config.LdapPositionAttributeSet === 'true';\n    const ldapPictureAttributeSet = config.LdapPictureAttributeSet === 'true';\n\n    return {\n        requireEmailVerification,\n        maxFileSize,\n        ldapFirstNameAttributeSet,\n        ldapLastNameAttributeSet,\n        samlFirstNameAttributeSet,\n        samlLastNameAttributeSet,\n        ldapNicknameAttributeSet,\n        samlNicknameAttributeSet,\n        samlPositionAttributeSet,\n        ldapPositionAttributeSet,\n        ldapPictureAttributeSet,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Props['actions']>({\n            logError,\n            clearErrors,\n            getMe,\n            updateMe,\n            sendVerificationEmail,\n            setDefaultProfileImage,\n            uploadProfileImage,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, injectIntl, IntlShape} from 'react-intl';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\nimport {UserProfile} from 'mattermost-redux/types/users';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingPicture from 'components/setting_picture.jsx';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport {AnnouncementBarMessages, AnnouncementBarTypes, AcceptedProfileImageTypes, Constants, ValidationErrors} from 'utils/constants';\n\nconst holders = defineMessages({\n    usernameReserved: {\n        id: t('user.settings.general.usernameReserved'),\n        defaultMessage: 'This username is reserved, please choose a new one.',\n    },\n    usernameRestrictions: {\n        id: t('user.settings.general.usernameRestrictions'),\n        defaultMessage: \"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-', and '_'.\",\n    },\n    validEmail: {\n        id: t('user.settings.general.validEmail'),\n        defaultMessage: 'Please enter a valid email address.',\n    },\n    emailMatch: {\n        id: t('user.settings.general.emailMatch'),\n        defaultMessage: 'The new emails you entered do not match.',\n    },\n    incorrectPassword: {\n        id: t('user.settings.general.incorrectPassword'),\n        defaultMessage: 'Your password is incorrect.',\n    },\n    emptyPassword: {\n        id: t('user.settings.general.emptyPassword'),\n        defaultMessage: 'Please enter your current password.',\n    },\n    validImage: {\n        id: t('user.settings.general.validImage'),\n        defaultMessage: 'Only BMP, JPG or PNG images may be used for profile pictures',\n    },\n    imageTooLarge: {\n        id: t('user.settings.general.imageTooLarge'),\n        defaultMessage: 'Unable to upload profile image. File is too large.',\n    },\n    uploadImage: {\n        id: t('user.settings.general.uploadImage'),\n        defaultMessage: \"Click 'Edit' to upload an image.\",\n    },\n    uploadImageMobile: {\n        id: t('user.settings.general.mobile.uploadImage'),\n        defaultMessage: 'Click to upload an image',\n    },\n    fullName: {\n        id: t('user.settings.general.fullName'),\n        defaultMessage: 'Full Name',\n    },\n    nickname: {\n        id: t('user.settings.general.nickname'),\n        defaultMessage: 'Nickname',\n    },\n    username: {\n        id: t('user.settings.general.username'),\n        defaultMessage: 'Username',\n    },\n    profilePicture: {\n        id: t('user.settings.general.profilePicture'),\n        defaultMessage: 'Profile Picture',\n    },\n    close: {\n        id: t('user.settings.general.close'),\n        defaultMessage: 'Close',\n    },\n    position: {\n        id: t('user.settings.general.position'),\n        defaultMessage: 'Position',\n    },\n});\n\nexport type Props = {\n    intl: IntlShape;\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    updateTab: (notifications: string) => void;\n    activeSection?: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    maxFileSize: number;\n    actions: {\n        logError: ({message, type}: {message: any; type: string}, status: boolean) => void;\n        clearErrors: () => void;\n        getMe: () => void;\n        updateMe: (user: UserProfile) => Promise<{\n            data: boolean;\n            error?: {\n                server_error_id: string;\n                message: string;\n            };\n        }>;\n        sendVerificationEmail: (email: string) => Promise<{\n            data: boolean;\n            error?: {\n                err: string;\n            };\n        }>;\n        setDefaultProfileImage: (id: string) => void;\n        uploadProfileImage: (id: string, file: File) => Promise<{\n            data: boolean;\n            error?: {\n                message: string;\n            };\n        }>;\n    };\n    requireEmailVerification?: boolean;\n    ldapFirstNameAttributeSet?: boolean;\n    ldapLastNameAttributeSet?: boolean;\n    samlFirstNameAttributeSet?: boolean;\n    samlLastNameAttributeSet?: boolean;\n    ldapNicknameAttributeSet?: boolean;\n    samlNicknameAttributeSet?: boolean;\n    ldapPositionAttributeSet?: boolean;\n    samlPositionAttributeSet?: boolean;\n    ldapPictureAttributeSet?: boolean;\n}\n\ntype State = {\n    username: string;\n    firstName: string;\n    lastName: string;\n    nickname: string;\n    position: string;\n    originalEmail: string;\n    email: string;\n    confirmEmail: string;\n    currentPassword: string;\n    pictureFile: File | null;\n    loadingPicture: boolean;\n    sectionIsSaving: boolean;\n    showSpinner: boolean;\n    resendStatus?: string;\n    clientError?: string | null;\n    serverError?: string | {server_error_id: string; message: string};\n    emailError?: string;\n}\n\nexport class UserSettingsGeneralTab extends React.Component<Props, State> {\n    public submitActive = false;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = this.setupInitialState(props);\n    }\n\n    handleEmailResend = (email: string) => {\n        this.setState({resendStatus: 'sending', showSpinner: true});\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    }\n\n    createEmailResendLink = (email: string) => {\n        return (\n            <span className='resend-verification-wrapper'>\n                <LoadingWrapper\n                    loading={this.state.showSpinner}\n                    text={Utils.localizeMessage('user.settings.general.sending', 'Sending')}\n                >\n                    <a\n                        onClick={() => {\n                            this.handleEmailResend(email);\n                            setTimeout(() => {\n                                this.setState({\n                                    showSpinner: false,\n                                });\n                            }, 500);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.sendAgain'\n                            defaultMessage='Send again'\n                        />\n                    </a>\n                </LoadingWrapper>\n            </span>\n        );\n    }\n\n    submitUsername = () => {\n        const user = Object.assign({}, this.props.user);\n        const username = this.state.username.trim().toLowerCase();\n\n        const {formatMessage} = this.props.intl;\n        const usernameError = Utils.isValidUsername(username);\n        if (usernameError) {\n            let errObj;\n            if (usernameError.id === ValidationErrors.RESERVED_NAME) {\n                errObj = {clientError: formatMessage(holders.usernameReserved), serverError: ''};\n            } else {\n                errObj = {clientError: formatMessage(holders.usernameRestrictions, {min: Constants.MIN_USERNAME_LENGTH, max: Constants.MAX_USERNAME_LENGTH}), serverError: ''};\n            }\n            this.setState(errObj);\n            return;\n        }\n\n        if (user.username === username) {\n            this.updateSection('');\n            return;\n        }\n\n        user.username = username;\n\n        trackEvent('settings', 'user_settings_update', {field: 'username'});\n\n        this.submitUser(user, false);\n    }\n\n    submitNickname = () => {\n        const user = Object.assign({}, this.props.user);\n        const nickname = this.state.nickname.trim();\n\n        if (user.nickname === nickname) {\n            this.updateSection('');\n            return;\n        }\n\n        user.nickname = nickname;\n\n        trackEvent('settings', 'user_settings_update', {field: 'nickname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitName = () => {\n        const user = Object.assign({}, this.props.user);\n        const firstName = this.state.firstName.trim();\n        const lastName = this.state.lastName.trim();\n\n        if (user.first_name === firstName && user.last_name === lastName) {\n            this.updateSection('');\n            return;\n        }\n\n        user.first_name = firstName;\n        user.last_name = lastName;\n\n        trackEvent('settings', 'user_settings_update', {field: 'fullname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitEmail = () => {\n        const user = Object.assign({}, this.props.user);\n        const email = this.state.email.trim().toLowerCase();\n        const confirmEmail = this.state.confirmEmail.trim().toLowerCase();\n        const currentPassword = this.state.currentPassword;\n\n        const {formatMessage} = this.props.intl;\n\n        if (email === user.email && (confirmEmail === '' || confirmEmail === user.email)) {\n            this.updateSection('');\n            return;\n        }\n\n        if (email === '' || !isEmail(email)) {\n            this.setState({emailError: formatMessage(holders.validEmail), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (email !== confirmEmail) {\n            this.setState({emailError: formatMessage(holders.emailMatch), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (currentPassword === '') {\n            this.setState({emailError: formatMessage(holders.emptyPassword), clientError: '', serverError: ''});\n            return;\n        }\n\n        user.email = email;\n        user.password = currentPassword;\n        trackEvent('settings', 'user_settings_update', {field: 'email'});\n        this.submitUser(user, true);\n    }\n\n    submitUser = (user: UserProfile, emailUpdated: boolean) => {\n        const {formatMessage} = this.props.intl;\n        this.setState({sectionIsSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.props.actions.getMe();\n                    const verificationEnabled = this.props.requireEmailVerification && emailUpdated;\n                    if (verificationEnabled) {\n                        this.props.actions.clearErrors();\n                        this.props.actions.logError({\n                            message: AnnouncementBarMessages.EMAIL_VERIFICATION_REQUIRED,\n                            type: AnnouncementBarTypes.SUCCESS,\n                        }, true);\n                    }\n                } else if (err) {\n                    let serverError;\n                    if (err.server_error_id &&\n                        err.server_error_id === 'api.user.check_user_password.invalid.app_error') {\n                        serverError = formatMessage(holders.incorrectPassword);\n                    } else if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n                }\n            });\n    }\n\n    setDefaultProfilePicture = async () => {\n        try {\n            await this.props.actions.setDefaultProfileImage(this.props.user.id);\n            this.updateSection('');\n            this.submitActive = false;\n        } catch (err) {\n            let serverError;\n            if (err.message) {\n                serverError = err.message;\n            } else {\n                serverError = err;\n            }\n            this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n        }\n    }\n\n    submitPicture = () => {\n        if (!this.state.pictureFile) {\n            return;\n        }\n\n        if (!this.submitActive) {\n            return;\n        }\n\n        trackEvent('settings', 'user_settings_update', {field: 'picture'});\n\n        const {formatMessage} = this.props.intl;\n        const file = this.state.pictureFile;\n\n        if (!AcceptedProfileImageTypes.includes(file.type)) {\n            this.setState({clientError: formatMessage(holders.validImage), serverError: ''});\n            return;\n        } else if (file.size > this.props.maxFileSize) {\n            this.setState({clientError: formatMessage(holders.imageTooLarge), serverError: ''});\n            return;\n        }\n\n        this.setState({loadingPicture: true});\n\n        this.props.actions.uploadProfileImage(this.props.user.id, file).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.submitActive = false;\n                } else if (err) {\n                    const state = this.setupInitialState(this.props);\n                    state.serverError = err.message;\n                    this.setState(state);\n                }\n            });\n    }\n\n    submitPosition = () => {\n        const user = Object.assign({}, this.props.user);\n        const position = this.state.position.trim();\n\n        if (user.position === position) {\n            this.updateSection('');\n            return;\n        }\n\n        user.position = position;\n\n        trackEvent('settings', 'user_settings_update', {field: 'position'});\n\n        this.submitUser(user, false);\n    }\n\n    updateUsername = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({username: e.target.value});\n    }\n\n    updateFirstName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({firstName: e.target.value});\n    }\n\n    updateLastName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({lastName: e.target.value});\n    }\n\n    updateNickname = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({nickname: e.target.value});\n    }\n\n    updatePosition = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({position: e.target.value});\n    }\n\n    updateEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({email: e.target.value});\n    }\n\n    updateConfirmEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({confirmEmail: e.target.value});\n    }\n\n    updateCurrentPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updatePicture = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files[0]) {\n            this.setState({pictureFile: e.target.files[0]});\n\n            this.submitActive = true;\n            this.setState({clientError: null});\n        } else {\n            this.setState({pictureFile: null});\n        }\n    }\n\n    updateSection = (section: string) => {\n        this.setState(Object.assign({}, this.setupInitialState(this.props), {clientError: '', serverError: '', emailError: '', sectionIsSaving: false}));\n        this.submitActive = false;\n        this.props.updateSection(section);\n    }\n\n    setupInitialState(props: Props) {\n        const user = props.user;\n\n        return {\n            username: user.username,\n            firstName: user.first_name,\n            lastName: user.last_name,\n            nickname: user.nickname,\n            position: user.position,\n            originalEmail: user.email,\n            email: '',\n            confirmEmail: '',\n            currentPassword: '',\n            pictureFile: null,\n            loadingPicture: false,\n            sectionIsSaving: false,\n            showSpinner: false,\n            serverError: '',\n        };\n    }\n\n    createEmailSection() {\n        const {formatMessage} = this.props.intl;\n\n        let emailSection;\n        if (this.props.activeSection === 'email') {\n            const emailVerificationEnabled = this.props.requireEmailVerification;\n            const inputs = [];\n\n            let helpText = (\n                <FormattedMessage\n                    id='user.settings.general.emailHelp1'\n                    defaultMessage='Email is used for sign-in, notifications, and password reset. Email requires verification if changed.'\n                />\n            );\n\n            if (!emailVerificationEnabled) {\n                helpText = (\n                    <FormattedMessage\n                        id='user.settings.general.emailHelp3'\n                        defaultMessage='Email is used for sign-in, notifications, and password reset.'\n                    />\n                );\n            }\n\n            let submit = null;\n\n            if (this.props.user.auth_service === '') {\n                inputs.push(\n                    <div key='currentEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentEmail'\n                                    defaultMessage='Current Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <label className='control-label word-break--all text-left'>{this.state.originalEmail}</label>\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='emailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.newEmail'\n                                    defaultMessage='New Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    autoFocus={true}\n                                    id='primaryEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.email}\n                                    aria-label={formatMessage({id: 'user.settings.general.newEmail', defaultMessage: 'New Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='confirmEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.confirmEmail'\n                                    defaultMessage='Confirm Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='confirmEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateConfirmEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.confirmEmail}\n                                    aria-label={formatMessage({id: 'user.settings.general.confirmEmail', defaultMessage: 'Confirm Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='currentPassword'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentPassword'\n                                    defaultMessage='Current Password'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='currentPassword'\n                                    className='form-control'\n                                    type='password'\n                                    onChange={this.updateCurrentPassword}\n                                    value={this.state.currentPassword}\n                                    aria-label={formatMessage({id: 'user.settings.general.currentPassword', defaultMessage: 'Current Password'})}\n                                />\n                            </div>\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n\n                submit = this.submitEmail;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.OPENID_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOpenIdCantUpdate'\n                                defaultMessage='Login occurs through OpenID Connect. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailSamlCantUpdate'\n                                defaultMessage='Login occurs through SAML. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            }\n\n            emailSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.emailError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            let describe: JSX.Element|string = '';\n            if (this.props.user.auth_service === '') {\n                describe = this.props.user.email;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGitlab'\n                        defaultMessage='Login done through GitLab ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGoogle'\n                        defaultMessage='Login done through Google Apps ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginOffice365'\n                        defaultMessage='Login done through Office 365 ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginLdap'\n                        defaultMessage='Login done through AD/LDAP ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginSaml'\n                        defaultMessage='Login done through SAML ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            }\n\n            emailSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    describe={describe}\n                    section={'email'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return emailSection;\n    }\n\n    render() {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        let clientError = null;\n        if (this.state.clientError) {\n            clientError = this.state.clientError;\n        }\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        let nameSection;\n        const inputs = [];\n\n        if (this.props.activeSection === 'name') {\n            let extraInfo;\n            let submit = null;\n            if (\n                (this.props.user.auth_service === Constants.LDAP_SERVICE &&\n                    (this.props.ldapFirstNameAttributeSet || this.props.ldapLastNameAttributeSet)) ||\n                (this.props.user.auth_service === Constants.SAML_SERVICE &&\n                    (this.props.samlFirstNameAttributeSet || this.props.samlLastNameAttributeSet)) ||\n                (Constants.OAUTH_SERVICES.includes(this.props.user.auth_service))\n            ) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                inputs.push(\n                    <div\n                        key='firstNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.firstName'\n                                defaultMessage='First Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='firstName'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateFirstName}\n                                maxLength={Constants.MAX_FIRSTNAME_LENGTH}\n                                value={this.state.firstName}\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.firstName', defaultMessage: 'First Name'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div\n                        key='lastNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.lastName'\n                                defaultMessage='Last Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='lastName'\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateLastName}\n                                maxLength={Constants.MAX_LASTNAME_LENGTH}\n                                value={this.state.lastName}\n                                aria-label={formatMessage({id: 'user.settings.general.lastName', defaultMessage: 'Last Name'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                const notifClick = (e: React.MouseEvent<HTMLAnchorElement>) => {\n                    e.preventDefault();\n                    this.updateSection('');\n                    this.props.updateTab('notifications');\n                };\n\n                const notifLink = (\n                    <a\n                        href='#'\n                        onClick={notifClick.bind(this)}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.notificationsLink'\n                            defaultMessage='Notifications'\n                        />\n                    </a>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.notificationsExtra'\n                            defaultMessage='By default, you will receive mention notifications when someone types your first name. Go to {notify} settings to change this default.'\n                            values={{\n                                notify: (notifLink),\n                            }}\n                        />\n                    </span>\n                );\n\n                submit = this.submitName;\n            }\n\n            nameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.fullName)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe: JSX.Element|string = '';\n\n            if (user.first_name && user.last_name) {\n                describe = user.first_name + ' ' + user.last_name;\n            } else if (user.first_name) {\n                describe = user.first_name;\n            } else if (user.last_name) {\n                describe = user.last_name;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyName'\n                        defaultMessage=\"Click 'Edit' to add your full name\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyName'\n                            defaultMessage='Click to add your full name'\n                        />\n                    );\n                }\n            }\n\n            nameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.fullName)}\n                    describe={describe}\n                    section={'name'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let nicknameSection;\n        if (this.props.activeSection === 'nickname') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === 'ldap' && this.props.ldapNicknameAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlNicknameAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let nicknameLabel: JSX.Element|string = (\n                    <FormattedMessage\n                        id='user.settings.general.nickname'\n                        defaultMessage='Nickname'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    nicknameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='nicknameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{nicknameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='nickname'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateNickname}\n                                value={this.state.nickname}\n                                maxLength={Constants.MAX_NICKNAME_LENGTH}\n                                autoCapitalize='off'\n                                aria-label={formatMessage({id: 'user.settings.general.nickname', defaultMessage: 'Nickname'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.nicknameExtra'\n                            defaultMessage='Use Nickname for a name you might be called that is different from your first name and username. This is most often used when two or more people have similar sounding names and usernames.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitNickname;\n            }\n\n            nicknameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.nickname)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe: JSX.Element|string = '';\n            if (user.nickname) {\n                describe = user.nickname;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyNickname'\n                        defaultMessage=\"Click 'Edit' to add a nickname\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyNickname'\n                            defaultMessage='Click to add a nickname'\n                        />\n                    );\n                }\n            }\n\n            nicknameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.nickname)}\n                    describe={describe}\n                    section={'nickname'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let usernameSection;\n        if (this.props.activeSection === 'username') {\n            let extraInfo;\n            let submit = null;\n            if (this.props.user.auth_service === '') {\n                let usernameLabel: JSX.Element | string = (\n                    <FormattedMessage\n                        id='user.settings.general.username'\n                        defaultMessage='Username'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    usernameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='usernameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{usernameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='username'\n                                autoFocus={true}\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateUsername}\n                                value={this.state.username}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.username', defaultMessage: 'Username'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.usernameInfo'\n                            defaultMessage='Pick something easy for teammates to recognize and recall.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitUsername;\n            } else {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            }\n\n            usernameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.username)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            usernameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.username)}\n                    describe={this.props.user.username}\n                    section={'username'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let positionSection;\n        if (this.props.activeSection === 'position') {\n            let extraInfo: JSX.Element|string;\n            let submit = null;\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE && this.props.ldapPositionAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlPositionAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let positionLabel: JSX.Element | string = (\n                    <FormattedMessage\n                        id='user.settings.general.position'\n                        defaultMessage='Position'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    positionLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='positionSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{positionLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='position'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updatePosition}\n                                value={this.state.position}\n                                maxLength={Constants.MAX_POSITION_LENGTH}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.position', defaultMessage: 'Position'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.positionExtra'\n                            defaultMessage='Use Position for your role or job title. This will be shown in your profile popover.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitPosition;\n            }\n\n            positionSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.position)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe: JSX.Element|string = '';\n            if (user.position) {\n                describe = user.position;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyPosition'\n                        defaultMessage=\"Click 'Edit' to add your job title / position\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyPosition'\n                            defaultMessage='Click to add your job title / position'\n                        />\n                    );\n                }\n            }\n\n            positionSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.position)}\n                    describe={describe}\n                    section={'position'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        const emailSection = this.createEmailSection();\n\n        let pictureSection;\n        if (this.props.activeSection === 'picture') {\n            let submit = null;\n            let setDefault = null;\n            let helpText = null;\n            let imgSrc = null;\n\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE || this.props.user.auth_service === Constants.SAML_SERVICE) && this.props.ldapPictureAttributeSet) {\n                helpText = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                submit = this.submitPicture;\n                setDefault = user.last_picture_update > 0 ? this.setDefaultProfilePicture : null;\n                imgSrc = Utils.imageURLForUser(user.id, user.last_picture_update);\n                helpText = (\n                    <FormattedMessage\n                        id={'setting_picture.help.profile'}\n                        defaultMessage='Upload a picture in BMP, JPG or PNG format. Maximum file size: {max}'\n                        values={{max: Utils.fileSizeToString(this.props.maxFileSize)}}\n                    />\n                );\n            }\n\n            pictureSection = (\n                <SettingPicture\n                    title={formatMessage(holders.profilePicture)}\n                    onSubmit={submit}\n                    onSetDefault={setDefault}\n                    src={imgSrc}\n                    defaultImageSrc={Utils.defaultImageURLForUser(user.id)}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={(e: MouseEvent) => {\n                        this.updateSection('');\n                        e.preventDefault();\n                    }}\n                    file={this.state.pictureFile}\n                    onFileChange={this.updatePicture}\n                    submitActive={this.submitActive}\n                    loadingPicture={this.state.loadingPicture}\n                    maxFileSize={this.props.maxFileSize}\n                    helpText={helpText}\n                />\n            );\n        } else {\n            let minMessage: JSX.Element|string = formatMessage(holders.uploadImage);\n            if (Utils.isMobile()) {\n                minMessage = formatMessage(holders.uploadImageMobile);\n            }\n            if (user.last_picture_update) {\n                minMessage = (\n                    <FormattedMessage\n                        id='user.settings.general.imageUpdated'\n                        defaultMessage='Image last updated {date}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={new Date(user.last_picture_update)}\n                                    day='2-digit'\n                                    month='short'\n                                    year='numeric'\n                                />\n                            ),\n                        }}\n                    />\n                );\n            }\n            pictureSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.profilePicture)}\n                    describe={minMessage}\n                    section={'picture'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <div id='generalSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeUserSettings'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label={formatMessage(holders.close)}\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title?: string) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='generalSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {nameSection}\n                    <div className='divider-light'/>\n                    {usernameSection}\n                    <div className='divider-light'/>\n                    {nicknameSection}\n                    <div className='divider-light'/>\n                    {positionSection}\n                    <div className='divider-light'/>\n                    {emailSection}\n                    <div className='divider-light'/>\n                    {pictureSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsGeneralTab);\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from 'mattermost-redux/types/store';\n\nimport UserSettings from './user_settings';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        user: getCurrentUser(state),\n    };\n}\n\nexport default connect(mapStateToProps)(UserSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactSelect from 'react-select';\nimport {FormattedMessage} from 'react-intl';\n\nimport semver from 'semver';\n\nimport {NotificationLevels} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport {isDesktopApp} from 'utils/user_agent';\n\nexport default class DesktopNotificationSettings extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        const selectedOption = {value: props.selectedSound, label: props.selectedSound};\n        this.state = {\n            selectedOption,\n            blurDropdown: false,\n        };\n        this.dropdownSoundRef = React.createRef();\n    }\n\n    handleMinUpdateSection = (section) => {\n        this.props.updateSection(section);\n\n        this.props.cancel();\n    }\n\n    handleMaxUpdateSection = (section) => {\n        this.props.updateSection(section);\n    }\n\n    handleOnChange = (e) => {\n        const key = e.currentTarget.getAttribute('data-key');\n        const value = e.currentTarget.getAttribute('data-value');\n        this.props.setParentState(key, value);\n    }\n\n    setDesktopNotificationSound = (selectedOption) => {\n        this.props.setParentState('desktopNotificationSound', selectedOption.value);\n        this.setState({selectedOption});\n        Utils.tryNotificationSound(selectedOption.value);\n    }\n\n    blurDropdown() {\n        if (!this.state.blurDropdown) {\n            this.setState({blurDropdown: true});\n            if (this.dropdownSoundRef.current) {\n                this.dropdownSoundRef.current.blur();\n            }\n        }\n    }\n\n    buildMaximizedSetting = () => {\n        const inputs = [];\n\n        const activityRadio = [false, false, false];\n        if (this.props.activity === NotificationLevels.MENTION) {\n            activityRadio[1] = true;\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            activityRadio[2] = true;\n        } else {\n            activityRadio[0] = true;\n        }\n\n        let soundSection;\n        let notificationSelection;\n        if (this.props.activity !== NotificationLevels.NONE) {\n            const soundRadio = [false, false];\n            if (this.props.sound === 'false') {\n                soundRadio[1] = true;\n            } else {\n                soundRadio[0] = true;\n            }\n\n            if (this.props.sound === 'true') {\n                const sounds = Array.from(Utils.notificationSounds.keys());\n                const options = sounds.map((sound) => {\n                    return {value: sound, label: sound};\n                });\n\n                if (!isDesktopApp() || (window.desktop && semver.gte(window.desktop.version, '4.6.0'))) {\n                    notificationSelection = (<div className='pt-2'>\n                        <ReactSelect\n                            className='react-select notification-sound-dropdown'\n                            classNamePrefix='react-select'\n                            id='displaySoundNotification'\n                            options={options}\n                            clearable={false}\n                            onChange={this.setDesktopNotificationSound}\n                            value={this.state.selectedOption}\n                            isSearchable={false}\n                            ref={this.dropdownSoundRef}\n                        /></div>);\n                }\n            }\n\n            if (Utils.hasSoundOptions()) {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOn'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[0]}\n                                    data-key={'desktopSound'}\n                                    data-value={'true'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOff'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[1]}\n                                    data-key={'desktopSound'}\n                                    data-value={'false'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        {notificationSelection}\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.notifications.sounds_info'\n                                defaultMessage='Notification sounds are available on Firefox, Edge, Safari, Chrome and Mattermost Desktop Apps.'\n                            />\n                        </div>\n                    </fieldset>\n                );\n            } else {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.notifications.soundConfig'\n                            defaultMessage='Please configure notification sounds in your browser settings'\n                        />\n                    </fieldset>\n                );\n            }\n        }\n\n        inputs.push(\n            <div key='userNotificationLevelOption'>\n                <fieldset>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.notifications.desktop'\n                            defaultMessage='Send desktop notifications'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationAllActivity'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[0]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.ALL}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.allActivity'\n                                defaultMessage='For all activity'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationMentions'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[1]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.MENTION}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.onlyMentions'\n                                defaultMessage='Only for mentions and direct messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationNever'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[2]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.NONE}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.never'\n                                defaultMessage='Never'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.notifications.info'\n                            defaultMessage='Desktop notifications are available on Edge, Firefox, Safari, Chrome and Mattermost Desktop Apps.'\n                        />\n                    </div>\n                </fieldset>\n                <hr/>\n                {soundSection}\n            </div>,\n        );\n\n        return (\n            <SettingItemMax\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop Notifications')}\n                inputs={inputs}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                server_error={this.props.error}\n                updateSection={this.handleMaxUpdateSection}\n            />\n        );\n    }\n\n    buildMinimizedSetting = () => {\n        let formattedMessageProps;\n        const hasSoundOption = Utils.hasSoundOptions();\n        if (this.props.activity === NotificationLevels.MENTION) {\n            if (hasSoundOption && this.props.sound !== 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSound'),\n                    defaultMessage: 'For mentions and direct messages, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsNoSound'),\n                    defaultMessage: 'For mentions and direct messages, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSoundHidden'),\n                    defaultMessage: 'For mentions and direct messages',\n                };\n            }\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            formattedMessageProps = {\n                id: t('user.settings.notifications.off'),\n                defaultMessage: 'Off',\n            };\n        } else {\n            if (hasSoundOption && this.props.sound !== 'false') { //eslint-disable-line no-lonely-if\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSound'),\n                    defaultMessage: 'For all activity, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allNoSound'),\n                    defaultMessage: 'For all activity, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSoundHidden'),\n                    defaultMessage: 'For all activity',\n                };\n            }\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop Notifications')}\n                describe={<FormattedMessage {...formattedMessageProps}/>}\n                focused={this.props.focused}\n                section={'desktop'}\n                updateSection={this.handleMinUpdateSection}\n            />\n        );\n    }\n\n    componentDidUpdate() {\n        this.blurDropdown();\n    }\n\n    render() {\n        if (this.props.active) {\n            return this.buildMaximizedSetting();\n        }\n\n        return this.buildMinimizedSetting();\n    }\n}\n\nDesktopNotificationSettings.propTypes = {\n    activity: PropTypes.string.isRequired,\n    sound: PropTypes.string.isRequired,\n    updateSection: PropTypes.func,\n    setParentState: PropTypes.func,\n    submit: PropTypes.func,\n    cancel: PropTypes.func,\n    error: PropTypes.string,\n    active: PropTypes.bool,\n    saving: PropTypes.bool,\n    focused: PropTypes.bool,\n    selectedSound: PropTypes.string,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {getEmailInterval} from 'mattermost-redux/utils/notify_props';\nimport {PreferenceType} from 'mattermost-redux/types/preferences';\n\nimport {Preferences} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nconst SECONDS_PER_MINUTE = 60;\n\ntype Props = {\n    currentUserId: string;\n    activeSection: string;\n    updateSection: (section: string) => void;\n    enableEmail: string;\n    emailInterval: number;\n    onSubmit: () => void;\n    onCancel: () => void;\n    onChange: (enableEmail: string) => void;\n    serverError?: string;\n    saving?: boolean;\n    sendEmailNotifications: boolean;\n    enableEmailBatching: boolean;\n    actions: {\n        savePreferences: (currentUserId: string, emailIntervalPreference: PreferenceType[]) =>\n        Promise<{data: boolean}>;\n    };\n};\n\ntype State = {\n    activeSection: string;\n    emailInterval: number;\n    enableEmail: string;\n    enableEmailBatching: boolean;\n    sendEmailNotifications: boolean;\n    newInterval: number;\n};\n\nexport default class EmailNotificationSetting extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = props;\n\n        this.state = {\n            activeSection,\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            newInterval: getEmailInterval(JSON.parse(enableEmail) && sendEmailNotifications, enableEmailBatching, emailInterval),\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = nextProps;\n\n        // If we're re-opening this section, reset to defaults from props\n        if (activeSection === 'email' && prevState.activeSection !== 'email') {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(JSON.parse(enableEmail) && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        if (sendEmailNotifications !== prevState.sendEmailNotifications ||\n            enableEmailBatching !== prevState.enableEmailBatching ||\n            emailInterval !== prevState.emailInterval ||\n            activeSection !== prevState.activeSection\n        ) {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(JSON.parse(enableEmail) && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        return null;\n    }\n\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const enableEmail = e.currentTarget.getAttribute('data-enable-email')!;\n        const newInterval = parseInt(e.currentTarget.getAttribute('data-email-interval')!, 10);\n\n        this.setState({\n            enableEmail,\n            newInterval,\n        });\n\n        this.props.onChange(enableEmail);\n    }\n\n    handleSubmit = async () => {\n        const {newInterval} = this.state;\n        if (this.props.emailInterval === newInterval && this.props.enableEmail === this.state.enableEmail) {\n            this.props.updateSection('');\n        } else {\n            // until the rest of the notification settings are moved to preferences, we have to do this separately\n            const {currentUserId, actions} = this.props;\n            const emailIntervalPreference = {\n                user_id: currentUserId,\n                category: Preferences.CATEGORY_NOTIFICATIONS,\n                name: Preferences.EMAIL_INTERVAL,\n                value: newInterval.toString(),\n            };\n\n            await actions.savePreferences(currentUserId, [emailIntervalPreference]);\n\n            this.props.onSubmit();\n        }\n    }\n\n    handleUpdateSection = (section?: string) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n\n            this.setState({\n                enableEmail: this.props.enableEmail,\n                newInterval: this.props.emailInterval,\n            });\n            this.props.onCancel();\n        }\n    }\n\n    renderMinSettingView = () => {\n        const {\n            enableEmail,\n            sendEmailNotifications,\n        } = this.props;\n\n        const {newInterval} = this.state;\n\n        let description;\n        if (!sendEmailNotifications) {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.disabled'\n                    defaultMessage='Email notifications are not enabled'\n                />\n            );\n        } else if (enableEmail) {\n            switch (newInterval) {\n            case Preferences.INTERVAL_IMMEDIATE:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.immediately'\n                        defaultMessage='Immediately'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_HOUR:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyHour'\n                        defaultMessage='Every hour'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_FIFTEEN_MINUTES:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyXMinutes'\n                        defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\n                        values={{count: newInterval / SECONDS_PER_MINUTE}}\n                    />\n                );\n                break;\n            default:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.never'\n                        defaultMessage='Never'\n                    />\n                );\n            }\n        } else {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.never'\n                    defaultMessage='Never'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                describe={description}\n                section={'email'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderMaxSettingView = () => {\n        if (!this.props.sendEmailNotifications) {\n            return (\n                <SettingItemMax\n                    title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                    inputs={[\n                        <div\n                            key='oauthEmailInfo'\n                            className='pt-2'\n                        >\n                            <FormattedMessage\n                                id='user.settings.notifications.email.disabled_long'\n                                defaultMessage='Email notifications have not been enabled by your System Administrator.'\n                            />\n                        </div>,\n                    ]}\n                    server_error={this.props.serverError}\n                    section={'email'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const {newInterval} = this.state;\n        let batchingOptions = null;\n        let batchingInfo = null;\n        if (this.props.enableEmailBatching) {\n            batchingOptions = (\n                <fieldset>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationMinutes'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyXMinutes'\n                                defaultMessage='Every {count} minutes'\n                                values={{count: Preferences.INTERVAL_FIFTEEN_MINUTES / SECONDS_PER_MINUTE}}\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationHour'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_HOUR}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_HOUR}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyHour'\n                                defaultMessage='Every hour'\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            batchingInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.emailBatchingInfo'\n                    defaultMessage='Notifications received over the time period selected are combined and sent in a single email.'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                inputs={[\n                    <fieldset key='userNotificationEmailOptions'>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.email.send'\n                                defaultMessage='Send email notifications'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationImmediately'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_IMMEDIATE}\n                                    data-enable-email={'true'}\n                                    data-email-interval={Preferences.INTERVAL_IMMEDIATE}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.immediately'\n                                    defaultMessage='Immediately'\n                                />\n                            </label>\n                        </div>\n                        {batchingOptions}\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationNever'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_NEVER}\n                                    data-enable-email={'false'}\n                                    data-email-interval={Preferences.INTERVAL_NEVER}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.never'\n                                    defaultMessage='Never'\n                                />\n                            </label>\n                        </div>\n                        <div className='mt-3'>\n                            <FormattedMessage\n                                id='user.settings.notifications.emailInfo'\n                                defaultMessage='Email notifications are sent for mentions and direct messages when you are offline or away for more than 5 minutes.'\n                            />\n                            {' '}\n                            {batchingInfo}\n                        </div>\n                    </fieldset>,\n                ]}\n                submit={this.handleSubmit}\n                saving={this.props.saving}\n                server_error={this.props.serverError}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.activeSection !== 'email') {\n            return this.renderMinSettingView();\n        }\n\n        return this.renderMaxSettingView();\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {PreferenceType} from 'mattermost-redux/types/preferences';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport EmailNotificationSetting from './email_notification_setting';\n\ntype Actions = {\n    savePreferences: (currentUserId: string, emailIntervalPreference: PreferenceType[]) =>\n    Promise<{data: boolean}>;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const emailInterval = parseInt(getPreference(\n        state,\n        Preferences.CATEGORY_NOTIFICATIONS,\n        Preferences.EMAIL_INTERVAL,\n        Preferences.INTERVAL_NOT_SET.toString(),\n    ), 10);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        emailInterval,\n        enableEmailBatching: config.EnableEmailBatching === 'true',\n        sendEmailNotifications: config.SendEmailNotifications === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmailNotificationSetting);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsNotifications from './user_settings_notifications.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const sendPushNotifications = config.SendPushNotifications === 'true';\n    const enableAutoResponder = config.ExperimentalEnableAutomaticReplies === 'true';\n\n    return {\n        sendPushNotifications,\n        enableAutoResponder,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({updateMe}, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsNotifications);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport AutosizeTextarea from 'components/autosize_textarea';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nconst MESSAGE_MAX_LENGTH = 200;\n\nexport default class ManageAutoResponder extends React.PureComponent {\n    static propTypes = {\n        autoResponderActive: PropTypes.bool.isRequired,\n        autoResponderMessage: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setParentState: PropTypes.func.isRequired,\n        submit: PropTypes.func.isRequired,\n        saving: PropTypes.bool.isRequired,\n        error: PropTypes.string,\n    };\n\n    handleAutoResponderChecked = (e) => {\n        this.props.setParentState('autoResponderActive', e.target.checked);\n    };\n\n    onMessageChanged = (e) => {\n        this.props.setParentState('autoResponderMessage', e.target.value);\n    };\n\n    render() {\n        const {\n            autoResponderActive,\n            autoResponderMessage,\n        } = this.props;\n\n        let serverError;\n        if (this.props.error) {\n            serverError = <label className='has-error'>{this.props.error}</label>;\n        }\n\n        const inputs = [];\n\n        const activeToggle = (\n            <div\n                id='autoResponderCheckbox'\n                key='autoResponderCheckbox'\n                className='checkbox'\n            >\n                <label>\n                    <input\n                        id='autoResponderActive'\n                        type='checkbox'\n                        checked={autoResponderActive}\n                        onChange={this.handleAutoResponderChecked}\n                    />\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                </label>\n            </div>\n        );\n\n        const message = (\n            <div\n                id='autoResponderMessage'\n                key='autoResponderMessage'\n            >\n                <div className='pt-2'>\n                    <AutosizeTextarea\n                        style={{resize: 'none'}}\n                        id='autoResponderMessageInput'\n                        className='form-control'\n                        rows='5'\n                        placeholder={localizeMessage('user.settings.notifications.autoResponderPlaceholder', 'Message')}\n                        value={autoResponderMessage}\n                        maxLength={MESSAGE_MAX_LENGTH}\n                        onChange={this.onMessageChanged}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(activeToggle);\n        if (autoResponderActive) {\n            inputs.push(message);\n        }\n        inputs.push((\n            <div\n                key='autoResponderHint'\n                className='mt-5'\n            >\n                <FormattedMessage\n                    id='user.settings.notifications.autoResponderHint'\n                    defaultMessage='Set a custom message that will be automatically sent in response to Direct Messages. Mentions in Public and Private Channels will not trigger the automated reply. Enabling Automatic Replies sets your status to Out of Office and disables email and push notifications.'\n                />\n            </div>\n        ));\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic Direct Message Replies'\n                    />\n                }\n                width='medium'\n                shiftEnter={true}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport semver from 'semver';\n\nimport Constants, {NotificationLevels} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport {isDesktopApp} from 'utils/user_agent';\n\nimport DesktopNotificationSettings from './desktop_notification_settings.jsx';\nimport EmailNotificationSetting from './email_notification_setting';\nimport ManageAutoResponder from './manage_auto_responder.jsx';\n\nfunction getNotificationsStateFromProps(props) {\n    const user = props.user;\n\n    let desktop = NotificationLevels.MENTION;\n    let sound = 'true';\n    let desktopNotificationSound = 'Bing';\n    let comments = 'never';\n    let enableEmail = 'true';\n    let pushActivity = NotificationLevels.MENTION;\n    let pushStatus = Constants.UserStatuses.AWAY;\n    let autoResponderActive = false;\n    let autoResponderMessage = Utils.localizeMessage(\n        'user.settings.notifications.autoResponderDefault',\n        'Hello, I am out of office and unable to respond to messages.',\n    );\n\n    if (user.notify_props) {\n        if (user.notify_props.desktop) {\n            desktop = user.notify_props.desktop;\n        }\n        if (user.notify_props.desktop_sound) {\n            sound = user.notify_props.desktop_sound;\n        }\n        if (user.notify_props.desktop_notification_sound) {\n            desktopNotificationSound = user.notify_props.desktop_notification_sound;\n        }\n        if (user.notify_props.comments) {\n            comments = user.notify_props.comments;\n        }\n        if (user.notify_props.email) {\n            enableEmail = user.notify_props.email;\n        }\n        if (user.notify_props.push) {\n            pushActivity = user.notify_props.push;\n        }\n        if (user.notify_props.push_status) {\n            pushStatus = user.notify_props.push_status;\n        }\n\n        if (user.notify_props.auto_responder_active) {\n            autoResponderActive = user.notify_props.auto_responder_active === 'true';\n        }\n\n        if (user.notify_props.auto_responder_message) {\n            autoResponderMessage = user.notify_props.auto_responder_message;\n        }\n    }\n\n    let usernameKey = false;\n    let customKeys = '';\n    let firstNameKey = false;\n    let channelKey = false;\n\n    if (user.notify_props) {\n        if (user.notify_props.mention_keys) {\n            const keys = user.notify_props.mention_keys.split(',');\n\n            if (keys.indexOf(user.username) === -1) {\n                usernameKey = false;\n            } else {\n                usernameKey = true;\n                keys.splice(keys.indexOf(user.username), 1);\n                if (keys.indexOf(`@${user.username}`) !== -1) {\n                    keys.splice(keys.indexOf(`@${user.username}`), 1);\n                }\n            }\n\n            customKeys = keys.join(',');\n        }\n\n        if (user.notify_props.first_name) {\n            firstNameKey = user.notify_props.first_name === 'true';\n        }\n\n        if (user.notify_props.channel) {\n            channelKey = user.notify_props.channel === 'true';\n        }\n    }\n\n    return {\n        desktopActivity: desktop,\n        enableEmail,\n        pushActivity,\n        pushStatus,\n        desktopSound: sound,\n        desktopNotificationSound,\n        usernameKey,\n        customKeys,\n        customKeysChecked: customKeys.length > 0,\n        firstNameKey,\n        channelKey,\n        autoResponderActive,\n        autoResponderMessage,\n        notifyCommentsLevel: comments,\n        isSaving: false,\n    };\n}\n\nexport default class NotificationsTab extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        sendPushNotifications: PropTypes.bool,\n        enableAutoResponder: PropTypes.bool,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: null,\n        activeSection: '',\n        activeTab: '',\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = getNotificationsStateFromProps(props);\n        this.customCheckRef = React.createRef();\n        this.customMentionsRef = React.createRef();\n        this.drawerRef = React.createRef();\n        this.wrapperRef = React.createRef();\n    }\n\n    handleSubmit = () => {\n        const data = {};\n        data.email = this.state.enableEmail;\n        data.desktop_sound = this.state.desktopSound;\n        if (!isDesktopApp() || (window.desktop && semver.gte(window.desktop.version, '4.6.0'))) {\n            data.desktop_notification_sound = this.state.desktopNotificationSound;\n        }\n        data.desktop = this.state.desktopActivity;\n        data.push = this.state.pushActivity;\n        data.push_status = this.state.pushStatus;\n        data.comments = this.state.notifyCommentsLevel;\n        data.auto_responder_active = this.state.autoResponderActive.toString();\n        data.auto_responder_message = this.state.autoResponderMessage;\n\n        if (!data.auto_responder_message || data.auto_responder_message === '') {\n            data.auto_responder_message = Utils.localizeMessage(\n                'user.settings.notifications.autoResponderDefault',\n                'Hello, I am out of office and unable to respond to messages.',\n            );\n        }\n\n        const mentionKeys = [];\n        if (this.state.usernameKey) {\n            mentionKeys.push(this.props.user.username);\n        }\n\n        let stringKeys = mentionKeys.join(',');\n        if (this.state.customKeys.length > 0 && this.state.customKeysChecked) {\n            stringKeys += ',' + this.state.customKeys;\n        }\n\n        data.mention_keys = stringKeys;\n        data.first_name = this.state.firstNameKey.toString();\n        data.channel = this.state.channelKey.toString();\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe({notify_props: data}).\n            then(({data: result, error: err}) => {\n                if (result) {\n                    this.handleUpdateSection('');\n                    this.setState(getNotificationsStateFromProps(this.props));\n                } else if (err) {\n                    this.setState({serverError: err.message, isSaving: false});\n                }\n            });\n    }\n\n    handleCancel = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n        this.setState(getNotificationsStateFromProps(this.props));\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n        }\n        this.setState({isSaving: false});\n        this.handleCancel();\n    };\n\n    setStateValue = (key, value) => {\n        const data = {};\n        data[key] = value;\n        this.setState(data);\n    }\n\n    handleNotifyCommentsRadio(notifyCommentsLevel) {\n        this.setState({notifyCommentsLevel});\n    }\n\n    handlePushRadio(pushActivity) {\n        this.setState({pushActivity});\n    }\n\n    handlePushStatusRadio(pushStatus) {\n        this.setState({pushStatus});\n    }\n\n    handleEmailRadio = (enableEmail) => {\n        this.setState({enableEmail});\n    }\n\n    updateUsernameKey = (val) => {\n        this.setState({usernameKey: val});\n    }\n\n    updateFirstNameKey = (val) => {\n        this.setState({firstNameKey: val});\n    }\n\n    updateChannelKey = (val) => {\n        this.setState({channelKey: val});\n    }\n\n    updateCustomMentionKeys = () => {\n        const checked = this.customCheckRef.current.checked;\n\n        if (checked) {\n            const text = this.customMentionsRef.current.value;\n\n            // remove all spaces and split string into individual keys\n            this.setState({customKeys: text.replace(/ /g, ''), customKeysChecked: true});\n        } else {\n            this.setState({customKeys: '', customKeysChecked: false});\n        }\n    }\n\n    onCustomChange = () => {\n        this.customCheckRef.current.checked = true;\n        this.updateCustomMentionKeys();\n    }\n\n    createPushNotificationSection = () => {\n        if (this.props.activeSection === 'push') {\n            const inputs = [];\n            let extraInfo = null;\n            let submit = null;\n\n            if (this.props.sendPushNotifications) {\n                const pushActivityRadio = [false, false, false];\n                if (this.state.pushActivity === NotificationLevels.ALL) {\n                    pushActivityRadio[0] = true;\n                } else if (this.state.pushActivity === NotificationLevels.NONE) {\n                    pushActivityRadio[2] = true;\n                } else {\n                    pushActivityRadio[1] = true;\n                }\n\n                const pushStatusRadio = [false, false, false];\n                if (this.state.pushStatus === Constants.UserStatuses.ONLINE) {\n                    pushStatusRadio[0] = true;\n                } else if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                    pushStatusRadio[1] = true;\n                } else {\n                    pushStatusRadio[2] = true;\n                }\n\n                let pushStatusSettings;\n                if (this.state.pushActivity !== NotificationLevels.NONE) {\n                    pushStatusSettings = (\n                        <fieldset>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.notifications.push_notification.status'\n                                    defaultMessage='Trigger push notifications when'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOnline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[0]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.ONLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.online'\n                                        defaultMessage='Online, away or offline'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAway'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[1]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.AWAY)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.away'\n                                        defaultMessage='Away or offline'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOffline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[2]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.OFFLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.offline'\n                                        defaultMessage='Offline'\n                                    />\n                                </label>\n                            </div>\n                        </fieldset>\n                    );\n\n                    extraInfo = (\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.push_notification.status_info'\n                                defaultMessage='Notification alerts are only pushed to your mobile device when your online status matches the selection above.'\n                            />\n                        </span>\n                    );\n                }\n\n                inputs.push(\n                    <div>\n                        <fieldset key='userNotificationLevelOption'>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.send'\n                                    defaultMessage='Send mobile push notifications'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAllActivity'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[0]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.ALL)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.allActivity'\n                                        defaultMessage='For all activity'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationMentions'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[1]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.MENTION)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.onlyMentions'\n                                        defaultMessage='For mentions and direct messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationNever'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[2]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.NONE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.notifications.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.info'\n                                    defaultMessage='Notification alerts are pushed to your mobile device when there is activity in Mattermost.'\n                                />\n                            </div>\n                        </fieldset>\n                        <hr/>\n                        {pushStatusSettings}\n                    </div>,\n                );\n\n                submit = this.handleSubmit;\n            } else {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pt-2'\n                    >\n                        <FormattedMessage\n                            id='user.settings.push_notification.disabled_long'\n                            defaultMessage='Push notifications have not been enabled by your System Administrator.'\n                        />\n                    </div>,\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile Push Notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={submit}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = '';\n        if (this.state.pushActivity === NotificationLevels.ALL) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityAway'\n                        defaultMessage='For all activity when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOffline'\n                        defaultMessage='For all activity when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOnline'\n                        defaultMessage='For all activity when online, away or offline'\n                    />\n                );\n            }\n        } else if (this.state.pushActivity === NotificationLevels.NONE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.never'\n                    defaultMessage='Never'\n                />\n            );\n        } else if (this.props.sendPushNotifications) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) { //eslint-disable-line no-lonely-if\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsAway'\n                        defaultMessage='For mentions and direct messages when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOffline'\n                        defaultMessage='For mentions and direct messages when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOnline'\n                        defaultMessage='For mentions and direct messages when online, away or offline'\n                    />\n                );\n            }\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.push_notification.disabled'\n                    defaultMessage='Push notifications are not enabled'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile Push Notifications')}\n                describe={describe}\n                section={'push'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const serverError = this.state.serverError;\n        const user = this.props.user;\n\n        let keysSection;\n        if (this.props.activeSection === 'keys') {\n            const inputs = [];\n\n            if (user.first_name) {\n                const handleUpdateFirstNameKey = (e) => {\n                    this.updateFirstNameKey(e.target.checked);\n                };\n                inputs.push(\n                    <div key='userNotificationFirstNameOption'>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='notificationTriggerFirst'\n                                    type='checkbox'\n                                    checked={this.state.firstNameKey}\n                                    onChange={handleUpdateFirstNameKey}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.sensitiveName'\n                                    defaultMessage='Your case sensitive first name \"{first_name}\"'\n                                    values={{\n                                        first_name: user.first_name,\n                                    }}\n                                />\n                            </label>\n                        </div>\n                    </div>,\n                );\n            }\n\n            const handleUpdateUsernameKey = (e) => {\n                this.updateUsernameKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationUsernameOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerUsername'\n                                type='checkbox'\n                                checked={this.state.usernameKey}\n                                onChange={handleUpdateUsernameKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveUsername'\n                                defaultMessage='Your non case-sensitive username \"{username}\"'\n                                values={{\n                                    username: user.username,\n                                }}\n                            />\n                        </label>\n                    </div>\n                </div>,\n            );\n\n            const handleUpdateChannelKey = (e) => {\n                this.updateChannelKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationChannelOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerShouts'\n                                type='checkbox'\n                                checked={this.state.channelKey}\n                                onChange={handleUpdateChannelKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.channelWide'\n                                defaultMessage='Channel-wide mentions \"@channel\", \"@all\", \"@here\"'\n                            />\n                        </label>\n                    </div>\n                </div>,\n            );\n\n            inputs.push(\n                <div key='userNotificationCustomOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerCustom'\n                                ref={this.customCheckRef}\n                                type='checkbox'\n                                checked={this.state.customKeysChecked}\n                                onChange={this.updateCustomMentionKeys}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveWords'\n                                defaultMessage='Other non-case sensitive words, separated by commas:'\n                            />\n                        </label>\n                    </div>\n                    <input\n                        id='notificationTriggerCustomText'\n                        autoFocus={this.state.customKeysChecked}\n                        ref={this.customMentionsRef}\n                        className='form-control mentions-input'\n                        type='text'\n                        defaultValue={this.state.customKeys}\n                        onChange={this.onCustomChange}\n                        onFocus={Utils.moveCursorToEnd}\n                        aria-labelledby='notificationTriggerCustom'\n                    />\n                </div>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.mentionsInfo'\n                        defaultMessage='Mentions trigger when someone sends a message that includes your username (@{username}) or any of the options selected above.'\n                        values={{\n                            username: user.username,\n                        }}\n                    />\n                </span>\n            );\n\n            keysSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words That Trigger Mentions')}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let keys = ['@' + user.username];\n            if (this.state.firstNameKey) {\n                keys.push(user.first_name);\n            }\n            if (this.state.usernameKey) {\n                keys.push(user.username);\n            }\n\n            if (this.state.channelKey) {\n                keys.push('@channel');\n                keys.push('@all');\n                keys.push('@here');\n            }\n            if (this.state.customKeys.length > 0) {\n                keys = keys.concat(this.state.customKeys.split(','));\n            }\n\n            let describe = '';\n            for (let i = 0; i < keys.length; i++) {\n                if (keys[i] !== '') {\n                    describe += '\"' + keys[i] + '\", ';\n                }\n            }\n\n            if (describe.length > 0) {\n                describe = describe.substring(0, describe.length - 2);\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.noWords'\n                        defaultMessage='No words configured'\n                    />\n                );\n            }\n\n            keysSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words That Trigger Mentions')}\n                    describe={describe}\n                    section={'keys'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let commentsSection;\n        if (this.props.activeSection === 'comments') {\n            const commentsActive = [false, false, false];\n            if (this.state.notifyCommentsLevel === 'never') {\n                commentsActive[2] = true;\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                commentsActive[1] = true;\n            } else {\n                commentsActive[0] = true;\n            }\n\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='userNotificationLevelOption'>\n                    <legend className='form-legend hidden-label'>\n                        {Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsAny'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[0]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'any')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsAny'\n                                defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsRoot'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[1]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'root')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsRoot'\n                                defaultMessage='Trigger notifications on messages in threads that I start'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsNever'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[2]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'never')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsNever'\n                                defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                            />\n                        </label>\n                    </div>\n                </fieldset>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsInfo'\n                        defaultMessage=\"In addition to notifications for when you're mentioned, select if you would like to receive notifications on reply threads.\"\n                    />\n                </span>\n            );\n\n            commentsSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.state.notifyCommentsLevel === 'never') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsNever'\n                        defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                    />\n                );\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsRoot'\n                        defaultMessage='Trigger notifications on messages in threads that I start'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsAny'\n                        defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                    />\n                );\n            }\n\n            commentsSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    describe={describe}\n                    section={'comments'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let autoResponderSection;\n        if (this.props.enableAutoResponder) {\n            if (this.props.activeSection === 'auto-responder') {\n                autoResponderSection = (\n                    <div>\n                        <ManageAutoResponder\n                            autoResponderActive={this.state.autoResponderActive}\n                            autoResponderMessage={this.state.autoResponderMessage}\n                            updateSection={this.handleUpdateSection}\n                            setParentState={this.setStateValue}\n                            submit={this.handleSubmit}\n                            error={this.state.serverError}\n                            saving={this.state.isSaving}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                const describe = this.state.autoResponderActive ? (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderDisabled'\n                        defaultMessage='Disabled'\n                    />\n                );\n\n                autoResponderSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.notifications.autoResponder'\n                                defaultMessage='Automatic Direct Message Replies'\n                            />\n                        }\n                        width='medium'\n                        describe={describe}\n                        section={'auto-responder'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        const pushNotificationSection = this.createPushNotificationSection();\n\n        return (\n            <div id='notificationSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref={this.drawerRef}\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.notifications.title'\n                            defaultMessage='Notification Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    ref={this.wrapperRef}\n                    className='user-settings'\n                >\n                    <h3\n                        id='notificationSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.notifications.header'\n                            defaultMessage='Notifications'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    <DesktopNotificationSettings\n                        activity={this.state.desktopActivity}\n                        sound={this.state.desktopSound}\n                        updateSection={this.handleUpdateSection}\n                        setParentState={this.setStateValue}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        cancel={this.handleCancel}\n                        error={this.state.serverError}\n                        active={this.props.activeSection === 'desktop'}\n                        selectedSound={this.state.desktopNotificationSound}\n                    />\n                    <div className='divider-light'/>\n                    <EmailNotificationSetting\n                        activeSection={this.props.activeSection}\n                        updateSection={this.handleUpdateSection}\n                        enableEmail={this.state.enableEmail === 'true'}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        onChange={this.handleEmailRadio}\n                        saving={this.state.isSaving}\n                        serverError={this.state.serverError}\n                    />\n                    <div className='divider-light'/>\n                    {pushNotificationSection}\n                    <div className='divider-light'/>\n                    {keysSection}\n                    <div className='divider-light'/>\n                    {commentsSection}\n                    <div className='divider-light'/>\n                    {autoResponderSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\nimport {getMe, updateUserPassword} from 'mattermost-redux/actions/users';\nimport {getAuthorizedOAuthApps, deauthorizeOAuthApp} from 'mattermost-redux/actions/integrations';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\nimport {Preferences} from 'utils/constants';\n\nimport SecurityTab from './user_settings_security';\n\ntype Actions = {\n    getMe: () => void;\n    updateUserPassword: (userId: string, currentPassword: string, newPassword: string) => Promise<ActionResult>;\n    getAuthorizedOAuthApps: () => Promise<ActionResult>;\n    deauthorizeOAuthApp: (clientId: string) => Promise<ActionResult>;\n};\n\ntype Props = {\n    user: UserProfile;\n    activeSection?: string;\n    updateSection: (section: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setRequireConfirm: () => void;\n};\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const config = getConfig(state);\n\n    const tokensEnabled = config.EnableUserAccessTokens === 'true';\n    const userHasTokenRole = UserUtils.hasUserAccessTokenRole(ownProps.user.roles) || UserUtils.isSystemAdmin(ownProps.user.roles);\n\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOpenId = config.EnableSignUpWithOpenId === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    return {\n        canUseAccessTokens: tokensEnabled && userHasTokenRole,\n        enableOAuthServiceProvider,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOpenId,\n        enableLdap,\n        enableSaml,\n        enableSignUpWithOffice365,\n        experimentalEnableAuthenticationTransfer,\n        passwordConfig: getPasswordConfig(config),\n        militaryTime: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getMe,\n            updateUserPassword,\n            getAuthorizedOAuthApps,\n            deauthorizeOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SecurityTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport {deactivateMfa} from 'actions/views/mfa';\nimport Constants from 'utils/constants';\n\nimport MfaSection from './mfa_section';\n\ntype Actions = {\n    deactivateMfa: () => Promise<{error?: {message: string}}>;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const mfaLicensed = license && license.IsLicensed === 'true' && license.MFA === 'true';\n    const mfaEnabled = config.EnableMultifactorAuthentication === 'true';\n    const mfaEnforced = mfaLicensed && config.EnforceMultifactorAuthentication === 'true';\n    const user: UserProfile = getCurrentUser(state);\n    let mfaActive = false;\n    let mfaAvailable = false;\n    if (user) {\n        mfaActive = (user as any).mfa_active;\n        mfaAvailable = mfaEnabled && (user.auth_service === '' || user.auth_service === Constants.LDAP_SERVICE);\n    }\n    return {\n        mfaActive,\n        mfaAvailable,\n        mfaEnforced,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            deactivateMfa,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MfaSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport {browserHistory} from 'utils/browser_history';\n\nconst SECTION_MFA = 'mfa';\n\ntype Props = {\n    active: boolean;\n\n    // Whether or not the current user has MFA enabled\n    mfaActive: boolean;\n\n    // Whether or not the current user can enable MFA based on their authentication type and the server's settings\n    mfaAvailable: boolean;\n\n    // Whether or not this server enforces that all users have MFA\n    mfaEnforced: boolean;\n\n    updateSection: (section: string) => void;\n    actions: {deactivateMfa: () => Promise<{error?: {message: string}}>};\n}\n\ntype State = {\n    serverError: string|null;\n}\n\nexport default class MfaSection extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            serverError: null,\n        };\n    }\n\n    public setupMfa = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        browserHistory.push('/mfa/setup');\n    };\n\n    public removeMfa = async (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        const {error} = await this.props.actions.deactivateMfa();\n\n        if (error) {\n            this.setState({\n                serverError: error.message,\n            });\n            return;\n        }\n\n        if (this.props.mfaEnforced) {\n            browserHistory.push('/mfa/setup');\n            return;\n        }\n\n        this.props.updateSection('');\n        this.setState({\n            serverError: null,\n        });\n    };\n\n    private renderTitle = () => {\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.title'\n                defaultMessage='Multi-factor Authentication'\n            />\n        );\n    };\n\n    private renderDescription = () => {\n        if (this.props.mfaActive) {\n            return (\n                <FormattedMessage\n                    id='user.settings.security.active'\n                    defaultMessage='Active'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.security.inactive'\n                defaultMessage='Inactive'\n            />\n        );\n    };\n\n    private renderContent = () => {\n        let content;\n\n        if (this.props.mfaActive) {\n            let buttonText;\n\n            if (this.props.mfaEnforced) {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.reset'\n                        defaultMessage='Reset MFA on Account'\n                    />\n                );\n            } else {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.remove'\n                        defaultMessage='Remove MFA from Account'\n                    />\n                );\n            }\n\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.removeMfa}\n                >\n                    {buttonText}\n                </a>\n            );\n        } else {\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.setupMfa}\n                >\n                    <FormattedMessage\n                        id='user.settings.mfa.add'\n                        defaultMessage='Add MFA to Account'\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div className='pt-2'>\n                {content}\n                <br/>\n            </div>\n        );\n    };\n\n    private renderHelpText = () => {\n        if (this.props.mfaActive) {\n            if (this.props.mfaEnforced) {\n                return (\n                    <FormattedMessage\n                        id='user.settings.mfa.requiredHelp'\n                        defaultMessage='Multi-factor authentication is required on this server. Resetting is only recommended when you need to switch code generation to a new mobile device. You will be required to set it up again immediately.'\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='user.settings.mfa.removeHelp'\n                    defaultMessage='Removing multi-factor authentication means you will no longer require a phone-based passcode to sign-in to your account.'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.addHelp'\n                defaultMessage='Adding multi-factor authentication will make your account more secure by requiring a code from your mobile phone each time you sign in.'\n            />\n        );\n    };\n\n    public render() {\n        const title = this.renderTitle();\n\n        if (!this.props.mfaAvailable) {\n            return null;\n        }\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section={SECTION_MFA}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={this.renderContent()}\n                extraInfo={this.renderHelpText()}\n                serverError={this.state.serverError}\n                updateSection={this.props.updateSection}\n                width='medium'\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\nimport {\n    clearUserAccessTokens,\n    createUserAccessToken,\n    getUserAccessTokensForUser,\n    revokeUserAccessToken,\n    enableUserAccessToken,\n    disableUserAccessToken,\n} from 'mattermost-redux/actions/users';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport UserAccessTokenSection from './user_access_token_section';\n\ntype Actions = {\n    getUserAccessTokensForUser: (userId: string, page: number, perPage: number) => void;\n    createUserAccessToken: (userId: string, description: string) => Promise<{\n        data: {token: string; description: string; id: string; is_active: boolean} | null;\n        error?: {\n            message: string;\n        };\n    }>;\n    revokeUserAccessToken: (tokenId: string) => Promise<{\n        data: string;\n        error?: {\n            message: string;\n        };\n    }>;\n    enableUserAccessToken: (tokenId: string) => Promise<{\n        data: string;\n        error?: {\n            message: string;\n        };\n    }>;\n    disableUserAccessToken: (tokenId: string) => Promise<{\n        data: string;\n        error?: {\n            message: string;\n        };\n    }>;\n    clearUserAccessTokens: () => void;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        userAccessTokens: state.entities.users.myUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getUserAccessTokensForUser,\n            createUserAccessToken,\n            revokeUserAccessToken,\n            enableUserAccessToken,\n            disableUserAccessToken,\n            clearUserAccessTokens,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAccessTokenSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {UserProfile} from 'mattermost-redux/types/users';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport Constants from 'utils/constants';\nimport {isMobile} from 'utils/user_agent';\nimport * as Utils from 'utils/utils.jsx';\nimport ConfirmModal from 'components/confirm_modal';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SaveButton from 'components/save_button';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nconst SECTION_TOKENS = 'tokens';\nconst TOKEN_CREATING = 'creating';\nconst TOKEN_CREATED = 'created';\nconst TOKEN_NOT_CREATING = 'not_creating';\n\ntype Props = {\n    user: UserProfile;\n    active?: boolean;\n    updateSection: (section: string) => void;\n    userAccessTokens: {[tokenId: string]: {description: string; id: string; is_active: boolean}};\n    setRequireConfirm: (isRequiredConfirm: boolean, confirmCopyToken: (confirmAction: () => void) => void) => void;\n    actions: {\n        getUserAccessTokensForUser: (userId: string, page: number, perPage: number) => void;\n        createUserAccessToken: (userId: string, description: string) => Promise<{\n            data: {token: string; description: string; id: string; is_active: boolean} | null;\n            error?: {\n                message: string;\n            };\n        }>;\n        revokeUserAccessToken: (tokenId: string) => Promise<{\n            data: string;\n            error?: {\n                message: string;\n            };\n        }>;\n        enableUserAccessToken: (tokenId: string) => Promise<{\n            data: string;\n            error?: {\n                message: string;\n            };\n        }>;\n        disableUserAccessToken: (tokenId: string) => Promise<{\n            data: string;\n            error?: {\n                message: string;\n            };\n        }>;\n        clearUserAccessTokens: () => void;\n    };\n}\n\ntype State = {\n    active?: boolean;\n    showConfirmModal: boolean;\n    newToken?: {token: string; description: string; id: string; is_active: boolean} | null;\n    tokenCreationState?: string;\n    tokenError?: string;\n    serverError?: string|null;\n    saving?: boolean;\n    confirmTitle?: React.ReactNode;\n    confirmMessage?: ((state: State) => JSX.Element)|null;\n    confirmButton?: React.ReactNode;\n    confirmComplete?: (() => void)|null;\n    confirmHideCancel?: boolean;\n}\n\nexport default class UserAccessTokenSection extends React.PureComponent<Props, State> {\n    private newtokendescriptionRef: React.RefObject<HTMLInputElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active: this.props.active,\n            showConfirmModal: false,\n            newToken: null,\n            tokenCreationState: TOKEN_NOT_CREATING,\n            tokenError: '',\n            serverError: null,\n            saving: false,\n        };\n        this.newtokendescriptionRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.props.actions.clearUserAccessTokens();\n        const userId = this.props.user ? this.props.user.id : '';\n        this.props.actions.getUserAccessTokensForUser(userId, 0, 200);\n    }\n\n    static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n        if (!nextProps.active && prevState.active) {\n            return {\n                active: nextProps.active,\n                showConfirmModal: false,\n                newToken: null,\n                tokenCreationState: TOKEN_NOT_CREATING,\n                tokenError: '',\n                serverError: null,\n                saving: false,\n            };\n        }\n        return {active: nextProps.active};\n    }\n\n    startCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_CREATING});\n    }\n\n    stopCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_NOT_CREATING, saving: false});\n    }\n\n    handleCreateToken = async () => {\n        this.handleCancelConfirm();\n\n        const description = this.newtokendescriptionRef ? this.newtokendescriptionRef.current!.value : '';\n\n        if (description === '') {\n            this.setState({tokenError: Utils.localizeMessage('user.settings.tokens.nameRequired', 'Please enter a description.')});\n            return;\n        }\n\n        this.setState({tokenError: '', saving: true});\n        this.props.setRequireConfirm(true, this.confirmCopyToken);\n\n        const userId = this.props.user ? this.props.user.id : '';\n        const {data, error} = await this.props.actions.createUserAccessToken(userId, description);\n\n        if (data && this.state.tokenCreationState === TOKEN_CREATING) {\n            this.setState({tokenCreationState: TOKEN_CREATED, newToken: data, saving: false});\n        } else if (error) {\n            this.setState({serverError: error.message, saving: false});\n        }\n    }\n\n    confirmCopyToken = (confirmAction: () => void) => {\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyTitle'\n                    defaultMessage='Copied Your Token?'\n                />\n            ),\n            confirmMessage: (state: State) => (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.tokens.confirmCopyMessage'\n                        defaultMessage=\"Make sure you have copied and saved the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    {state.tokenCreationState === TOKEN_CREATING ? (\n                        <div>\n                            <strong className='word-break--all'>\n                                <FormattedMessage\n                                    id='user.settings.tokens.token'\n                                    defaultMessage='Access Token: '\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='user.settings.tokens.tokenLoading'\n                                defaultMessage='Loading...'\n                            />\n                        </div>\n                    ) : (\n                        <strong className='word-break--all'>\n                            <FormattedMessage\n                                id='user.settings.tokens.token'\n                                defaultMessage='Access Token: '\n                            />\n                            {state.newToken!.token}\n                        </strong>\n                    )}\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyButton'\n                    defaultMessage='Yes, I have copied the token'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCancelConfirm();\n                confirmAction();\n            },\n            confirmHideCancel: true,\n        });\n    }\n\n    handleCancelConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            confirmTitle: null,\n            confirmMessage: null,\n            confirmButton: null,\n            confirmComplete: null,\n            confirmHideCancel: false,\n        });\n    }\n\n    confirmCreateToken = () => {\n        if (!UserUtils.isSystemAdmin(this.props.user!.roles)) {\n            this.handleCreateToken();\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateTitle'\n                    defaultMessage='Create System Admin Personal Access Token'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMessage\n                        id='user.settings.tokens.confirmCreateMessage'\n                        defaultMessage='You are generating a personal access token with System Admin permissions. Are you sure want to create this token?'\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateButton'\n                    defaultMessage='Yes, Create'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCreateToken();\n                trackEvent('settings', 'system_admin_create_user_access_token');\n            },\n        });\n    }\n\n    saveTokenKeyPress = (e: React.KeyboardEvent) => {\n        if (Utils.isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.confirmCreateToken();\n        }\n    }\n\n    confirmRevokeToken = (tokenId: string) => {\n        const token = this.props.userAccessTokens[tokenId];\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteTitle'\n                    defaultMessage='Delete Token?'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.confirmDeleteMessage'\n                        defaultMessage='Any integrations using this token will no longer be able to access the Mattermost API. You cannot undo this action. \\n \\nAre you sure want to delete the **{description}** token?'\n                        values={{\n                            description: token.description,\n                        }}\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteButton'\n                    defaultMessage='Yes, Delete'\n                />\n            ),\n            confirmComplete: () => {\n                this.revokeToken(tokenId);\n                trackEvent('settings', 'revoke_user_access_token');\n            },\n        });\n    }\n\n    revokeToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.revokeUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n        this.handleCancelConfirm();\n    }\n\n    activateToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.enableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'activate_user_access_token');\n        }\n    }\n\n    deactivateToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.disableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'deactivate_user_access_token');\n        }\n    }\n\n    render() {\n        let tokenListClass = '';\n\n        if (!this.props.active) {\n            const describe = Utils.localizeMessage('user.settings.tokens.clickToEdit', \"Click 'Edit' to manage your personal access tokens\");\n\n            return (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    describe={describe}\n                    section={SECTION_TOKENS}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        const tokenList: JSX.Element[] = [];\n        Object.values(this.props.userAccessTokens).forEach((token) => {\n            if (this.state.newToken && this.state.newToken.id === token.id) {\n                return;\n            }\n\n            let activeLink: JSX.Element;\n            let activeStatus;\n\n            if (token.is_active) {\n                activeLink = (\n                    <a\n                        id={token.id + '_deactivate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.deactivateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivate'\n                            defaultMessage='Disable'\n                        />\n                    </a>);\n            } else {\n                activeStatus = (\n                    <span className='has-error setting-box__inline-error'>\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivatedWarning'\n                            defaultMessage='(Disabled)'\n                        />\n                    </span>\n                );\n                activeLink = (\n                    <a\n                        id={token.id + '_activate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.activateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.activate'\n                            defaultMessage='Enable'\n                        />\n                    </a>\n                );\n            }\n\n            tokenList.push(\n                <div\n                    key={token.id}\n                    className='setting-box__item'\n                >\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenDesc'\n                            defaultMessage='Token Description: '\n                        />\n                        {token.description}\n                        {activeStatus}\n                    </div>\n                    <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenId'\n                            defaultMessage='Token ID: '\n                        />\n                        {token.id}\n                    </div>\n                    <div>\n                        {activeLink}\n                        {' - '}\n                        <a\n                            id={token.id + '_delete'}\n                            href='#'\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.confirmRevokeToken(token.id);\n                            }}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                    <hr className='mb-3 mt-3'/>\n                </div>,\n            );\n        });\n\n        let noTokenText;\n        if (tokenList.length === 0) {\n            noTokenText = (\n                <FormattedMessage\n                    key='notokens'\n                    id='user.settings.tokens.userAccessTokensNone'\n                    defaultMessage='No personal access tokens.'\n                />\n            );\n        }\n\n        let extraInfo;\n        if (isMobile()) {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description_mobile'\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication). Create new tokens on your desktop.'\n                    />\n                </span>\n            );\n        } else {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description'\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication).'\n                    />\n                </span>\n            );\n        }\n\n        let newTokenSection;\n        if (this.state.tokenCreationState === TOKEN_CREATING) {\n            newTokenSection = (\n                <div className='pl-3'>\n                    <div className='row'>\n                        <label className='col-sm-auto control-label pr-3'>\n                            <FormattedMessage\n                                id='user.settings.tokens.name'\n                                defaultMessage='Token Description: '\n                            />\n                        </label>\n                        <div className='col-sm-5'>\n                            <input\n                                autoFocus={true}\n                                ref={this.newtokendescriptionRef}\n                                className='form-control'\n                                type='text'\n                                maxLength={64}\n                                onKeyPress={this.saveTokenKeyPress}\n                            />\n                        </div>\n                    </div>\n                    <div>\n                        <div className='pt-3'>\n                            <FormattedMessage\n                                id='user.settings.tokens.nameHelp'\n                                defaultMessage='Enter a description for your token to remember what it does.'\n                            />\n                        </div>\n                        <div>\n                            <label\n                                id='clientError'\n                                className='has-error mt-2 mb-2'\n                            >\n                                {this.state.tokenError}\n                            </label>\n                        </div>\n                        <SaveButton\n                            btnClass='btn-primary'\n                            savingMessage={\n                                <FormattedMessage\n                                    id='user.settings.tokens.save'\n                                    defaultMessage='Save'\n                                />\n                            }\n                            saving={this.state.saving}\n                            onClick={this.confirmCreateToken}\n                        />\n                        <button\n                            className='btn btn-link'\n                            onClick={this.stopCreatingToken}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.state.tokenCreationState === TOKEN_CREATED) {\n            if (tokenList.length === 0) {\n                tokenListClass = ' hidden';\n            }\n\n            newTokenSection = (\n                <div\n                    className='alert alert-warning'\n                >\n                    <WarningIcon additionalClassName='mr-2'/>\n                    <FormattedMessage\n                        id='user.settings.tokens.copy'\n                        defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.name'\n                            defaultMessage='Token Description: '\n                        />\n                        {this.state.newToken!.description}\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.id'\n                            defaultMessage='Token ID: '\n                        />\n                        {this.state.newToken!.id}\n                    </div>\n                    <strong className='word-break--all'>\n                        <FormattedMessage\n                            id='user.settings.tokens.token'\n                            defaultMessage='Access Token: '\n                        />\n                        {this.state.newToken!.token}\n                    </strong>\n                </div>\n            );\n        } else {\n            newTokenSection = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.startCreatingToken}\n                >\n                    <FormattedMessage\n                        id='user.settings.tokens.create'\n                        defaultMessage='Create Token'\n                    />\n                </a>\n            );\n        }\n\n        const inputs = [];\n        inputs.push(\n            <div\n                key='tokensSetting'\n                className='pt-2'\n            >\n                <div key='tokenList'>\n                    <div className={'alert alert-transparent' + tokenListClass}>\n                        {tokenList}\n                        {noTokenText}\n                    </div>\n                    {newTokenSection}\n                </div>\n            </div>,\n        );\n\n        return (\n            <div>\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    inputs={inputs}\n                    extraInfo={extraInfo}\n                    infoPosition='top'\n                    serverError={this.state.serverError}\n                    updateSection={this.props.updateSection}\n                    width='full'\n                    saving={this.state.saving}\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n                <ConfirmModal\n                    title={this.state.confirmTitle}\n                    message={this.state.confirmMessage ? this.state.confirmMessage(this.state) : null}\n                    confirmButtonText={this.state.confirmButton}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.state.confirmComplete || (() => null)}\n                    onCancel={this.handleCancelConfirm}\n                    hideCancel={this.state.confirmHideCancel}\n                />\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {ActionResult} from 'mattermost-redux/types/actions';\nimport {OAuthApp} from 'mattermost-redux/types/integrations';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport icon50 from 'images/icon50x50.png';\nimport AccessHistoryModal from 'components/access_history_modal';\nimport ActivityLogModal from 'components/activity_log_modal';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ToggleModalButton from 'components/toggle_modal_button.jsx';\n\nimport MfaSection from './mfa_section';\nimport UserAccessTokenSection from './user_access_token_section';\n\nconst SECTION_MFA = 'mfa';\nconst SECTION_PASSWORD = 'password';\nconst SECTION_SIGNIN = 'signin';\nconst SECTION_APPS = 'apps';\nconst SECTION_TOKENS = 'tokens';\n\ntype Actions = {\n    getMe: () => void;\n    updateUserPassword: (\n        userId: string,\n        currentPassword: string,\n        newPassword: string\n    ) => Promise<ActionResult>;\n    getAuthorizedOAuthApps: () => Promise<ActionResult>;\n    deauthorizeOAuthApp: (clientId: string) => Promise<ActionResult>;\n};\n\ntype Props = {\n    user: UserProfile;\n    activeSection?: string;\n    updateSection: (section: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setRequireConfirm: () => void;\n    canUseAccessTokens: boolean;\n    enableOAuthServiceProvider: boolean;\n    enableSignUpWithEmail: boolean;\n    enableSignUpWithGitLab: boolean;\n    enableSignUpWithGoogle: boolean;\n    enableSignUpWithOpenId: boolean;\n    enableLdap: boolean;\n    enableSaml: boolean;\n    enableSignUpWithOffice365: boolean;\n    experimentalEnableAuthenticationTransfer: boolean;\n    passwordConfig: Record<string, unknown>;\n    militaryTime: boolean;\n    actions: Actions;\n};\n\ntype State = {\n    currentPassword: string;\n    newPassword: string;\n    confirmPassword: string;\n    passwordError: React.ReactNode;\n    serverError: string | null;\n    tokenError: string;\n    savingPassword: boolean;\n    authorizedApps: OAuthApp[];\n};\n\nexport default class SecurityTab extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = this.getDefaultState();\n    }\n\n    getDefaultState() {\n        return {\n            currentPassword: '',\n            newPassword: '',\n            confirmPassword: '',\n            passwordError: '',\n            serverError: '',\n            tokenError: '',\n            authService: this.props.user.auth_service,\n            savingPassword: false,\n            authorizedApps: [],\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            this.loadAuthorizedOAuthApps();\n        }\n    }\n\n    loadAuthorizedOAuthApps = async () => {\n        const res = await this.props.actions.getAuthorizedOAuthApps();\n        if ('data' in res) {\n            const {data} = res;\n            this.setState({authorizedApps: data, serverError: null}); //eslint-disable-line react/no-did-mount-set-state\n        } else if ('error' in res) {\n            const {error} = res;\n            this.setState({serverError: error.message}); //eslint-disable-line react/no-did-mount-set-state\n        }\n    };\n\n    submitPassword = async () => {\n        const user = this.props.user;\n        const currentPassword = this.state.currentPassword;\n        const newPassword = this.state.newPassword;\n        const confirmPassword = this.state.confirmPassword;\n\n        if (currentPassword === '') {\n            this.setState({\n                passwordError: Utils.localizeMessage(\n                    'user.settings.security.currentPasswordError',\n                    'Please enter your current password.',\n                ),\n                serverError: '',\n            });\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(\n            newPassword,\n            this.props.passwordConfig,\n        );\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n                serverError: '',\n            });\n            return;\n        }\n\n        if (newPassword !== confirmPassword) {\n            const defaultState = Object.assign(this.getDefaultState(), {\n                passwordError: Utils.localizeMessage(\n                    'user.settings.security.passwordMatchError',\n                    'The new passwords you entered do not match.',\n                ),\n                serverError: '',\n            });\n            this.setState(defaultState);\n            return;\n        }\n\n        this.setState({savingPassword: true});\n\n        const res = await this.props.actions.updateUserPassword(\n            user.id,\n            currentPassword,\n            newPassword,\n        );\n        if ('data' in res) {\n            this.props.updateSection('');\n            this.props.actions.getMe();\n            this.setState(this.getDefaultState());\n        } else if ('error' in res) {\n            const {error: err} = res;\n            const state = this.getDefaultState();\n            if (err.message) {\n                state.serverError = err.message;\n            } else {\n                state.serverError = err;\n            }\n            state.passwordError = '';\n            this.setState(state);\n        }\n    };\n\n    updateCurrentPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({currentPassword: e.target.value});\n    };\n\n    updateNewPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({newPassword: e.target.value});\n    };\n\n    updateConfirmPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({confirmPassword: e.target.value});\n    };\n\n    deauthorizeApp = async (e: React.MouseEvent) => {\n        e.preventDefault();\n\n        const appId = e.currentTarget.getAttribute('data-app') as string;\n\n        const res = await this.props.actions.deauthorizeOAuthApp(appId);\n        if ('data' in res) {\n            const authorizedApps = this.state.authorizedApps.filter((app) => {\n                return app.id !== appId;\n            });\n            this.setState({authorizedApps, serverError: null});\n        } else if ('error' in res) {\n            const {error} = res;\n            this.setState({serverError: error.message});\n        }\n    };\n\n    handleUpdateSection = (section: string) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            switch (this.props.activeSection) {\n            case SECTION_MFA:\n            case SECTION_SIGNIN:\n            case SECTION_TOKENS:\n            case SECTION_APPS:\n                this.setState({\n                    serverError: null,\n                });\n                break;\n            case SECTION_PASSWORD:\n                this.setState({\n                    currentPassword: '',\n                    newPassword: '',\n                    confirmPassword: '',\n                    serverError: null,\n                    passwordError: null,\n                });\n                break;\n            default:\n            }\n\n            this.props.updateSection('');\n        }\n    };\n\n    createPasswordSection = () => {\n        if (this.props.activeSection === SECTION_PASSWORD) {\n            const inputs = [];\n            let submit;\n\n            if (this.props.user.auth_service === '') {\n                submit = this.submitPassword;\n\n                inputs.push(\n                    <div\n                        key='currentPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.currentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='currentPassword'\n                                autoFocus={true}\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateCurrentPassword}\n                                value={this.state.currentPassword}\n                                aria-label={Utils.localizeMessage(\n                                    'user.settings.security.currentPassword',\n                                    'Current Password',\n                                )}\n                            />\n                        </div>\n                    </div>,\n                );\n                inputs.push(\n                    <div\n                        key='newPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.newPassword'\n                                defaultMessage='New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='newPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateNewPassword}\n                                value={this.state.newPassword}\n                                aria-label={Utils.localizeMessage(\n                                    'user.settings.security.newPassword',\n                                    'New Password',\n                                )}\n                            />\n                        </div>\n                    </div>,\n                );\n                inputs.push(\n                    <div\n                        key='retypeNewPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.retypePassword'\n                                defaultMessage='Retype New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='confirmPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateConfirmPassword}\n                                value={this.state.confirmPassword}\n                                aria-label={Utils.localizeMessage(\n                                    'user.settings.security.retypePassword',\n                                    'Retype New Password',\n                                )}\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.GITLAB_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.LDAP_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.SAML_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordSamlCantUpdate'\n                                defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.GOOGLE_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.OFFICE365_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.security.password'\n                            defaultMessage='Password'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.savingPassword}\n                    serverError={this.state.serverError}\n                    clientError={this.state.passwordError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe;\n\n        if (this.props.user.auth_service === '') {\n            const d = new Date(this.props.user.last_password_update);\n\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.lastUpdated'\n                    defaultMessage='Last updated {date} at {time}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={d}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                        time: (\n                            <FormattedTime\n                                value={d}\n                                hour12={!this.props.militaryTime}\n                                hour='2-digit'\n                                minute='2-digit'\n                            />\n                        ),\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGitlab'\n                    defaultMessage='Login done through GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginLdap'\n                    defaultMessage='Login done through AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginSaml'\n                    defaultMessage='Login done through SAML'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGoogle'\n                    defaultMessage='Login done through Google Apps'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OFFICE365_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginOffice365'\n                    defaultMessage='Login done through Office 365'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.security.password'\n                        defaultMessage='Password'\n                    />\n                }\n                describe={describe}\n                section={SECTION_PASSWORD}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    };\n\n    createSignInSection = () => {\n        const user = this.props.user;\n\n        if (this.props.activeSection === SECTION_SIGNIN) {\n            let emailOption;\n            let gitlabOption;\n            let googleOption;\n            let office365Option;\n            let openidOption;\n            let ldapOption;\n            let samlOption;\n\n            if (user.auth_service === '') {\n                if (this.props.enableSignUpWithGitLab) {\n                    gitlabOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.GITLAB_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGitlab'\n                                    defaultMessage='Switch to Using GitLab SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithGoogle) {\n                    googleOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.GOOGLE_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGoogle'\n                                    defaultMessage='Switch to Using Google SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOffice365) {\n                    office365Option = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.OFFICE365_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOffice365'\n                                    defaultMessage='Switch to Using Office 365 SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOpenId) {\n                    openidOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.OPENID_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOpenId'\n                                    defaultMessage='Switch to Using OpenID SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableLdap) {\n                    ldapOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_ldap?email=' +\n                                    encodeURIComponent(user.email)\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchLdap'\n                                    defaultMessage='Switch to Using AD/LDAP'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSaml) {\n                    samlOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.SAML_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchSaml'\n                                    defaultMessage='Switch to Using SAML SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n            } else if (this.props.enableSignUpWithEmail) {\n                let link;\n                if (user.auth_service === Constants.LDAP_SERVICE) {\n                    link =\n                        '/claim/ldap_to_email?email=' +\n                        encodeURIComponent(user.email);\n                } else {\n                    link =\n                        '/claim/oauth_to_email?email=' +\n                        encodeURIComponent(user.email) +\n                        '&old_type=' +\n                        user.auth_service;\n                }\n\n                emailOption = (\n                    <div className='pb-3'>\n                        <Link\n                            className='btn btn-primary'\n                            to={link}\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.switchEmail'\n                                defaultMessage='Switch to Using Email and Password'\n                            />\n                        </Link>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            inputs.push(\n                <div key='userSignInOption'>\n                    {emailOption}\n                    {gitlabOption}\n                    {googleOption}\n                    {office365Option}\n                    {openidOption}\n                    {ldapOption}\n                    {samlOption}\n                </div>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.security.oneSignin'\n                        defaultMessage='You may only have one sign-in method at a time. Switching sign-in method will send an email notifying you if the change was successful.'\n                    />\n                </span>\n            );\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage(\n                        'user.settings.security.method',\n                        'Sign-in Method',\n                    )}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = (\n            <FormattedMessage\n                id='user.settings.security.emailPwd'\n                defaultMessage='Email and Password'\n            />\n        );\n        if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.gitlab'\n                    defaultMessage='GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.google'\n                    defaultMessage='Google'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OFFICE365_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.office365'\n                    defaultMessage='Office 365'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.ldap'\n                    defaultMessage='AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.saml'\n                    defaultMessage='SAML'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage(\n                    'user.settings.security.method',\n                    'Sign-in Method',\n                )}\n                describe={describe}\n                section={SECTION_SIGNIN}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    };\n\n    createOAuthAppsSection = () => {\n        if (this.props.activeSection === SECTION_APPS) {\n            let apps;\n            if (\n                this.state.authorizedApps &&\n                this.state.authorizedApps.length > 0\n            ) {\n                apps = this.state.authorizedApps.map((app) => {\n                    const homepage = (\n                        <a\n                            href={app.homepage}\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            {app.homepage}\n                        </a>\n                    );\n\n                    return (\n                        <div\n                            key={app.id}\n                            className='pb-3 authorized-app'\n                        >\n                            <div className='col-sm-10'>\n                                <div className='authorized-app__name'>\n                                    {app.name}\n                                    <span className='authorized-app__url'>\n                                        {' -'} {homepage}\n                                    </span>\n                                </div>\n                                <div className='authorized-app__description'>\n                                    {app.description}\n                                </div>\n                                <div className='authorized-app__deauthorize'>\n                                    <a\n                                        href='#'\n                                        data-app={app.id}\n                                        onClick={this.deauthorizeApp}\n                                    >\n                                        <FormattedMessage\n                                            id='user.settings.security.deauthorize'\n                                            defaultMessage='Deauthorize'\n                                        />\n                                    </a>\n                                </div>\n                            </div>\n                            <div className='col-sm-2 pull-right'>\n                                <img\n                                    alt={app.name}\n                                    src={app.icon_url || icon50}\n                                />\n                            </div>\n                            <br/>\n                        </div>\n                    );\n                });\n            } else {\n                apps = (\n                    <div className='pb-3 authorized-app'>\n                        <div className='setting-list__hint'>\n                            <FormattedMessage\n                                id='user.settings.security.noApps'\n                                defaultMessage='No OAuth 2.0 Applications are authorized.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            let wrapperClass;\n            let helpText;\n            if (Array.isArray(apps)) {\n                wrapperClass = 'authorized-apps__wrapper';\n\n                helpText = (\n                    <div className='authorized-apps__help'>\n                        <FormattedMessage\n                            id='user.settings.security.oauthAppsHelp'\n                            defaultMessage='Applications act on your behalf to access your data based on the permissions you grant them.'\n                        />\n                    </div>\n                );\n            }\n\n            inputs.push(\n                <div\n                    className={wrapperClass}\n                    key='authorizedApps'\n                >\n                    {apps}\n                </div>,\n            );\n\n            const title = (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.security.oauthApps'\n                        defaultMessage='OAuth 2.0 Applications'\n                    />\n                    {helpText}\n                </div>\n            );\n\n            return (\n                <SettingItemMax\n                    title={title}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    width='full'\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage(\n                    'user.settings.security.oauthApps',\n                    'OAuth 2.0 Applications',\n                )}\n                describe={\n                    <FormattedMessage\n                        id='user.settings.security.oauthAppsDescription'\n                        defaultMessage=\"Click 'Edit' to manage your OAuth 2.0 Applications\"\n                    />\n                }\n                section={SECTION_APPS}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    };\n\n    render() {\n        const user = this.props.user;\n\n        const passwordSection = this.createPasswordSection();\n\n        let numMethods = 0;\n        numMethods = this.props.enableSignUpWithGitLab ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithGoogle ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOffice365 ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableLdap ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSaml ? numMethods + 1 : numMethods;\n\n        // If there are other sign-in methods and either email is enabled or the user's account is email, then allow switching\n        let signInSection;\n        if (\n            (this.props.enableSignUpWithEmail || user.auth_service === '') &&\n            numMethods > 0 &&\n            this.props.experimentalEnableAuthenticationTransfer\n        ) {\n            signInSection = this.createSignInSection();\n        }\n\n        let oauthSection;\n        if (this.props.enableOAuthServiceProvider) {\n            oauthSection = this.createOAuthAppsSection();\n        }\n\n        let tokensSection;\n        if (this.props.canUseAccessTokens) {\n            tokensSection = (\n                <UserAccessTokenSection\n                    user={this.props.user}\n                    active={this.props.activeSection === SECTION_TOKENS}\n                    updateSection={this.handleUpdateSection}\n                    setRequireConfirm={this.props.setRequireConfirm}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <FormattedMessage\n                        id='user.settings.security.close'\n                        defaultMessage='Close'\n                    >\n                        {(ariaLabel: string) => (\n                            <button\n                                type='button'\n                                className='close'\n                                data-dismiss='modal'\n                                aria-label={ariaLabel}\n                                onClick={this.props.closeModal}\n                            >\n                                <span aria-hidden='true'>{'×'}</span>\n                            </button>\n                        )}\n                    </FormattedMessage>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title: string) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {passwordSection}\n                    <div className='divider-light'/>\n                    <MfaSection\n                        active={this.props.activeSection === SECTION_MFA}\n                        updateSection={this.handleUpdateSection}\n                    />\n                    <div className='divider-light'/>\n                    {oauthSection}\n                    <div className='divider-light'/>\n                    {tokensSection}\n                    <div className='divider-light'/>\n                    {signInSection}\n                    <div className='divider-dark'/>\n                    <br/>\n                    <ToggleModalButton\n                        className='security-links color--link'\n                        dialogType={AccessHistoryModal}\n                        id='viewAccessHistory'\n                    >\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory.icon'\n                            defaultMessage='Access History Icon'\n                        >\n                            {(title: string) => (\n                                <i\n                                    className='fa fa-clock-o'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory'\n                            defaultMessage='View Access History'\n                        />\n                    </ToggleModalButton>\n                    <ToggleModalButton\n                        className='security-links color--link mt-2'\n                        dialogType={ActivityLogModal}\n                        id='viewAndLogOutOfActiveSessions'\n                    >\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions.icon'\n                            defaultMessage='Active Sessions Icon'\n                        >\n                            {(title: string) => (\n                                <i\n                                    className='fa fa-clock-o'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions'\n                            defaultMessage='View and Log Out of Active Sessions'\n                        />\n                    </ToggleModalButton>\n                </div>\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators, Dispatch} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference, getSidebarPreferences, getNewSidebarPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from 'mattermost-redux/types/store';\n\nimport UserSettingsSidebar from './user_settings_sidebar';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    const closeUnusedDirectMessages = getPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'close_unused_direct_messages',\n        'after_seven_days',\n    );\n\n    const channelSwitcherOption = getPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'channel_switcher_section',\n        'true',\n    );\n\n    const channelSidebarOrganizationOption = getNewSidebarPreference(state);\n    const sidebarPreference = getSidebarPreferences(state);\n\n    return {\n        closeUnusedDirectMessages,\n        sidebarPreference,\n        unreadsAtTop: sidebarPreference.unreads_at_top,\n        favoriteAtTop: sidebarPreference.favorite_at_top,\n        channelSwitcherOption,\n        channelSidebarOrganizationOption: String(channelSidebarOrganizationOption),\n        showChannelOrganization: config.ExperimentalChannelOrganization === 'true',\n        showChannelSidebarOrganization: config.ExperimentalChannelSidebarOrganization !== 'disabled' && config.ExperimentalChannelSidebarOrganization !== 'always_on',\n        showUnusedOption: config.CloseUnusedDirectMessages === 'true',\n        user: getCurrentUser(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsSidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {UserProfile} from 'mattermost-redux/src/types/users';\n\nimport {PreferenceType} from 'mattermost-redux/types/preferences';\n\nimport {SidebarPreferences} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport Constants from 'utils/constants';\nimport {isMac} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport interface UserSettingsSidebarProps {\n    actions: {\n\n        /**\n     * Function to save the user's preferences\n     */\n        savePreferences: (userId: string, preferences: PreferenceType[]) => any;\n    };\n\n    /**\n   * Current user object\n   */\n    user: UserProfile;\n\n    /**\n   * The preferences for closing the unused direct messages channels\n   */\n    closeUnusedDirectMessages: string;\n\n    /**\n   * Display the close unused direct messages channels options\n   */\n    showUnusedOption: boolean;\n\n    /**\n   * Display the channel grouping and sorting sections options\n   */\n    showChannelOrganization: boolean;\n\n    /**\n   * Display the setting to toggle the new sidebar\n   */\n    showChannelSidebarOrganization: boolean;\n\n    /**\n   * The preferences to show the channel switcher in the sidebar\n   */\n    channelSwitcherOption: string;\n\n    /**\n   * The preferences to show the channel sidebar organization setting\n   */\n    channelSidebarOrganizationOption: string;\n\n    /**\n   * Display the unread channels sections options\n   * The preferences to display channels in sidebar\n   */\n    sidebarPreference: SidebarPreferences;\n\n    /**\n   * Option for including unread channels at top\n   */\n    unreadsAtTop: string;\n\n    /**\n   * Option for including favorite channels at top\n   */\n    favoriteAtTop: string;\n\n    updateSection?: (section: string) => void;\n    activeSection?: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n}\n\nenum Settings {\n    CloseUnusedDirectMessages = 'close_unused_direct_messages',\n    ChannelSwitcherSection = 'channel_switcher_section',\n    ChannelSidebarOrganization = 'channel_sidebar_organization',\n    Grouping = 'grouping',\n    UnreadsAtTop = 'unreadsAtTop',\n    FavoriteAtTop = 'favoriteAtTop',\n    Sorting = 'sorting',\n    NewSidebar = 'newSidebar',\n    ChannelGrouping= 'channel_grouping',\n    ChannelSorting= 'channel_sorting',\n}\n\ninterface GroupingSorting {\n\n    /**\n   * Group channels by type or none\n   */\n    [Settings.Grouping]: string;\n\n    /**\n   * Sort channels by recency or alphabetical order\n   */\n    [Settings.Sorting]: string;\n}\n\ninterface SettingType extends GroupingSorting {\n    [Settings.CloseUnusedDirectMessages]: string;\n    [Settings.ChannelSwitcherSection]: string;\n    [Settings.ChannelSidebarOrganization]: string;\n    [Settings.UnreadsAtTop]: string;\n    [Settings.FavoriteAtTop]: string;\n    [Settings.NewSidebar]?: string;\n}\n\ninterface UserSettingsSidebarState {\n    settings: SettingType;\n    isSaving: boolean;\n    serverError?: string;\n}\n\nexport default class UserSettingsSidebar extends React.PureComponent<UserSettingsSidebarProps, UserSettingsSidebarState> {\n    constructor(props: UserSettingsSidebarProps) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = (): UserSettingsSidebarState => {\n        const {\n            closeUnusedDirectMessages,\n            channelSwitcherOption,\n            channelSidebarOrganizationOption,\n            sidebarPreference: {\n                grouping,\n                sorting,\n            },\n            unreadsAtTop,\n            favoriteAtTop,\n        } = this.props;\n\n        return {\n            settings: {\n                close_unused_direct_messages: closeUnusedDirectMessages,\n                channel_switcher_section: channelSwitcherOption,\n                channel_sidebar_organization: channelSidebarOrganizationOption,\n                grouping,\n                unreadsAtTop,\n                favoriteAtTop,\n                sorting,\n            },\n            isSaving: false,\n        };\n    };\n\n    trackSettingChangeIfNecessary(setting: keyof SettingType) {\n        if (this.state.settings[setting] !== this.props.sidebarPreference[setting as keyof GroupingSorting]) {\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\n        }\n    }\n\n    updateSetting<T extends keyof SettingType>(setting: T, value: SettingType[T]): void {\n        const settings: SettingType = {\n            ...this.state.settings,\n            [setting]: value,\n        };\n\n        this.setState({\n            ...this.state,\n            settings,\n        });\n    }\n\n    handleSubmit = (setting: Settings | keyof SettingType): void => {\n        const {actions, user} = this.props;\n        const preferences: PreferenceType[] = [];\n\n        if (setting === Settings.ChannelGrouping || setting === Settings.ChannelSorting) {\n            const updatedSidebarSettings = {\n                grouping: this.state.settings.grouping,\n                unreads_at_top: this.state.settings.unreadsAtTop,\n                favorite_at_top: this.state.settings.favoriteAtTop,\n                sorting: this.state.settings.sorting,\n            };\n\n            preferences.push({\n                user_id: user.id,\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n                name: '',\n                value: JSON.stringify(updatedSidebarSettings),\n            });\n\n            this.trackSettingChangeIfNecessary(Settings.Grouping);\n            this.trackSettingChangeIfNecessary(Settings.Sorting);\n            this.trackSettingChangeIfNecessary(Settings.UnreadsAtTop);\n            this.trackSettingChangeIfNecessary(Settings.FavoriteAtTop);\n            this.trackSettingChangeIfNecessary(Settings.NewSidebar);\n        } else {\n            preferences.push({\n                user_id: user.id,\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\n        }\n\n        this.setState({isSaving: true});\n\n        actions.savePreferences(user.id, preferences).then(() => {\n            this.updateSection('');\n        });\n    };\n\n    getPreviousSection = (sectionName: string): string | null => {\n        const {showChannelOrganization, channelSidebarOrganizationOption} = this.props;\n        switch (sectionName) {\n        case 'autoCloseDM':\n            return channelSidebarOrganizationOption === 'true' ? 'channelSidebarOrganization' : 'channelSwitcher';\n        case 'groupChannels':\n            return 'dummySectionName';\n        case 'channelSidebarOrganization':\n            return 'dummySectionName';\n        case 'channelSwitcher':\n            return showChannelOrganization ? 'groupChannels' : 'dummySectionName';\n        default:\n            return null;\n        }\n    };\n\n    updateSection = (section: string): void => {\n        if (this.props.updateSection) {\n            this.setState(this.getStateFromProps());\n            this.setState({isSaving: false});\n            this.props.updateSection(section);\n        }\n    };\n\n    renderAutoCloseDMLabel = (value: string): JSX.Element => {\n        if (value === 'after_seven_days') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.after_seven_days'\n                    defaultMessage='After 7 days with no new messages'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.never'\n                defaultMessage='Never'\n            />\n        );\n    };\n\n    renderAutoCloseDMSection = (): JSX.Element => {\n        let contents;\n\n        if (this.props.activeSection === 'autoCloseDM') {\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='autoCloseDMSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMAfterSevenDays'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'after_seven_days'}\n                                        onChange={this.updateSetting.bind(this, Settings.CloseUnusedDirectMessages, 'after_seven_days')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.after_seven_days'\n                                        defaultMessage='After 7 days with no new messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMNever'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'never'}\n                                        onChange={this.updateSetting.bind(this, Settings.CloseUnusedDirectMessages, 'never')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.autoCloseDMDesc'\n                                    defaultMessage='Direct Message conversations can be reopened with the “+” button in the sidebar or using the Channel Switcher (CTRL+K).'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'close_unused_direct_messages'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            contents = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    describe={this.renderAutoCloseDMLabel(this.state.settings.close_unused_direct_messages)}\n                    section={'autoCloseDM'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-dark'/>\n            </React.Fragment>\n        );\n    };\n\n    renderOrganizationLabel = (): JSX.Element[] => {\n        const {\n            sidebarPreference: {\n                sorting,\n                grouping,\n            },\n            unreadsAtTop,\n            favoriteAtTop,\n        } = this.props;\n\n        const messages: JSX.Element[] = [];\n\n        if (grouping === 'by_type') {\n            messages.push(\n                <FormattedMessage\n                    key='by_type'\n                    id='user.settings.sidebar.groupByTypeShort'\n                    defaultMessage='Group by channel type'\n                />,\n            );\n        } else {\n            messages.push(\n                <FormattedMessage\n                    key='none'\n                    id='user.settings.sidebar.groupByNoneShort'\n                    defaultMessage='No grouping'\n                />,\n            );\n        }\n\n        let sortingId;\n        let sortingDefaultMessage;\n        if (sorting === 'alpha') {\n            sortingId = t('user.settings.sidebar.sortAlphaShort');\n            sortingDefaultMessage = 'sorted alphabetically';\n        } else {\n            sortingId = t('user.settings.sidebar.sortRecentShort');\n            sortingDefaultMessage = 'sorted by recency';\n        }\n\n        messages.push(\n            <span key='comma'>{', '}</span>,\n        );\n\n        messages.push(\n            <FormattedMessage\n                key='sorting'\n                id={sortingId}\n                defaultMessage={sortingDefaultMessage}\n            />,\n        );\n\n        let atTopId: string | null = null;\n        let atTopDefaultMessage: string | null = null;\n        if (unreadsAtTop === 'true' && favoriteAtTop === 'false') {\n            atTopId = t('user.settings.sidebar.unreadsShort');\n            atTopDefaultMessage = 'Unreads grouped separately';\n        } else if (unreadsAtTop === 'false' && favoriteAtTop === 'true') {\n            atTopId = t('user.settings.sidebar.favoritesShort');\n            atTopDefaultMessage = 'Favorites grouped separately';\n        } else if (unreadsAtTop === 'true' && favoriteAtTop === 'true') {\n            atTopId = t('user.settings.sidebar.unreadsFavoritesShort');\n            atTopDefaultMessage = 'Unreads and favorites grouped separately';\n        }\n\n        if (atTopId) {\n            messages.push(\n                <br key='break'/>,\n            );\n\n            messages.push(\n                <FormattedMessage\n                    key='atTop'\n                    id={atTopId}\n                    defaultMessage={atTopDefaultMessage as any}\n                />,\n            );\n        }\n\n        return messages;\n    };\n\n    renderChannelSwitcherLabel = (value: string): JSX.Element => {\n        if (value === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.on'\n                    defaultMessage='On'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.off'\n                defaultMessage='Off'\n            />\n        );\n    };\n\n    renderChannelSidebarOrganizationSection = (): JSX.Element => {\n        const helpChannelSidebarOrganizationText = (\n            <FormattedMarkdownMessage\n                id={t('user.settings.sidebar.channelSidebarOrganizationSection.desc')}\n                defaultMessage={'When enabled, access experimental channel sidebar features, including collapsible sections and unreads filtering. [Learn more](!https://about.mattermost.com/default-sidebar/) or [give us feedback](!https://about.mattermost.com/default-sidebar-survey/)'}\n            />\n        );\n\n        let contents = (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id={t('user.settings.sidebar.channelSidebarOrganizationSectionTitle')}\n                        defaultMessage='Experimental Sidebar Features'\n                    />\n                }\n                describe={this.renderChannelSwitcherLabel(this.props.channelSidebarOrganizationOption)}\n                section={'channelSidebarOrganization'}\n                updateSection={this.updateSection}\n            />\n        );\n\n        if (this.props.activeSection === 'channelSidebarOrganization') {\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id={t('user.settings.sidebar.channelSidebarOrganizationSectionTitle')}\n                            defaultMessage='Experimental Sidebar Features'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='channelSidebarOrganizationSectionSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id={t('user.settings.sidebar.channelSidebarOrganizationSectionTitle')}\n                                    defaultMessage='Experimental Sidebar Features'\n                                />\n                            </legend>\n                            <div\n                                id='channelSidebarOrganizationRadioOn'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSidebarOrganizationSectionEnabled'\n                                        type='radio'\n                                        name='channelSidebarOrganization'\n                                        checked={this.state.settings.channel_sidebar_organization === 'true'}\n                                        onChange={this.updateSetting.bind(this, Settings.ChannelSidebarOrganization, 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div\n                                id='channelSidebarOrganizationRadioOff'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSidebarOrganizationSectionOff'\n                                        type='radio'\n                                        name='channelSidebarOrganization'\n                                        checked={this.state.settings.channel_sidebar_organization === 'false'}\n                                        onChange={this.updateSetting.bind(this, Settings.ChannelSidebarOrganization, 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div id='channelSidebarOrganizationelpText'>\n                                <br/>\n                                {helpChannelSidebarOrganizationText}\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'channel_sidebar_organization'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-light'/>\n            </React.Fragment>\n        );\n    };\n\n    renderChannelOrganizationSection = (): JSX.Element => {\n        const {\n            grouping,\n            sorting,\n        } = this.state.settings;\n\n        let contents: JSX.Element;\n\n        if (this.props.activeSection === 'groupChannels') {\n            const inputs: JSX.Element[] = [];\n\n            inputs.push(\n                <fieldset key='groupingSectionSetting'>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupChannelsTitle'\n                            defaultMessage='Channel grouping'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='byTypeOption'\n                                type='radio'\n                                name='groupChannels'\n                                checked={grouping === 'by_type'}\n                                onChange={this.updateSetting.bind(this, Settings.Grouping, 'by_type')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.groupByType'\n                                defaultMessage='Channels grouped by type'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='noneOption'\n                                type='radio'\n                                name='groupChannels'\n                                checked={grouping === 'none'}\n                                onChange={this.updateSetting.bind(this, Settings.Grouping, 'none')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.groupByNone'\n                                defaultMessage='Combine all channel types'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupDesc'\n                            defaultMessage='Group channels by type, or combine all types into a list.'\n                        />\n                    </div>\n                </fieldset>,\n            );\n\n            inputs.push(<hr key='sortingDivider'/>);\n\n            inputs.push(\n                <fieldset key='sortingOptions'>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.sortChannelsTitle'\n                            defaultMessage='Channel sorting'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='recentSectionEnabled'\n                                type='radio'\n                                name='sortChannels'\n                                checked={sorting === 'recent'}\n                                onChange={this.updateSetting.bind(this, Settings.Sorting, 'recent')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.sortRecent'\n                                defaultMessage='Recency'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='alphaSectionEnabled'\n                                type='radio'\n                                name='sortChannels'\n                                checked={sorting === 'alpha'}\n                                onChange={this.updateSetting.bind(this, Settings.Sorting, 'alpha')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.sortAlpha'\n                                defaultMessage='Alphabetically'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.sortDesc'\n                            defaultMessage='Sort channels alphabetically, or by most recent post.'\n                        />\n                    </div>\n                </fieldset>,\n            );\n\n            inputs.push(<hr key='divider'/>);\n\n            inputs.push(\n                <fieldset key='unreadOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='unreadAtTopOption'\n                                type='checkbox'\n                                checked={this.state.settings.unreadsAtTop === 'true'}\n                                onChange={(e) => this.updateSetting(Settings.UnreadsAtTop, (e.target.checked).toString())}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.unreads'\n                                defaultMessage='Unreads grouped separately'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.unreadsDesc'\n                            defaultMessage='Group unread channels separately until read.'\n                        />\n                    </div>\n                </fieldset>,\n            );\n\n            inputs.push(<hr key='groupingDivider'/>);\n\n            inputs.push(\n                <fieldset key='favoriteOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='favoriteAtTopOption'\n                                type='checkbox'\n                                checked={this.state.settings.favoriteAtTop === 'true'}\n                                onChange={(e) => this.updateSetting(Settings.FavoriteAtTop, (e.target.checked).toString())}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.favorites'\n                                defaultMessage='Favorites grouped separately'\n                            />\n                        </label>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.sidebar.favoritesDesc'\n                            defaultMessage='Channels marked as favorites will be grouped separately.'\n                        />\n                    </div>\n                </fieldset>,\n            );\n\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\n                            defaultMessage='Channel Grouping and Sorting'\n                        />\n                    }\n                    inputs={inputs}\n                    setting={'channel_grouping'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            contents = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\n                            defaultMessage='Channel Grouping and Sorting'\n                        />\n                    }\n                    describe={this.renderOrganizationLabel()}\n                    section={'groupChannels'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-light'/>\n            </React.Fragment>\n        );\n    };\n\n    renderChannelSwitcherSection = (): JSX.Element => {\n        let channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.windows');\n        let channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CTRL + K.';\n        if (isMac()) {\n            channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.mac');\n            channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CMD + K.';\n        }\n\n        const helpChannelSwitcherText = (\n            <FormattedMessage\n                id={channelSwitcherSectionDescId}\n                defaultMessage={channelSwitcherSectionDescDefault}\n            />\n        );\n\n        if (this.props.activeSection === 'channelSwitcher') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.channelSwitcherSectionTitle'\n                            defaultMessage='Channel Switcher'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='channelSwitcherSectionSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.channelSwitcherSectionTitle'\n                                    defaultMessage='Channel Switcher'\n                                />\n                            </legend>\n                            <div\n                                id='channelSwitcherRadioOn'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionEnabled'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'true'}\n                                        onChange={this.updateSetting.bind(this, Settings.ChannelSwitcherSection, 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div\n                                id='channelSwitcherRadioOff'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionOff'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'false'}\n                                        onChange={this.updateSetting.bind(this, Settings.ChannelSwitcherSection, 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div id='channelSwitcherHelpText'>\n                                <br/>\n                                {helpChannelSwitcherText}\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'channel_switcher_section'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.sidebar.channelSwitcherSectionTitle'\n                        defaultMessage='Channel Switcher'\n                    />\n                }\n                describe={this.renderChannelSwitcherLabel(this.props.channelSwitcherOption)}\n                section={'channelSwitcher'}\n                updateSection={this.updateSection}\n            />\n        );\n    };\n\n    render(): JSX.Element {\n        const {showUnusedOption, showChannelOrganization, showChannelSidebarOrganization, channelSidebarOrganizationOption} = this.props;\n\n        const channelSidebarOrganizationDisabled = channelSidebarOrganizationOption === 'false';\n\n        const channelOrganizationSection = (showChannelOrganization && channelSidebarOrganizationDisabled) ? this.renderChannelOrganizationSection() : null;\n        const channelSidebarOrganizationSection = showChannelSidebarOrganization ? this.renderChannelSidebarOrganizationSection() : null;\n        const autoCloseDMSection = showUnusedOption ? this.renderAutoCloseDMSection() : null;\n        const channelSwitcherSection = channelSidebarOrganizationDisabled ? this.renderChannelSwitcherSection() : null;\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div\n                            className='modal-back'\n                            onClick={this.props.collapseModal}\n                        >\n                            <LocalizedIcon\n                                className='fa fa-angle-left'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    id='sidebarTitle'\n                    className='user-settings'\n                >\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {channelSidebarOrganizationSection}\n                    {channelOrganizationSection}\n                    {channelSwitcherSection}\n                    {showUnusedOption ? <div className='divider-light'/> : <div className='divider-dark'/>}\n                    {autoCloseDMSection}\n                </div>\n            </div>\n        );\n    }\n}\n/* eslint-disable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {UserProfile} from 'mattermost-redux/types/users';\n\nimport AdvancedTab from './advanced';\nimport DisplayTab from './display';\nimport GeneralTab from './general';\nimport NotificationsTab from './notifications';\nimport SecurityTab from './security';\nimport SidebarTab from './sidebar';\n\nexport type Props = {\n    user: UserProfile;\n    activeTab?: string;\n    activeSection?: string;\n    updateSection: (section: string) => void;\n    updateTab: (notifications: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setEnforceFocus: () => void;\n    setRequireConfirm: () => void;\n};\n\nexport default class UserSettings extends React.PureComponent<Props> {\n    render() {\n        if (this.props.activeTab === 'general') {\n            return (\n                <div>\n                    <GeneralTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        updateTab={this.props.updateTab}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'security') {\n            return (\n                <div>\n                    <SecurityTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'notifications') {\n            return (\n                <div>\n                    <NotificationsTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'display') {\n            return (\n                <div>\n                    <DisplayTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'sidebar') {\n            return (\n                <div>\n                    <SidebarTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'advanced') {\n            return (\n                <div>\n                    <AdvancedTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        }\n\n        return <div/>;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function BackIcon() {\n    const {formatMessage} = useIntl();\n    return (\n        <i\n            className='fa fa-angle-left'\n            title={formatMessage({id: 'generic_icons.back', defaultMessage: 'Back Icon'})}\n        />\n    );\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\n// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nvar users_1 = require(\"../selectors/entities/users\");\nvar timezone_1 = require(\"../selectors/entities/timezone\");\nvar users_2 = require(\"./users\");\nfunction autoUpdateTimezone(deviceTimezone) {\n    var _this = this;\n    return function (dispatch, getState) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var currentUer, currentTimezone, newTimezoneExists, timezone, updatedUser;\n        return tslib_1.__generator(this, function (_a) {\n            currentUer = users_1.getCurrentUser(getState());\n            currentTimezone = timezone_1.getUserTimezone(getState(), currentUer.id);\n            newTimezoneExists = currentTimezone.automaticTimezone !== deviceTimezone;\n            if (currentTimezone.useAutomaticTimezone && newTimezoneExists) {\n                timezone = {\n                    useAutomaticTimezone: 'true',\n                    automaticTimezone: deviceTimezone,\n                    manualTimezone: currentTimezone.manualTimezone,\n                };\n                updatedUser = tslib_1.__assign(tslib_1.__assign({}, currentUer), { timezone: timezone });\n                users_2.updateMe(updatedUser)(dispatch, getState);\n            }\n            return [2 /*return*/];\n        });\n    }); };\n}\nexports.autoUpdateTimezone = autoUpdateTimezone;\n//# sourceMappingURL=timezone.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nvar constants_1 = require(\"../constants\");\nfunction getEmailInterval(enableEmailNotification, enableEmailBatching, emailIntervalPreference) {\n    var INTERVAL_NEVER = constants_1.Preferences.INTERVAL_NEVER, INTERVAL_IMMEDIATE = constants_1.Preferences.INTERVAL_IMMEDIATE, INTERVAL_FIFTEEN_MINUTES = constants_1.Preferences.INTERVAL_FIFTEEN_MINUTES, INTERVAL_HOUR = constants_1.Preferences.INTERVAL_HOUR;\n    var validValuesWithEmailBatching = [INTERVAL_IMMEDIATE, INTERVAL_NEVER, INTERVAL_FIFTEEN_MINUTES, INTERVAL_HOUR];\n    var validValuesWithoutEmailBatching = [INTERVAL_IMMEDIATE, INTERVAL_NEVER];\n    if (!enableEmailNotification) {\n        return INTERVAL_NEVER;\n    }\n    else if (enableEmailBatching && validValuesWithEmailBatching.indexOf(emailIntervalPreference) === -1) {\n        // When email batching is enabled, the default interval is 15 minutes\n        return INTERVAL_FIFTEEN_MINUTES;\n    }\n    else if (!enableEmailBatching && validValuesWithoutEmailBatching.indexOf(emailIntervalPreference) === -1) {\n        // When email batching is not enabled, the default interval is immediately\n        return INTERVAL_IMMEDIATE;\n    }\n    else if (enableEmailNotification && emailIntervalPreference === INTERVAL_NEVER) {\n        // When email notification is enabled, the default interval is immediately\n        return INTERVAL_IMMEDIATE;\n    }\n    return emailIntervalPreference;\n}\nexports.getEmailInterval = getEmailInterval;\n//# sourceMappingURL=notify_props.js.map"],"sourceRoot":""}