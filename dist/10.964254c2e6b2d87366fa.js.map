{"version":3,"sources":["webpack:///./components/error_page/error_title.tsx","webpack:///./components/error_page/error_message.tsx","webpack:///./components/error_page/error_page.tsx","webpack:///./components/error_page/index.tsx"],"names":["ErrorTitle","type","title","errorTitle","ErrorPageTypes","LOCAL_STORAGE","id","defaultMessage","PERMALINK_NOT_FOUND","OAUTH_ACCESS_DENIED","OAUTH_MISSING_CODE","OAUTH_INVALID_REDIRECT_URL","OAUTH_INVALID_PARAM","TEAM_NOT_FOUND","CHANNEL_NOT_FOUND","PAGE_NOT_FOUND","Utils","ErrorMessage","message","service","isGuest","errorMessage","values","link","url","messageId","t","ErrorPage","React","PureComponent","componentDidMount","document","body","setAttribute","componentWillUnmount","removeAttribute","render","this","props","params","URLSearchParams","location","search","signature","get","trustParams","delete","keyPEM","asymmetricSigningPublicKey","verify","crypto","createVerify","update","toString","returnTo","backButton","to","siteName","defaultChannelName","Constants","DEFAULT_CHANNEL_UI_NAME","className","data-testid","connect","state","config","getConfig","user","getCurrentUser","SiteName","AsymmetricSigningPublicKey","Boolean"],"mappings":"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","file":"10.964254c2e6b2d87366fa.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ErrorPageTypes} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\ntype Props = {\n    type?: string | null;\n    title: string;\n}\n\nconst ErrorTitle: React.FC<Props> = ({type, title}: Props) => {\n    let errorTitle = null;\n    if (type) {\n        switch (type) {\n        case ErrorPageTypes.LOCAL_STORAGE:\n            errorTitle = (\n                <FormattedMessage\n                    id='error.local_storage.title'\n                    defaultMessage='Cannot Load Mattermost'\n                />\n            );\n            break;\n        case ErrorPageTypes.PERMALINK_NOT_FOUND:\n            errorTitle = (\n                <FormattedMessage\n                    id='permalink.error.title'\n                    defaultMessage='Message Not Found'\n                />\n            );\n            break;\n        case ErrorPageTypes.OAUTH_ACCESS_DENIED:\n            errorTitle = (\n                <FormattedMessage\n                    id='error.oauth_access_denied.title'\n                    defaultMessage='Authorization Error'\n                />\n            );\n            break;\n        case ErrorPageTypes.OAUTH_MISSING_CODE:\n            errorTitle = (\n                <FormattedMessage\n                    id='error.oauth_missing_code.title'\n                    defaultMessage='Mattermost Needs Your Help'\n                />\n            );\n            break;\n        case ErrorPageTypes.OAUTH_INVALID_REDIRECT_URL:\n        case ErrorPageTypes.OAUTH_INVALID_PARAM:\n            errorTitle = (\n                <FormattedMessage\n                    id='error.oauth_invalid_param.title'\n                    defaultMessage='OAuth Parameter Error'\n                />\n            );\n            break;\n        case ErrorPageTypes.TEAM_NOT_FOUND:\n            errorTitle = (\n                <FormattedMessage\n                    id='error.team_not_found.title'\n                    defaultMessage='Team Not Found'\n                />\n            );\n            break;\n        case ErrorPageTypes.CHANNEL_NOT_FOUND:\n            errorTitle = (\n                <FormattedMessage\n                    id='error.channel_not_found.title'\n                    defaultMessage='Channel Not Found'\n                />\n            );\n            break;\n        case ErrorPageTypes.PAGE_NOT_FOUND:\n        default:\n            errorTitle = (\n                <FormattedMessage\n                    id='error.not_found.title'\n                    defaultMessage='Page Not Found'\n                />\n            );\n        }\n    } else if (title) {\n        errorTitle = title;\n    } else {\n        errorTitle = Utils.localizeMessage('error.generic.title', 'Error');\n    }\n\n    return errorTitle;\n};\n\nexport default ErrorTitle;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ErrorPageTypes} from 'utils/constants';\nimport {t} from 'utils/i18n';\n\nimport ErrorLink from './error_link';\n\ntype Props = {\n    type?: string | null;\n    message?: string;\n    service?: string;\n    isGuest?: boolean;\n}\n\nconst ErrorMessage: React.FC<Props> = ({type, message, service, isGuest}: Props) => {\n    let errorMessage = null;\n    if (type) {\n        switch (type) {\n        case ErrorPageTypes.LOCAL_STORAGE:\n            errorMessage = (\n                <div>\n                    <FormattedMessage\n                        id='error.local_storage.message'\n                        defaultMessage='Mattermost was unable to load because a setting in your browser prevents the use of its local storage features. To allow Mattermost to load, try the following actions:'\n                    />\n                    <ul>\n                        <li>\n                            <FormattedMessage\n                                id='error.local_storage.help1'\n                                defaultMessage='Enable cookies'\n                            />\n                        </li>\n                        <li>\n                            <FormattedMessage\n                                id='error.local_storage.help2'\n                                defaultMessage='Turn off private browsing'\n                            />\n                        </li>\n                        <li>\n                            <FormattedMessage\n                                id='error.local_storage.help3'\n                                defaultMessage='Use a supported browser (IE 11, Chrome 61+, Firefox 60+, Safari 12+, Edge 42+)'\n                            />\n                        </li>\n                    </ul>\n                </div>\n            );\n            break;\n        case ErrorPageTypes.PERMALINK_NOT_FOUND:\n            errorMessage = (\n                <p>\n                    <FormattedMessage\n                        id='permalink.error.access'\n                        defaultMessage='Permalink belongs to a deleted message or to a channel to which you do not have access.'\n                    />\n                </p>\n            );\n            break;\n        case ErrorPageTypes.TEAM_NOT_FOUND:\n            errorMessage = (\n                <p>\n                    <FormattedMessage\n                        id='error.team_not_found.message'\n                        defaultMessage=\"The team you're requesting is private or does not exist. Please contact your Administrator for an invitation.\"\n                    />\n                </p>\n            );\n            break;\n        case ErrorPageTypes.CHANNEL_NOT_FOUND:\n            errorMessage = (\n                <p>\n                    {isGuest ? (\n                        <FormattedMessage\n                            id='error.channel_not_found.message_guest'\n                            defaultMessage='Your guest account has no channels assigned. Please contact an administrator.'\n                        />\n                    ) : (\n                        <FormattedMessage\n                            id='error.channel_not_found.message'\n                            defaultMessage=\"The channel you're requesting is private or does not exist. Please contact an Administrator to be added to the channel.\"\n                        />\n\n                    )}\n                </p>\n            );\n            break;\n        case ErrorPageTypes.OAUTH_MISSING_CODE:\n            errorMessage = (\n                <div>\n                    <p>\n                        <FormattedMessage\n                            id='error.oauth_missing_code'\n                            defaultMessage='The service provider {service} did not provide an authorization code in the redirect URL.'\n                            values={{\n                                service,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='error.oauth_missing_code.google'\n                            defaultMessage='For {link} make sure your administrator enabled the Google+ API.'\n                            values={{\n                                link: (\n                                    <ErrorLink\n                                        url={'https://docs.mattermost.com/deployment/sso-google.html'}\n                                        messageId={t('error.oauth_missing_code.google.link')}\n                                        defaultMessage={'Google Apps'}\n                                    />\n                                ),\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='error.oauth_missing_code.office365'\n                            defaultMessage='For {link} make sure the administrator of your Microsoft organization has enabled the Mattermost app.'\n                            values={{\n                                link: (\n                                    <ErrorLink\n                                        url={'https://docs.mattermost.com/deployment/sso-office.html'}\n                                        messageId={t('error.oauth_missing_code.office365.link')}\n                                        defaultMessage={'Office 365'}\n                                    />\n                                ),\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='error.oauth_missing_code.gitlab'\n                            defaultMessage='For {link} please make sure you followed the setup instructions.'\n                            values={{\n                                link: (\n                                    <ErrorLink\n                                        url={'https://docs.mattermost.com/deployment/sso-gitlab.html'}\n                                        messageId={t('error.oauth_missing_code.gitlab.link')}\n                                        defaultMessage={'GitLab'}\n                                    />\n                                ),\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='error.oauth_missing_code.forum'\n                            defaultMessage=\"If you reviewed the above and are still having trouble with configuration, you may post in our {link} where we'll be happy to help with issues during setup.\"\n                            values={{\n                                link: (\n                                    <ErrorLink\n                                        url={'https://forum.mattermost.org/c/trouble-shoot'}\n                                        messageId={t('error.oauth_missing_code.forum.link')}\n                                        defaultMessage={'Troubleshooting forum'}\n                                    />\n                                ),\n                            }}\n                        />\n                    </p>\n                </div>\n            );\n            break;\n        case ErrorPageTypes.OAUTH_ACCESS_DENIED:\n            errorMessage = (\n                <p>\n                    <FormattedMessage\n                        id='error.oauth_access_denied'\n                        defaultMessage='You must authorize Mattermost to log in with {service}.'\n                        values={{\n                            service,\n                        }}\n                    />\n                </p>\n            );\n            break;\n        case ErrorPageTypes.OAUTH_INVALID_REDIRECT_URL:\n        case ErrorPageTypes.OAUTH_INVALID_PARAM:\n            errorMessage = (\n                <p>\n                    {message}\n                </p>\n            );\n            break;\n        case ErrorPageTypes.PAGE_NOT_FOUND:\n        default:\n            errorMessage = (\n                <p>\n                    <FormattedMessage\n                        id='error.not_found.message'\n                        defaultMessage='The page you were trying to reach does not exist'\n                    />\n                </p>\n            );\n        }\n    } else if (message) {\n        errorMessage = (\n            <p>\n                {message}\n            </p>\n        );\n    } else {\n        errorMessage = (\n            <p>\n                <FormattedMessage\n                    id='error.generic.message'\n                    defaultMessage='An error has occurred.'\n                />\n            </p>\n        );\n    }\n\n    return errorMessage;\n};\n\nexport default ErrorMessage;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport crypto from 'crypto';\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {ErrorPageTypes, Constants} from 'utils/constants';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nimport ErrorTitle from './error_title';\nimport ErrorMessage from './error_message';\n\ntype Location = {\n    search: string;\n}\n\ntype Props = {\n    location: Location;\n    asymmetricSigningPublicKey?: string;\n    siteName?: string;\n    isGuest?: boolean;\n}\n\nexport default class ErrorPage extends React.PureComponent<Props> {\n    public componentDidMount() {\n        document.body.setAttribute('class', 'sticky error');\n    }\n\n    public componentWillUnmount() {\n        document.body.removeAttribute('class');\n    }\n\n    public render() {\n        const {isGuest} = this.props;\n        const params: URLSearchParams = new URLSearchParams(this.props.location.search);\n        const signature = params.get('s');\n\n        let trustParams = false;\n        if (signature) {\n            params.delete('s');\n\n            const key = this.props.asymmetricSigningPublicKey;\n            const keyPEM = '-----BEGIN PUBLIC KEY-----\\n' + key + '\\n-----END PUBLIC KEY-----';\n\n            const verify = crypto.createVerify('sha256');\n            verify.update('/error?' + params.toString());\n            trustParams = verify.verify(keyPEM, signature, 'base64');\n        }\n\n        const type = params.get('type');\n        const title = (trustParams && params.get('title')) || '';\n        const message = (trustParams && params.get('message')) || '';\n        const service = (trustParams && params.get('service')) || '';\n        const returnTo = (trustParams && params.get('returnTo')) || '';\n\n        let backButton;\n        if (type === ErrorPageTypes.PERMALINK_NOT_FOUND && returnTo) {\n            backButton = (\n                <Link to={returnTo}>\n                    <FormattedMessage\n                        id='error.generic.link'\n                        defaultMessage='Back to Mattermost'\n                    />\n                </Link>\n            );\n        } else if (type === ErrorPageTypes.TEAM_NOT_FOUND) {\n            backButton = (\n                <Link to='/'>\n                    <FormattedMessage\n                        id='error.generic.link'\n                        defaultMessage='Back to {siteName}'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </Link>\n            );\n        } else if (type === ErrorPageTypes.CHANNEL_NOT_FOUND && isGuest) {\n            backButton = (\n                <Link to='/'>\n                    <FormattedMessage\n                        id='error.channelNotFound.guest_link'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            );\n        } else if (type === ErrorPageTypes.CHANNEL_NOT_FOUND) {\n            backButton = (\n                <Link to={params.get('returnTo') as string}>\n                    <FormattedMessage\n                        id='error.channelNotFound.link'\n                        defaultMessage='Back to {defaultChannelName}'\n                        values={{\n                            defaultChannelName: Constants.DEFAULT_CHANNEL_UI_NAME,\n                        }}\n                    />\n                </Link>\n            );\n        } else if (type === ErrorPageTypes.OAUTH_ACCESS_DENIED || type === ErrorPageTypes.OAUTH_MISSING_CODE) {\n            backButton = (\n                <Link to='/'>\n                    <FormattedMessage\n                        id='error.generic.link_login'\n                        defaultMessage='Back to Login Page'\n                    />\n                </Link>\n            );\n        } else if (type === ErrorPageTypes.OAUTH_INVALID_PARAM || type === ErrorPageTypes.OAUTH_INVALID_REDIRECT_URL) {\n            backButton = null;\n        } else {\n            backButton = (\n                <Link to='/'>\n                    <FormattedMessage\n                        id='error.generic.link'\n                        defaultMessage='Back to {siteName}'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </Link>\n            );\n        }\n\n        return (\n            <div className='container-fluid'>\n                <div className='error__container'>\n                    <div className='error__icon'>\n                        <WarningIcon/>\n                    </div>\n                    <h2\n                        data-testid='errorMessageTitle'\n                    >\n                        <ErrorTitle\n                            type={type}\n                            title={title}\n                        />\n                    </h2>\n                    <ErrorMessage\n                        type={type}\n                        message={message}\n                        service={service}\n                        isGuest={isGuest}\n                    />\n                    {backButton}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/common';\n\nimport {GlobalState} from 'types/store';\n\nimport {isGuest} from 'utils/utils.jsx';\n\nimport ErrorPage from './error_page';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const user = getCurrentUser(state);\n\n    return {\n        siteName: config.SiteName,\n        asymmetricSigningPublicKey: config.AsymmetricSigningPublicKey,\n        isGuest: Boolean(user && isGuest(user)),\n    };\n}\n\nexport default connect(mapStateToProps)(ErrorPage);\n"],"sourceRoot":""}