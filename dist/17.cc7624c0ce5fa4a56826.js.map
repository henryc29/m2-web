{"version":3,"sources":["webpack:///./components/common/back_button.tsx","webpack:///./images/logo.png","webpack:///./components/login/login_mfa.jsx","webpack:///./components/claim/components/oauth_to_email.jsx","webpack:///./components/claim/components/email_to_oauth.jsx","webpack:///./components/claim/components/ldap_to_email.jsx","webpack:///./components/claim/components/email_to_ldap.jsx","webpack:///./components/claim/claim_controller.tsx","webpack:///./components/claim/index.ts"],"names":["BackButton","React","PureComponent","render","id","className","onClick","this","props","to","url","defaultMessage","title","toString","LoginMfa","constructor","super","e","preventDefault","token","target","value","trim","replace","state","setState","submit","loginId","toLowerCase","password","saving","serverError","errorClass","onSubmit","handleSubmit","type","name","placeholder","t","spellCheck","autoComplete","autoFocus","onChange","handleChange","disabled","localizeMessage","savingMessage","PropTypes","string","isRequired","func","OAuthToEmail","passwordInput","current","error","Utils","valid","passwordConfig","confirmPassword","passwordConfirmInput","oauthToEmail","currentType","email","data","follow_link","window","location","href","err","message","createRef","formClass","uiType","Constants","SAML_SERVICE","toUpperCase","values","site","siteName","ref","object","EmailToOAuth","emailToOAuth","newType","showMfa","server_error_id","content","preSubmit","LDAPToEmail","passwordError","confirmError","ldapPasswordError","ldapPassword","ldapPasswordInput","switchLdapToEmail","then","startsWith","passwordClass","ldapPasswordClass","confimClass","passwordPlaceholder","EmailToLDAP","ldapError","emailPasswordInput","ldapId","ldapIdInput","emailToLdap","ldapClass","loginPlaceholder","ldapLoginFieldName","style","usernameInput","display","ClaimController","URLSearchParams","search","get","alt","src","logoImage","path","match","actions","minimumLength","requireLowercase","requireUppercase","requireNumber","requireSymbol","connect","config","getConfig","SiteName","LdapLoginFieldName","getPasswordConfig","dispatch","bindActionCreators"],"mappings":"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","file":"17.cc7624c0ce5fa4a56826.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/',\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","export default __webpack_public_path__ + \"files/ab8aa80cba445eb0fb75e6611c292567.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SaveButton from 'components/save_button';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LoginMfa extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * User's login ID\n         */\n        loginId: PropTypes.string.isRequired,\n\n        /*\n         * User's password\n         */\n        password: PropTypes.string.isRequired,\n\n        /*\n         * Function to call when submitting user credentials\n         */\n        submit: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            saving: false,\n            token: '',\n            serverError: '',\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        const token = e.target.value.trim().replace(/\\s/g, '');\n\n        if (token !== this.state.token) {\n            this.setState({\n                token,\n            });\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        state.serverError = '';\n        state.saving = true;\n        this.setState(state);\n\n        this.props.submit(\n            this.props.loginId.toLowerCase(),\n            this.props.password,\n            this.state.token,\n        );\n    }\n\n    render() {\n        let serverError;\n        let errorClass = '';\n        if (this.state.serverError) {\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\n            errorClass = ' has-error';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='signup__email-container'>\n                    <p>\n                        <FormattedMessage\n                            id='login_mfa.enterToken'\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\n                        />\n                    </p>\n                    <div className={'form-group' + errorClass}>\n                        {serverError}\n                    </div>\n                    <div className={'form-group' + errorClass}>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            name='token'\n                            placeholder={{id: t('login_mfa.token'), defaultMessage: 'MFA Token'}}\n                            spellCheck='false'\n                            autoComplete='off'\n                            autoFocus={true}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={this.state.saving}\n                            onClick={this.handleSubmit}\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\n                        />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {oauthToEmail} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class OAuthToEmail extends React.PureComponent {\n    static propTypes = {\n        currentType: PropTypes.string,\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n        passwordConfig: PropTypes.object,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n\n        this.passwordInput = React.createRef();\n        this.passwordConfirmInput = React.createRef();\n    }\n\n    submit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        const password = this.passwordInput.current.value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.enterPwd', 'Please enter a password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({error});\n            return;\n        }\n\n        const confirmPassword = this.passwordConfirmInput.current.value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.error = null;\n        this.setState(state);\n\n        oauthToEmail(\n            this.props.currentType,\n            this.props.email,\n            password,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            },\n        );\n    }\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const uiType = `${(this.props.currentType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.currentType))} SSO`;\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.oauth_to_email.title'\n                        defaultMessage='Switch {type} Account to Email'\n                        values={{\n                            type: uiType,\n                        }}\n                    />\n                </h3>\n                <form onSubmit={this.submit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.description'\n                            defaultMessage='Upon changing your account type, you will only be able to login with your email and password.'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.enterNewPwd'\n                            defaultMessage='Enter a new password for your {site} email account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref={this.passwordInput}\n                            placeholder={{id: t('claim.oauth_to_email.newPwd'), defaultMessage: 'New Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref={this.passwordConfirmInput}\n                            placeholder={{id: t('claim.oauth_to_email.confirm'), defaultMessage: 'Confirm Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.oauth_to_email.switchTo'\n                            defaultMessage='Switch {type} to Email and Password'\n                            values={{\n                                type: uiType,\n                            }}\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToOAuth} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class EmailToOAuth extends React.PureComponent {\n    static propTypes = {\n        newType: PropTypes.string,\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {showMfa: false, password: ''};\n\n        this.passwordInput = React.createRef();\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n        var state = {};\n\n        var password = this.passwordInput.current.value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.email_to_oauth.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        this.setState({password});\n\n        state.error = null;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '');\n    }\n\n    submit = (loginId, password, token) => {\n        emailToOAuth(\n            loginId,\n            password,\n            token,\n            this.props.newType,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({error: err.message, showMfa: false});\n                }\n            },\n        );\n    }\n\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const type = (this.props.newType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.newType));\n        const uiType = `${type} SSO`;\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form onSubmit={this.preSubmit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with {type} SSO'\n                            values={{\n                                type,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoNote'\n                            defaultMessage='You must already have a valid {type} account'\n                            values={{\n                                type,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.enterPwd'\n                            defaultMessage='Enter the password for your {site} account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref={this.passwordInput}\n                            placeholder={{id: t('claim.email_to_oauth.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_oauth.switchTo'\n                            defaultMessage='Switch Account to {uiType}'\n                            values={{\n                                uiType,\n                            }}\n                        />\n                    </button>\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_oauth.title'\n                        defaultMessage='Switch Email/Password Account to {uiType}'\n                        values={{\n                            uiType,\n                        }}\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LDAPToEmail extends React.PureComponent {\n    static propTypes = {\n        email: PropTypes.string,\n        passwordConfig: PropTypes.object,\n        switchLdapToEmail: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        this.ldapPasswordInput = React.createRef();\n        this.passwordInput = React.createRef();\n        this.passwordConfirmInput = React.createRef();\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const ldapPassword = this.ldapPasswordInput.current.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.ldap_to_email.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        const password = this.passwordInput.current.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.ldap_to_email.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n            });\n            return;\n        }\n\n        const confirmPassword = this.passwordConfirmInput.current.value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.confirmError = Utils.localizeMessage('claim.ldap_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '', ldapPassword);\n    }\n\n    submit = (loginId, password, token, ldapPassword) => {\n        this.props.switchLdapToEmail(ldapPassword || this.state.ldapPassword, this.props.email, password, token).then(({data, error: err}) => {\n            if (data && data.follow_link) {\n                window.location.href = data.follow_link;\n            } else if (err) {\n                if (err.server_error_id.startsWith('model.user.is_valid.pwd')) {\n                    this.setState({passwordError: err.message, showMfa: false});\n                } else if (err.server_error_id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    this.setState({ldapPasswordError: err.message, showMfa: false});\n                } else if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({serverError: err.message, showMfa: false});\n                }\n            }\n        });\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let confirmError = null;\n        let confimClass = 'form-group';\n        if (this.state.confirmError) {\n            confirmError = <div className='form-group has-error'><label className='control-label'>{this.state.confirmError}</label></div>;\n            confimClass += ' has-error';\n        }\n\n        const passwordPlaceholder = Utils.localizeMessage('claim.ldap_to_email.ldapPwd', 'AD/LDAP Password');\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.email'\n                            defaultMessage='After switching your authentication method, you will use {email} to login. Your AD/LDAP credentials will no longer allow access to Mattermost.'\n                            values={{\n                                email: this.props.email,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterLdapPwd'\n                            defaultMessage='{ldapPassword}:'\n                            values={{\n                                ldapPassword: passwordPlaceholder,\n                            }}\n                        />\n                    </p>\n                    <div className={ldapPasswordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref={this.ldapPasswordInput}\n                            placeholder={passwordPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterPwd'\n                            defaultMessage='New email login password:'\n                        />\n                    </p>\n                    <div className={passwordClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref={this.passwordInput}\n                            placeholder={{id: t('claim.ldap_to_email.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <div className={confimClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref={this.passwordConfirmInput}\n                            placeholder={{id: t('claim.ldap_to_email.confirm'), defaultMessage: 'Confirm Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {confirmError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.ldap_to_email.switchTo'\n                            defaultMessage='Switch account to email/password'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.ldap_to_email.title'\n                        defaultMessage='Switch AD/LDAP Account to Email/Password'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToLdap} from 'actions/admin_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class EmailToLDAP extends React.PureComponent {\n    static propTypes = {\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n            showMfa: false,\n        };\n\n        this.emailPasswordInput = React.createRef();\n        this.ldapIdInput = React.createRef();\n        this.ldapPasswordInput = React.createRef();\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const password = this.emailPasswordInput.current && this.emailPasswordInput.current.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.email_to_ldap.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapId = this.ldapIdInput.current && this.ldapIdInput.current.value.trim();\n        if (!ldapId) {\n            state.ldapError = Utils.localizeMessage('claim.email_to_ldap.ldapIdError', 'Please enter your AD/LDAP ID.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapPassword = this.ldapPasswordInput.current && this.ldapPasswordInput.current.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.email_to_ldap.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapId = ldapId;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '', ldapId, ldapPassword);\n    }\n\n    submit = (loginId, password, token, ldapId, ldapPassword) => {\n        emailToLdap(\n            loginId,\n            password,\n            token,\n            ldapId || this.state.ldapId,\n            ldapPassword || this.state.ldapPassword,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    switch (err.id) {\n                    case 'ent.ldap.do_login.user_not_registered.app_error':\n                    case 'ent.ldap.do_login.user_filtered.app_error':\n                    case 'ent.ldap.do_login.matched_to_many_users.app_error':\n                        this.setState({ldapError: err.message, showMfa: false});\n                        break;\n                    case 'ent.ldap.do_login.invalid_password.app_error':\n                        this.setState({ldapPasswordError: err.message, showMfa: false});\n                        break;\n                    case 'api.user.check_user_password.invalid.app_error':\n                        this.setState({passwordError: err.message, showMfa: false});\n                        break;\n                    default:\n                        this.setState({serverError: err.message, showMfa: false});\n                    }\n                }\n            },\n        );\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapError = null;\n        let ldapClass = 'form-group';\n        if (this.state.ldapError) {\n            ldapError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapError}</label></div>;\n            ldapClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let loginPlaceholder;\n        if (this.props.ldapLoginFieldName) {\n            loginPlaceholder = this.props.ldapLoginFieldName;\n        } else {\n            loginPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapId', 'AD/LDAP ID');\n        }\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with AD/LDAP'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoNote'\n                            defaultMessage='You must already have a valid AD/LDAP account'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterPwd'\n                            defaultMessage='Enter the password for your {site} email account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <input\n                        type='text'\n                        style={style.usernameInput}\n                        name='fakeusernameremembered'\n                    />\n                    <div className={passwordClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='emailPassword'\n                            ref={this.emailPasswordInput}\n                            autoComplete='off'\n                            placeholder={{id: t('claim.email_to_ldap.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterLdapPwd'\n                            defaultMessage='Enter the ID and password for your AD/LDAP account'\n                        />\n                    </p>\n                    <div className={ldapClass}>\n                        <input\n                            type='text'\n                            className='form-control'\n                            name='ldapId'\n                            ref={this.ldapIdInput}\n                            autoComplete='off'\n                            placeholder={loginPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapError}\n                    <div className={ldapPasswordClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref={this.ldapPasswordInput}\n                            autoComplete='off'\n                            placeholder={{id: t('claim.email_to_ldap.ldapPwd'), defaultMessage: 'AD/LDAP Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_ldap.switchTo'\n                            defaultMessage='Switch Account to AD/LDAP'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_ldap.title'\n                        defaultMessage='Switch Email/Password Account to AD/LDAP'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nconst style = {\n    usernameInput: {display: 'none'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button';\nimport OAuthToEmail from 'components/claim/components/oauth_to_email';\nimport EmailToOAuth from 'components/claim/components/email_to_oauth';\nimport LDAPToEmail from 'components/claim/components/ldap_to_email';\nimport EmailToLDAP from 'components/claim/components/email_to_ldap';\n\ninterface PasswordConfig {\n    minimumLength: number;\n    requireLowercase: boolean;\n    requireUppercase: boolean;\n    requireNumber: boolean;\n    requireSymbol: boolean;\n}\n\ntype Location = {\n    search: string;\n}\n\ntype Props = {\n    location: Location;\n    siteName?: string;\n    ldapLoginFieldName?: string;\n    passwordConfig?: PasswordConfig;\n    match: {\n        url: string;\n    };\n    actions: {\n        switchLdapToEmail: (ldapPassword: string, email: string, emailPassword: string, mfaCode?: string) => ActionFunc;\n    };\n}\n\nexport default class ClaimController extends React.PureComponent<Props> {\n    render(): JSX.Element {\n        const email = (new URLSearchParams(this.props.location.search)).get('email');\n        const newType = (new URLSearchParams(this.props.location.search)).get('new_type');\n        const currentType = (new URLSearchParams(this.props.location.search)).get('old_type');\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            alt={'signup logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div id='claim'>\n                            <Switch>\n                                <Route\n                                    path={`${this.props.match.url}/oauth_to_email`}\n                                    render={() => (\n                                        <OAuthToEmail\n                                            currentType={currentType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            passwordConfig={this.props.passwordConfig}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_oauth`}\n                                    render={() => (\n                                        <EmailToOAuth\n                                            newType={newType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/ldap_to_email`}\n                                    render={() => (\n                                        <LDAPToEmail\n                                            email={email}\n                                            passwordConfig={this.props.passwordConfig}\n                                            switchLdapToEmail={this.props.actions.switchLdapToEmail}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_ldap`}\n                                    render={() => (\n                                        <EmailToLDAP\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            ldapLoginFieldName={this.props.ldapLoginFieldName}\n                                        />\n                                    )}\n                                />\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {switchLdapToEmail} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport ClaimController from './claim_controller';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const siteName = config.SiteName as string;\n    const ldapLoginFieldName = config.LdapLoginFieldName as string;\n\n    return {\n        siteName,\n        ldapLoginFieldName,\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            switchLdapToEmail,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClaimController);\n"],"sourceRoot":""}