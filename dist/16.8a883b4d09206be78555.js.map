{"version":3,"sources":["webpack:///./actions/views/login.js","webpack:///./components/common/back_button.tsx","webpack:///./components/common/site_name_and_description.tsx","webpack:///./components/form_error.tsx","webpack:///./components/login/login_controller/index.js","webpack:///./components/login/login_controller/login_controller.jsx","webpack:///./components/login/login_mfa.jsx","webpack:///./components/widgets/icons/fa_warning_icon.tsx","webpack:///./images/logo.png"],"names":["login","loginId","password","mfaToken","dispatch","ignoreMfaRequiredError","UserActions","loginById","userId","promise","result","error","server_error_id","data","BackButton","React","PureComponent","render","props","onClick","url","title","toString","SiteNameAndDescription","customDescriptionText","siteName","description","FormError","errors","iconClassName","margin","textClassName","type","length","message","err","mapStateToProps","state","config","getConfig","license","getLicense","isLicensed","IsLicensed","customBrandText","CustomBrandText","CustomDescriptionText","enableCustomBrand","EnableCustomBrand","enableLdap","EnableLdap","enableOpenServer","EnableOpenServer","enableSaml","EnableSaml","enableSignInWithEmail","EnableSignInWithEmail","enableSignInWithUsername","EnableSignInWithUsername","enableSignUpWithEmail","EnableSignUpWithEmail","enableSignUpWithGitLab","EnableSignUpWithGitLab","enableSignUpWithGoogle","EnableSignUpWithGoogle","enableSignUpWithOffice365","EnableSignUpWithOffice365","enableSignUpWithOpenId","EnableSignUpWithOpenId","ldapLoginFieldName","LdapLoginFieldName","samlLoginButtonText","SamlLoginButtonText","openidButtonText","OpenIdButtonText","openidButtonColor","OpenIdButtonColor","SiteName","initializing","requests","users","logout","status","RequestStatus","SUCCESS","storage","initialized","experimentalPrimaryTeam","ExperimentalPrimaryTeam","team","getTeamByName","member","getMyTeamMember","id","team_id","currentUser","getCurrentUser","mapDispatchToProps","actions","bindActionCreators","addUserToTeamFromInvite","connect","LoginController","constructor","sessionExpired","document","intl","formatMessage","defaultMessage","closeSessionExpiredNotification","showNotification","body","Utils","requireInteraction","silent","window","focus","then","closeNotification","catch","e","preventDefault","onDismissSessionExpired","location","newQuery","search","replace","browserHistory","pathname","hash","loginIdInput","current","value","setState","passwordInput","trim","toLowerCase","t","msgId","emailSigninEnabled","usernameSigninEnabled","ldapEnabled","serverError","ldapUsername","submit","token","loading","push","encodeURIComponent","showMfa","params","URLSearchParams","inviteToken","get","inviteId","finishSignin","query","redirectTo","LocalStorageStore","setWasLoggedIn","match","name","GlobalActions","target","brandImageError","text","brandImageUrl","Client4","getBrandImageUrl","brandImageStyle","display","handleBrandImageError","mentions","imagesMetadata","loginPlaceholders","slice","join","extraParam","Constants","GET_TERMS_ERROR","TERMS_REJECTED","SIGNIN_CHANGE","SIGNIN_VERIFIED","PASSWORD_CHANGE","CREATE_LDAP","loginControls","gitlabSigninEnabled","googleSigninEnabled","office365SigninEnabled","openIdSigninEnabled","samlSigninEnabled","samlEnabled","errorClass","preSubmit","handleLoginIdChange","createLoginPlaceholder","handlePasswordChange","checkSignUpEnabled","getOAuthRoute","buttonStyle","backgroundColor","buttonText","getUrl","createExtraText","createRef","componentDidMount","configureTitle","extra","email","getWasLoggedIn","set","SESSION_EXPIRED","showSessionExpiredNotificationIfNeeded","componentDidUpdate","componentWillUnmount","content","customContent","customClass","backButton","hideMfa","createLoginOptions","createCustomLogin","logoImage","intlShape","isRequired","PropTypes","object","bool","string","shape","func","injectIntl","LoginMfa","saving","handleSubmit","handleChange","localizeMessage","WarningIcon","className","additionalClassName"],"mappings":"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","file":"16.8a883b4d09206be78555.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\n\nexport function login(loginId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.login(loginId, password, mfaToken)));\n    };\n}\n\nexport function loginById(userId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.loginById(userId, password, mfaToken)));\n    };\n}\n\nasync function ignoreMfaRequiredError(promise) {\n    let result = await promise;\n\n    if (result.error && result.error.server_error_id === 'api.context.mfa_required.app_error') {\n        result = {data: true};\n    }\n\n    return result;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/',\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    customDescriptionText?: string;\n    siteName: string;\n}\n\nexport default class SiteNameAndDescription extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        siteName: 'Mattermost',\n    }\n\n    public render(): JSX.Element {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1 id='site_name'>{siteName}</h1>\n                <h4\n                    id='site_description'\n                    className='color--light'\n                >\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\n// accepts either a single error or an array of errors\ntype Props = {\n    type?: React.ReactNode;\n    error?: React.ReactNode;\n    textClassName?: string;\n    iconClassName?: string;\n    margin?: boolean;\n    errors?: React.ReactNode[];\n}\n\nexport default class FormError extends React.PureComponent<Props> {\n    public static defaultProps = {\n        error: null,\n        errors: [],\n    }\n    public render() {\n        const {error = null, errors = [], iconClassName, margin, textClassName, type} = this.props;\n\n        if (!error && errors.length === 0) {\n            return null;\n        }\n\n        // look for the first truthy error to display\n        let message = error;\n\n        if (!message) {\n            for (const err of errors) {\n                if (err) {\n                    message = err;\n                }\n            }\n        }\n\n        if (!message) {\n            return null;\n        }\n\n        if (type === 'modal') {\n            return (\n                <div className='form-group'>\n                    <label className='col-sm-12 has-error'>\n                        {message}\n                    </label>\n                </div>\n            );\n        }\n\n        if (type === 'backstage') {\n            return (\n                <div className='pull-left has-error'>\n                    <label className='control-label'>\n                        {message}\n                    </label>\n                </div>\n            );\n        }\n\n        if (margin) {\n            return (\n                <div className='form-group has-error'>\n                    <label className='control-label'>\n                        {message}\n                    </label>\n                </div>\n            );\n        }\n\n        return (\n            <div className={`col-sm-12 ${textClassName || 'has-error'}`}>\n                <label className='control-label'>\n                    <i className={`fa ${iconClassName || 'fa-exclamation-circle'}`}/> {message}\n                </label>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getTeamByName, getMyTeamMember} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {RequestStatus} from 'mattermost-redux/constants';\n\nimport {addUserToTeamFromInvite} from 'actions/team_actions';\n\nimport {login} from 'actions/views/login';\n\nimport LoginController from './login_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const license = getLicense(state);\n\n    const isLicensed = license.IsLicensed === 'true';\n\n    const customBrandText = config.CustomBrandText;\n    const customDescriptionText = config.CustomDescriptionText;\n    const enableCustomBrand = config.EnableCustomBrand === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableOpenServer = config.EnableOpenServer === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignInWithEmail = config.EnableSignInWithEmail === 'true';\n    const enableSignInWithUsername = config.EnableSignInWithUsername === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const enableSignUpWithOpenId = config.EnableSignUpWithOpenId === 'true';\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n    const samlLoginButtonText = config.SamlLoginButtonText;\n    const openidButtonText = config.OpenIdButtonText;\n    const openidButtonColor = config.OpenIdButtonColor;\n\n    const siteName = config.SiteName;\n    const initializing = state.requests.users.logout.status === RequestStatus.SUCCESS || !state.storage.initialized;\n\n    // Only set experimental team if user is on that team\n    let experimentalPrimaryTeam = config.ExperimentalPrimaryTeam;\n    if (experimentalPrimaryTeam) {\n        const team = getTeamByName(state, experimentalPrimaryTeam);\n        if (team) {\n            const member = getMyTeamMember(state, team.id);\n            if (!member || !member.team_id) {\n                experimentalPrimaryTeam = null;\n            }\n        } else {\n            experimentalPrimaryTeam = null;\n        }\n    }\n\n    return {\n        currentUser: getCurrentUser(state),\n        isLicensed,\n        customBrandText,\n        customDescriptionText,\n        enableCustomBrand,\n        enableLdap,\n        enableOpenServer,\n        enableSaml,\n        enableSignInWithEmail,\n        enableSignInWithUsername,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOffice365,\n        enableSignUpWithOpenId,\n        experimentalPrimaryTeam,\n        ldapLoginFieldName,\n        samlLoginButtonText,\n        openidButtonText,\n        openidButtonColor,\n        siteName,\n        initializing,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            login,\n            addUserToTeamFromInvite,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as GlobalActions from 'actions/global_actions';\nimport LocalStorageStore from 'stores/local_storage_store';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport {intlShape} from 'utils/react_intl';\nimport * as Utils from 'utils/utils.jsx';\nimport {showNotification} from 'utils/notifications';\nimport {t} from 'utils/i18n.jsx';\n\nimport logoImage from 'images/logo.png';\n\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\nimport AnnouncementBar from 'components/announcement_bar';\nimport FormError from 'components/form_error';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport BackButton from 'components/common/back_button';\nimport LoadingScreen from 'components/loading_screen';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport SuccessIcon from 'components/widgets/icons/fa_success_icon';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\nimport LocalizedInput from 'components/localized_input/localized_input';\nimport Markdown from 'components/markdown';\n\nimport LoginMfa from '../login_mfa.jsx';\n\nclass LoginController extends React.PureComponent {\n    static propTypes = {\n        intl: intlShape.isRequired,\n\n        location: PropTypes.object.isRequired,\n        isLicensed: PropTypes.bool.isRequired,\n        currentUser: PropTypes.object,\n        customBrandText: PropTypes.string,\n        customDescriptionText: PropTypes.string,\n        enableCustomBrand: PropTypes.bool.isRequired,\n        enableLdap: PropTypes.bool.isRequired,\n        enableOpenServer: PropTypes.bool.isRequired,\n        enableSaml: PropTypes.bool.isRequired,\n        enableSignInWithEmail: PropTypes.bool.isRequired,\n        enableSignInWithUsername: PropTypes.bool.isRequired,\n        enableSignUpWithEmail: PropTypes.bool.isRequired,\n        enableSignUpWithGitLab: PropTypes.bool.isRequired,\n        enableSignUpWithGoogle: PropTypes.bool.isRequired,\n        enableSignUpWithOffice365: PropTypes.bool.isRequired,\n        enableSignUpWithOpenId: PropTypes.bool.isRequired,\n        experimentalPrimaryTeam: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n        samlLoginButtonText: PropTypes.string,\n        openidButtonText: PropTypes.string,\n        openidButtonColor: PropTypes.string,\n        siteName: PropTypes.string,\n        initializing: PropTypes.bool,\n        actions: PropTypes.shape({\n            login: PropTypes.func.isRequired,\n            addUserToTeamFromInvite: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        let loginId = '';\n        if ((new URLSearchParams(this.props.location.search)).get('extra') === Constants.SIGNIN_VERIFIED && (new URLSearchParams(this.props.location.search)).get('email')) {\n            loginId = (new URLSearchParams(this.props.location.search)).get('email');\n        }\n\n        this.state = {\n            ldapEnabled: this.props.isLicensed && this.props.enableLdap,\n            usernameSigninEnabled: this.props.enableSignInWithUsername,\n            emailSigninEnabled: this.props.enableSignInWithEmail,\n            samlEnabled: this.props.isLicensed && this.props.enableSaml,\n            loginId,\n            password: '',\n            showMfa: false,\n            loading: false,\n            sessionExpired: false,\n            brandImageError: false,\n        };\n\n        this.loginIdInput = React.createRef();\n        this.passwordInput = React.createRef();\n    }\n\n    componentDidMount() {\n        this.configureTitle();\n\n        if (this.props.currentUser) {\n            GlobalActions.redirectUserToDefaultTeam();\n            return;\n        }\n\n        const search = new URLSearchParams(this.props.location.search);\n        const extra = search.get('extra');\n        const email = search.get('email');\n\n        if (extra === Constants.SIGNIN_VERIFIED && email) {\n            this.passwordInput.current.focus();\n        }\n\n        // Determine if the user was unexpectedly logged out.\n        if (LocalStorageStore.getWasLoggedIn()) {\n            if (extra === Constants.SIGNIN_CHANGE) {\n                // Assume that if the user triggered a sign in change, it was intended to logout.\n                // We can't preflight this, since in some flows it's the server that invalidates\n                // our session after we use it to complete the sign in change.\n                LocalStorageStore.setWasLoggedIn(false);\n            } else {\n                // Although the authority remains the local sessionExpired bit on the state, set this\n                // extra field in the querystring to signal the desktop app. And although eslint\n                // complains about this, it is allowed: https://reactjs.org/docs/react-component.html#componentdidmount.\n                // eslint-disable-next-line react/no-did-mount-set-state\n                this.setState({sessionExpired: true});\n                search.set('extra', Constants.SESSION_EXPIRED);\n                browserHistory.replace(`${this.props.location.pathname}?${search}`);\n            }\n        }\n\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentDidUpdate() {\n        this.configureTitle();\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentWillUnmount() {\n        if (this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    configureTitle = () => {\n        if (this.state.sessionExpired) {\n            document.title = this.props.intl.formatMessage({\n                id: 'login.session_expired.title',\n                defaultMessage: '* {siteName} - Session Expired',\n            }, {\n                siteName: this.props.siteName,\n            });\n        } else {\n            document.title = this.props.siteName;\n        }\n    }\n\n    showSessionExpiredNotificationIfNeeded = () => {\n        if (this.state.sessionExpired && !this.closeSessionExpiredNotification) {\n            showNotification({\n                title: this.props.siteName,\n                body: Utils.localizeMessage(\n                    'login.session_expired.notification',\n                    'Session Expired: Please sign in to continue receiving notifications.',\n                ),\n                requireInteraction: true,\n                silent: false,\n                onClick: () => {\n                    window.focus();\n                    if (this.closeSessionExpiredNotification()) {\n                        this.closeSessionExpiredNotification();\n                        this.closeSessionExpiredNotification = null;\n                    }\n                },\n            }).then((closeNotification) => {\n                this.closeSessionExpiredNotification = closeNotification;\n            }).catch(() => {\n                // Ignore the failure to display the notification.\n            });\n        } else if (!this.state.sessionExpired && this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        // Discard any session expiry notice once the user interacts with the login page.\n        this.onDismissSessionExpired();\n\n        const {location} = this.props;\n        const newQuery = location.search.replace(/(extra=password_change)&?/i, '');\n        if (newQuery !== location.search) {\n            browserHistory.replace(`${location.pathname}${newQuery}${location.hash}`);\n        }\n\n        // password managers don't always call onInput handlers for form fields so it's possible\n        // for the state to get out of sync with what the user sees in the browser\n        let loginId = this.state.loginId;\n        if (this.loginIdInput.current) {\n            loginId = this.loginIdInput.current.value;\n            if (loginId !== this.state.loginId) {\n                this.setState({loginId});\n            }\n        }\n\n        let password = this.state.password;\n        if (this.passwordInput.current) {\n            password = this.passwordInput.current.value;\n            if (password !== this.state.password) {\n                this.setState({password});\n            }\n        }\n\n        // don't trim the password since we support spaces in passwords\n        loginId = loginId.trim().toLowerCase();\n\n        if (!loginId) {\n            t('login.noEmail');\n            t('login.noEmailLdapUsername');\n            t('login.noEmailUsername');\n            t('login.noEmailUsernameLdapUsername');\n            t('login.noLdapUsername');\n            t('login.noUsername');\n            t('login.noUsernameLdapUsername');\n\n            // it's slightly weird to be constructing the message ID, but it's a bit nicer than triply nested if statements\n            let msgId = 'login.no';\n            if (this.state.emailSigninEnabled) {\n                msgId += 'Email';\n            }\n            if (this.state.usernameSigninEnabled) {\n                msgId += 'Username';\n            }\n            if (this.state.ldapEnabled) {\n                msgId += 'LdapUsername';\n            }\n\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id={msgId}\n                        values={{\n                            ldapUsername: this.props.ldapLoginFieldName || Utils.localizeMessage('login.ldapUsernameLower', 'AD/LDAP username'),\n                        }}\n                    />\n                ),\n            });\n            return;\n        }\n\n        if (!password) {\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id='login.noPassword'\n                        defaultMessage='Please enter your password'\n                    />\n                ),\n            });\n            return;\n        }\n\n        this.submit(loginId, password, '');\n    }\n\n    submit = (loginId, password, token) => {\n        this.setState({serverError: null, loading: true});\n\n        this.props.actions.login(loginId, password, token).then(async ({error}) => {\n            if (error) {\n                if (error.server_error_id === 'api.user.login.not_verified.app_error') {\n                    browserHistory.push('/should_verify_email?&email=' + encodeURIComponent(loginId));\n                } else if (error.server_error_id === 'store.sql_user.get_for_login.app_error' ||\n                    error.server_error_id === 'ent.ldap.do_login.user_not_registered.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.userNotFound'\n                                defaultMessage=\"We couldn't find an account matching your login credentials.\"\n                            />\n                        ),\n                    });\n                } else if (error.server_error_id === 'api.user.check_user_password.invalid.app_error' || error.server_error_id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.invalidPassword'\n                                defaultMessage='Your password is incorrect.'\n                            />\n                        ),\n                    });\n                } else if (!this.state.showMfa && error.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({showMfa: false, serverError: error.message, loading: false});\n                }\n\n                return;\n            }\n\n            // check for query params brought over from signup_user_complete\n            const params = new URLSearchParams(this.props.location.search);\n            const inviteToken = params.get('t') || '';\n            const inviteId = params.get('id') || '';\n\n            if (inviteId || inviteToken) {\n                const {data: team} = await this.props.actions.addUserToTeamFromInvite(inviteToken, inviteId);\n                if (team) {\n                    this.finishSignin(team);\n                } else {\n                    // there's not really a good way to deal with this, so just let the user log in like normal\n                    this.finishSignin();\n                }\n            } else {\n                this.finishSignin();\n            }\n        });\n    }\n\n    finishSignin = (team) => {\n        const experimentalPrimaryTeam = this.props.experimentalPrimaryTeam;\n        const query = new URLSearchParams(this.props.location.search);\n        const redirectTo = query.get('redirect_to');\n\n        Utils.setCSRFFromCookie();\n\n        // Record a successful login to local storage. If an unintentional logout occurs, e.g.\n        // via session expiration, this bit won't get reset and we can notify the user as such.\n        LocalStorageStore.setWasLoggedIn(true);\n        if (redirectTo && redirectTo.match(/^\\/([^/]|$)/)) {\n            browserHistory.push(redirectTo);\n        } else if (team) {\n            browserHistory.push(`/${team.name}`);\n        } else if (experimentalPrimaryTeam) {\n            browserHistory.push(`/${experimentalPrimaryTeam}`);\n        } else {\n            GlobalActions.redirectUserToDefaultTeam();\n        }\n    }\n\n    handleLoginIdChange = (e) => {\n        this.setState({\n            loginId: e.target.value,\n        });\n    }\n\n    handlePasswordChange = (e) => {\n        this.setState({\n            password: e.target.value,\n        });\n    }\n\n    handleBrandImageError = () => {\n        this.setState({brandImageError: true});\n    }\n\n    createCustomLogin = () => {\n        if (this.props.enableCustomBrand) {\n            const text = this.props.customBrandText || '';\n            const brandImageUrl = Client4.getBrandImageUrl(0);\n            const brandImageStyle = this.state.brandImageError ? {display: 'none'} : {};\n\n            return (\n                <div>\n                    <img\n                        alt={'brand image'}\n                        src={brandImageUrl}\n                        onError={this.handleBrandImageError}\n                        style={brandImageStyle}\n                    />\n                    <div>\n                        <Markdown\n                            message={text}\n                            options={\n                                {mentions: false,\n                                    imagesMetadata: null}\n                            }\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginPlaceholder = () => {\n        const ldapEnabled = this.state.ldapEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        const loginPlaceholders = [];\n        if (emailSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.email', 'Email'));\n        }\n\n        if (usernameSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.username', 'Username'));\n        }\n\n        if (ldapEnabled) {\n            if (this.props.ldapLoginFieldName) {\n                loginPlaceholders.push(this.props.ldapLoginFieldName);\n            } else {\n                loginPlaceholders.push(Utils.localizeMessage('login.ldapUsername', 'AD/LDAP Username'));\n            }\n        }\n\n        if (loginPlaceholders.length >= 2) {\n            return loginPlaceholders.slice(0, loginPlaceholders.length - 1).join(', ') +\n                Utils.localizeMessage('login.placeholderOr', ' or ') +\n                loginPlaceholders[loginPlaceholders.length - 1];\n        } else if (loginPlaceholders.length === 1) {\n            return loginPlaceholders[0];\n        }\n\n        return '';\n    }\n\n    checkSignUpEnabled = () => {\n        return this.props.enableSignUpWithEmail ||\n            this.props.enableSignUpWithGitLab ||\n            this.props.enableSignUpWithOffice365 ||\n            this.props.enableSignUpWithGoogle ||\n            this.props.enableSignUpWithOpenId ||\n            this.props.enableLdap ||\n            this.props.enableSaml;\n    }\n\n    onDismissSessionExpired = () => {\n        LocalStorageStore.setWasLoggedIn(false);\n        this.setState({sessionExpired: false});\n    }\n\n    createExtraText = () => {\n        const extraParam = (new URLSearchParams(this.props.location.search)).get('extra');\n\n        if (this.state.sessionExpired) {\n            return (\n                <div className='alert alert-warning'>\n                    <WarningIcon/>\n                    {' '}\n                    <FormattedMessage\n                        id='login.session_expired'\n                        defaultMessage='Your session has expired. Please log in again.'\n                    />\n                    {' '}\n                    <Link\n                        className='btn-close'\n                        to='/login'\n                        onClick={this.onDismissSessionExpired}\n                    >\n                        <span>\n                            {'×'}\n                        </span>\n                    </Link>\n                </div>\n            );\n        }\n\n        if (extraParam === Constants.GET_TERMS_ERROR) {\n            return (\n                <div className='alert has-error no-padding'>\n                    <label className='control-label'>\n                        <FormattedMessage\n                            id='login.get_terms_error'\n                            defaultMessage='Unable to load terms of service. If this issue persists, contact your System Administrator.'\n                        />\n                    </label>\n                </div>\n            );\n        } else if (extraParam === Constants.TERMS_REJECTED) {\n            return (\n                <div className='alert alert-warning'>\n                    <WarningIcon/>\n                    <FormattedMarkdownMessage\n                        id='login.terms_rejected'\n                        defaultMessage='You must agree to the terms of service before accessing {siteName}. Please contact your System Administrator for more details.'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_CHANGE) {\n            return (\n                <div className='alert alert-success'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.changed'\n                        defaultMessage=' Sign-in method changed successfully'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_VERIFIED) {\n            return (\n                <div className='alert alert-success'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.verified'\n                        defaultMessage=' Email Verified'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.PASSWORD_CHANGE) {\n            return (\n                <div\n                    id='passwordUpdatedSuccess'\n                    className='alert alert-success'\n                >\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.passwordChanged'\n                        defaultMessage=' Password updated successfully'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.CREATE_LDAP) {\n            return (\n                <div className='alert alert-grey'>\n                    <FormattedMessage\n                        id='login.ldapCreate'\n                        defaultMessage=' Enter your AD/LDAP username and password to create an account.'\n                    />\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginOptions = () => {\n        const loginControls = [];\n\n        const ldapEnabled = this.state.ldapEnabled;\n        const gitlabSigninEnabled = this.props.enableSignUpWithGitLab;\n        const googleSigninEnabled = this.props.enableSignUpWithGoogle;\n        const office365SigninEnabled = this.props.enableSignUpWithOffice365;\n        const openIdSigninEnabled = this.props.enableSignUpWithOpenId;\n        const samlSigninEnabled = this.state.samlEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        if (emailSigninEnabled || usernameSigninEnabled || ldapEnabled) {\n            let errorClass = '';\n            if (this.state.serverError) {\n                errorClass = ' has-error';\n            }\n\n            loginControls.push(\n                <form\n                    key='loginBoxes'\n                    onSubmit={this.preSubmit}\n                >\n                    <div className='signup__email-container'>\n                        <FormError\n                            error={this.state.serverError}\n                            margin={true}\n                        />\n                        <div className={'form-group' + errorClass}>\n                            <input\n                                id='loginId'\n                                className='form-control'\n                                ref={this.loginIdInput}\n                                name='loginId'\n                                value={this.state.loginId}\n                                onChange={this.handleLoginIdChange}\n                                placeholder={this.createLoginPlaceholder()}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                                autoFocus={true}\n                            />\n                        </div>\n                        <div className={'form-group' + errorClass}>\n                            <LocalizedInput\n                                id='loginPassword'\n                                type='password'\n                                className='form-control'\n                                ref={this.passwordInput}\n                                name='password'\n                                value={this.state.password}\n                                onChange={this.handlePasswordChange}\n                                placeholder={{id: t('login.password'), defaultMessage: 'Password'}}\n                                spellCheck='false'\n                            />\n                        </div>\n                        <div className='form-group'>\n                            <button\n                                id='loginButton'\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                <LoadingWrapper\n                                    id='login_button_signing'\n                                    loading={this.state.loading}\n                                    text={Utils.localizeMessage('login.signInLoading', 'Signing in...')}\n                                >\n                                    <FormattedMessage\n                                        id='login.signIn'\n                                        defaultMessage='Sign in'\n                                    />\n                                </LoadingWrapper>\n                            </button>\n                        </div>\n                    </div>\n                </form>,\n            );\n        }\n\n        if (this.props.enableOpenServer && this.checkSignUpEnabled()) {\n            loginControls.push(\n                <div\n                    className='form-group'\n                    key='signup'\n                >\n                    <span>\n                        <FormattedMessage\n                            id='login.noAccount'\n                            defaultMessage=\"Don't have an account? \"\n                        />\n                        <Link\n                            id='signup'\n                            to={'/signup_user_complete' + this.props.location.search}\n                            className='signup-team-login'\n                        >\n                            <FormattedMessage\n                                id='login.create'\n                                defaultMessage='Create one now'\n                            />\n                        </Link>\n                    </span>\n                </div>,\n            );\n        }\n\n        if (usernameSigninEnabled || emailSigninEnabled) {\n            loginControls.push(\n                <div\n                    id='login_forgot'\n                    key='forgotPassword'\n                    className='form-group'\n                >\n                    <Link to={'/reset_password'}>\n                        <FormattedMessage\n                            id='login.forgot'\n                            defaultMessage='I forgot my password.'\n                        />\n                    </Link>\n                </div>,\n            );\n        }\n\n        if ((emailSigninEnabled || usernameSigninEnabled || ldapEnabled) && (gitlabSigninEnabled || googleSigninEnabled || samlSigninEnabled || office365SigninEnabled || openIdSigninEnabled)) {\n            loginControls.push(\n                <div\n                    key='divider'\n                    className='or__container'\n                >\n                    <FormattedMessage\n                        id='login.or'\n                        defaultMessage='or'\n                    />\n                </div>,\n            );\n\n            loginControls.push(\n                <h5 key='oauthHeader'>\n                    <FormattedMessage\n                        id='login.signInWith'\n                        defaultMessage='Sign in with:'\n                    />\n                </h5>,\n            );\n        }\n\n        if (gitlabSigninEnabled) {\n            loginControls.push(\n                <a\n                    id='GitLabButton'\n                    className='btn btn-custom-login gitlab'\n                    key='gitlab'\n                    href={Client4.getOAuthRoute() + '/gitlab/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.gitlab'\n                                defaultMessage='GitLab'\n                            />\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (googleSigninEnabled) {\n            loginControls.push(\n                <a\n                    id='GoogleButton'\n                    className='btn btn-custom-login google'\n                    key='google'\n                    href={Client4.getOAuthRoute() + '/google/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.google'\n                                defaultMessage='Google Apps'\n                            />\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (office365SigninEnabled) {\n            loginControls.push(\n                <a\n                    id='Office365Button'\n                    className='btn btn-custom-login office365'\n                    key='office365'\n                    href={Client4.getOAuthRoute() + '/office365/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.office365'\n                                defaultMessage='Office 365'\n                            />\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (openIdSigninEnabled) {\n            const buttonStyle = {};\n            if (this.props.openidButtonColor) {\n                buttonStyle.backgroundColor = this.props.openidButtonColor;\n            }\n            let buttonText = (\n                <FormattedMessage\n                    id='login.openid'\n                    defaultMessage='Open ID'\n                />\n            );\n            if (this.props.openidButtonText) {\n                buttonText = this.props.openidButtonText;\n            }\n            loginControls.push(\n                <a\n                    id='OpenIdButton'\n                    className='btn btn-custom-login openid'\n                    style={buttonStyle}\n                    key='openid'\n                    href={Client4.getOAuthRoute() + '/openid/login' + this.props.location.search}\n                >\n                    <span>\n                        <span>\n                            {buttonText}\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (samlSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login saml'\n                    key='saml'\n                    href={Client4.getUrl() + '/login/sso/saml' + this.props.location.search}\n                >\n                    <span>\n                        <span\n                            className='icon fa fa-lock fa--margin-top'\n                            title='Saml icon'\n                        />\n                        <span>\n                            {this.props.samlLoginButtonText}\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (loginControls.length === 0) {\n            loginControls.push(\n                <FormError\n                    key='noMethods'\n                    error={\n                        <FormattedMessage\n                            id='login.noMethods'\n                            defaultMessage='No sign-in methods are enabled. Please contact your System Administrator.'\n                        />\n                    }\n                    margin={true}\n                />,\n            );\n        }\n\n        return (\n            <div>\n                {this.createExtraText()}\n                {loginControls}\n            </div>\n        );\n    }\n\n    hideMfa = () => {\n        this.setState({showMfa: false});\n    }\n\n    render() {\n        const {\n            customDescriptionText,\n            siteName,\n            initializing,\n        } = this.props;\n\n        if (initializing) {\n            return (<LoadingScreen/>);\n        }\n\n        let content;\n        let customContent;\n        let customClass;\n        let backButton;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.state.loginId}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n            backButton = (<BackButton onClick={this.hideMfa}/>);\n        } else {\n            content = this.createLoginOptions();\n            customContent = this.createCustomLogin();\n            if (customContent) {\n                customClass = 'branded';\n            }\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                {backButton}\n                <div\n                    id='login_section'\n                    className='col-sm-12'\n                >\n                    <div className={'signup-team__container ' + customClass}>\n                        <div className='signup__markdown'>\n                            {customContent}\n                        </div>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <SiteNameAndDescription\n                                customDescriptionText={customDescriptionText}\n                                siteName={siteName}\n                            />\n                            {content}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(LoginController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SaveButton from 'components/save_button';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LoginMfa extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * User's login ID\n         */\n        loginId: PropTypes.string.isRequired,\n\n        /*\n         * User's password\n         */\n        password: PropTypes.string.isRequired,\n\n        /*\n         * Function to call when submitting user credentials\n         */\n        submit: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            saving: false,\n            token: '',\n            serverError: '',\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        const token = e.target.value.trim().replace(/\\s/g, '');\n\n        if (token !== this.state.token) {\n            this.setState({\n                token,\n            });\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        state.serverError = '';\n        state.saving = true;\n        this.setState(state);\n\n        this.props.submit(\n            this.props.loginId.toLowerCase(),\n            this.props.password,\n            this.state.token,\n        );\n    }\n\n    render() {\n        let serverError;\n        let errorClass = '';\n        if (this.state.serverError) {\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\n            errorClass = ' has-error';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='signup__email-container'>\n                    <p>\n                        <FormattedMessage\n                            id='login_mfa.enterToken'\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\n                        />\n                    </p>\n                    <div className={'form-group' + errorClass}>\n                        {serverError}\n                    </div>\n                    <div className={'form-group' + errorClass}>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            name='token'\n                            placeholder={{id: t('login_mfa.token'), defaultMessage: 'MFA Token'}}\n                            spellCheck='false'\n                            autoComplete='off'\n                            autoFocus={true}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={this.state.saving}\n                            onClick={this.handleSubmit}\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\n                        />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport {t} from 'utils/i18n';\n\ntype Props = {\n    additionalClassName: string | null;\n}\n\nexport default class WarningIcon extends React.PureComponent<Props> {\n    public static defaultProps: Props = {\n        additionalClassName: null,\n    };\n\n    public render(): JSX.Element {\n        const className = 'fa fa-warning' + (this.props.additionalClassName ? ' ' + this.props.additionalClassName : '');\n        return (\n            <LocalizedIcon\n                className={className}\n                title={{id: t('generic_icons.warning'), defaultMessage: 'Warning Icon'}}\n            />\n        );\n    }\n}\n","export default __webpack_public_path__ + \"files/ab8aa80cba445eb0fb75e6611c292567.png\";"],"sourceRoot":""}