{"version":3,"sources":["webpack:///./components/common/back_button.tsx","webpack:///./images/logo.png","webpack:///./components/signup/signup_controller/signup_controller.jsx","webpack:///./components/signup/signup_controller/index.js"],"names":["BackButton","React","PureComponent","render","id","className","onClick","this","props","to","url","defaultMessage","title","toString","SignupController","constructor","super","async","token","inviteId","data","team","error","actions","addUserToTeamFromInvite","browserHistory","push","name","Constants","DEFAULT_CHANNEL","handleInvalidInvite","getTeamInviteInfo","setState","serverError","loading","err","server_error_id","message","noOpenServerError","signupControls","enableSignUpWithEmail","key","window","location","search","component","t","enableSignUpWithGitLab","href","Client4","getOAuthRoute","isLicensed","enableSignUpWithGoogle","enableSignUpWithOffice365","enableSignUpWithOpenId","buttonStyle","openidButtonColor","backgroundColor","buttonText","openidButtonText","style","enableLDAP","params","URLSearchParams","append","query","LDAPText","ldapLoginFieldName","enableSAML","samlLoginButtonText","length","signupDisabledError","margin","usedBefore","get","loggedIn","enableOpenServer","noAccounts","state","componentDidMount","removeGlobalItem","userLoggedIn","getInviteInfo","GlobalActions","renderSignupControls","alt","src","logoImage","siteName","PropTypes","object","bool","isRequired","string","shape","func","connect","ownProps","license","getLicense","config","getConfig","IsLicensed","EnableOpenServer","NoAccounts","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOffice365","EnableLdap","EnableSaml","SamlLoginButtonText","LdapLoginFieldName","SiteName","getGlobalItem","Boolean","getCurrentUserId","dispatch","bindActionCreators"],"mappings":"sTAoBe,MAAMA,UAAmBC,IAAMC,cAKnCC,SACH,OACI,yBACIC,GAAG,cACHC,UAAU,iBAEV,kBAAC,OAAD,CACIC,QAASC,KAAKC,MAAMF,QACpBG,GAAIF,KAAKC,MAAME,KAEf,kBAAC,IAAD,CACIN,GAAG,qBACHO,eAAe,aAEbC,GACE,0BACIR,GAAG,mBACHC,UAAU,yBACVO,MAAOA,EAAMC,cAIzB,kBAAC,IAAD,CACIT,GAAG,kBACHO,eAAe,Y,EA7BlBX,E,aARjBU,I,WAKAJ,Q,aAGiBN,E,eAC4B,CACzCU,IAAK,O,kCCtBE,QAA0B,8C,qaCqB1B,MAAMI,UAAyBb,IAAMC,cA2BhDa,YAAYP,GACRQ,MAAMR,GADS,iCA6DOS,MAAOC,EAAOC,KACpC,MAAOC,KAAMC,EAAP,MAAaC,SAAef,KAAKC,MAAMe,QAAQC,wBAAwBN,EAAOC,GAChFE,EACAI,IAAeC,KAAK,IAAML,EAAKM,KAAX,oBAA+BC,IAAUC,kBACtDP,GACPf,KAAKuB,oBAAoBR,KAlEd,uBAsEHL,UACZ,MAAM,KAACG,EAAD,MAAOE,SAAef,KAAKC,MAAMe,QAAQQ,kBAAkBZ,GAC7DC,EACAb,KAAKyB,SAAS,CACVC,YAAa,GACbC,SAAS,IAENZ,GACPf,KAAKuB,oBAAoBR,KA9Ed,6BAkFIa,IACnB,IAAIF,EAEAA,EADwB,+CAAxBE,EAAIC,iBAE2B,0DAAxBD,EAAIC,gBADGD,EAAIE,QAKd,kBAAC,IAAD,CACIjC,GAAG,uCACHO,eAAe,iGAK3BJ,KAAKyB,SAAS,CACVM,mBAAmB,EACnBJ,SAAS,EACTD,kBApGW,8BAwGI,KACnB,IAAIM,EAAiB,GAoFrB,GAlFIhC,KAAKC,MAAMgC,uBACXD,EAAeb,KACX,kBAAC,OAAD,CACIrB,UAAU,uCACVoC,IAAI,QACJhC,GAAI,gBAAkBiC,OAAOC,SAASC,QAEtC,8BACI,kBAAC,IAAD,CACIvC,UAAU,sBACVwC,UAAU,OACVjC,MAAO,CAACR,GAAI0C,YAAE,qBAAsBnC,eAAgB,gBAExD,kBAAC,IAAD,CACIP,GAAG,eACHO,eAAe,0BAO/BJ,KAAKC,MAAMuC,wBACXR,EAAeb,KACX,uBACIrB,UAAU,wCACVoC,IAAI,SACJO,KAAMC,UAAQC,gBAAkB,iBAAmBR,OAAOC,SAASC,QAEnE,8BACI,0BAAMvC,UAAU,SAChB,8BACI,kBAAC,IAAD,CACID,GAAG,gBACHO,eAAe,8BAQnCJ,KAAKC,MAAM2C,YAAc5C,KAAKC,MAAM4C,wBACpCb,EAAeb,KACX,uBACIrB,UAAU,wCACVoC,IAAI,SACJO,KAAMC,UAAQC,gBAAkB,iBAAmBR,OAAOC,SAASC,QAEnE,8BACI,0BAAMvC,UAAU,SAChB,8BACI,kBAAC,IAAD,CACID,GAAG,gBACHO,eAAe,uBAQnCJ,KAAKC,MAAM2C,YAAc5C,KAAKC,MAAM6C,2BACpCd,EAAeb,KACX,uBACIrB,UAAU,2CACVoC,IAAI,YACJO,KAAMC,UAAQC,gBAAkB,oBAAsBR,OAAOC,SAASC,QAEtE,8BACI,0BAAMvC,UAAU,SAChB,8BACI,kBAAC,IAAD,CACID,GAAG,mBACHO,eAAe,mBAQnCJ,KAAKC,MAAM2C,YAAc5C,KAAKC,MAAM8C,uBAAwB,CAC5D,MAAMC,EAAc,GAChBhD,KAAKC,MAAMgD,oBACXD,EAAYE,gBAAkBlD,KAAKC,MAAMgD,mBAE7C,IAAIE,EACA,kBAAC,IAAD,CACItD,GAAG,eACHO,eAAe,YAGnBJ,KAAKC,MAAMmD,mBACXD,EAAanD,KAAKC,MAAMmD,kBAE5BpB,EAAeb,KACX,uBACItB,GAAG,eACHC,UAAU,wCACVuD,MAAOL,EACPd,IAAI,SACJO,KAAMC,UAAQC,gBAAkB,iBAAmBR,OAAOC,SAASC,QAEnE,8BACI,8BACKc,MAOrB,GAAInD,KAAKC,MAAM2C,YAAc5C,KAAKC,MAAMqD,WAAY,CAChD,MAAMC,EAAS,IAAIC,gBAAgBxD,KAAKC,MAAMmC,SAASC,QACvDkB,EAAOE,OAAO,QAAS,eACvB,MAAMC,EAAQ,IAAMH,EAAOjD,WAE3B,IAAIqD,EACA,kBAAC,IAAD,CACI9D,GAAG,cACHO,eAAe,wBAGnBJ,KAAKC,MAAM2D,qBACXD,EAAW3D,KAAKC,MAAM2D,oBAE1B5B,EAAeb,KACX,kBAAC,OAAD,CACIrB,UAAU,sCACVoC,IAAI,OACJhC,GAAI,SAAWwD,GAEf,8BACI,kBAAC,IAAD,CACI5D,UAAU,wCACVwC,UAAU,OACVjC,MAAO,CAACR,GAAI0C,YAAE,oBAAqBnC,eAAgB,kBAEvD,8BACKuD,MAOrB,GAAI3D,KAAKC,MAAM2C,YAAc5C,KAAKC,MAAM4D,WAAY,CAChD,IAAIH,EAAQ,GAERA,EADAvB,OAAOC,SAASC,OACR,iBAEA,iBAGZL,EAAeb,KACX,kBAAC,OAAD,CACIrB,UAAU,sCACVoC,IAAI,OACJhC,GAAI,kBAAoBiC,OAAOC,SAASC,OAASqB,GAEjD,8BACI,kBAAC,IAAD,CACI5D,UAAU,iCACVwC,UAAU,OACVjC,MAAO,CAACR,GAAI0C,YAAE,oBAAqBnC,eAAgB,eAEvD,8BACKJ,KAAKC,MAAM6D,wBAOhC,GAA8B,IAA1B9B,EAAe+B,OAAc,CAC7B,MAAMC,EACF,kBAAC,IAAD,CACInE,GAAG,6BACHO,eAAe,0FAGvB4B,EACI,kBAAC,IAAD,CACIjB,MAAOiD,EACPC,QAAQ,SAGb,GAA8B,IAA1BjC,EAAe+B,OAAc,CACpC,GAAI/D,KAAKC,MAAMgC,sBACX,OAAOf,IAAeC,KAAK,gBAAkBgB,OAAOC,SAASC,QAC1D,GAAIrC,KAAKC,MAAM2C,YAAc5C,KAAKC,MAAMqD,WAC3C,OAAOpC,IAAeC,KAAK,SAAWgB,OAAOC,SAASC,QAI9D,OAAOL,IA5SP,IAAIL,GAAU,EACVD,EAAc,GACdK,GAAoB,EACpBmC,GAAa,EAEjB,GAAIlE,KAAKC,MAAMmC,SAASC,OAAQ,CAC5B,MAAMkB,EAAS,IAAIC,gBAAgBxD,KAAKC,MAAMmC,SAASC,QACvD,IAAI1B,EAAQ4C,EAAOY,IAAI,KACV,MAATxD,IACAA,EAAQ,IAEZ,IAAIC,EAAW2C,EAAOY,IAAI,MACV,MAAZvD,IACAA,EAAW,IAGXA,EACAe,GAAU,EACF3B,KAAKC,MAAMmE,SAEXxD,GAAaZ,KAAKC,MAAMoE,kBAAqBrE,KAAKC,MAAMqE,aAChEvC,GAAoB,EACpBL,EACI,kBAAC,IAAD,CACI7B,GAAG,uCACHO,eAAe,8GANvB8D,EAAajE,EAAMiE,WAY3BlE,KAAKuE,MAAQ,CACT5C,UACAD,cACAK,oBACAmC,cAIRM,oBAEI,GADAxE,KAAKC,MAAMe,QAAQyD,iBAAiB,QAChCzE,KAAKC,MAAMmC,SAASC,OAAQ,CAC5B,MAAMkB,EAAS,IAAIC,gBAAgBxD,KAAKC,MAAMmC,SAASC,QACjD1B,EAAQ4C,EAAOY,IAAI,MAAQ,GAC3BvD,EAAW2C,EAAOY,IAAI,OAAS,GAE/BO,EAAe1E,KAAKC,MAAMmE,UAE3BxD,GAAYD,IAAU+D,EACvB1E,KAAKiB,wBAAwBN,EAAOC,GAC7BA,EACPZ,KAAK2E,cAAc/D,GACZ8D,GACPE,OA0PZhF,SACI,GAAII,KAAKuE,MAAM5C,QACX,OAAQ,kBAAC,IAAD,MAGZ,GAAI3B,KAAKuE,MAAML,WACX,OACI,6BACI,kBAAC,IAAD,CACIrE,GAAG,gCACHO,eAAe,qGAM/B,IASI4B,EATAN,EAAc,KAgBlB,OAfI1B,KAAKuE,MAAM7C,cACXA,EACI,yBAAK5B,UAAW,wBACZ,2BAAOA,UAAU,iBAAiBE,KAAKuE,MAAM7C,eAOrDM,EADAhC,KAAKuE,MAAMxC,mBAAqB/B,KAAKuE,MAAML,WAC1B,KAEAlE,KAAK6E,uBAItB,6BACI,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,yBAAK/E,UAAU,aACX,yBAAKA,UAAU,0BACX,yBACIgF,IAAK,mBACLhF,UAAU,mBACViF,IAAKC,MAET,yBAAKlF,UAAU,mBACX,4BAAKE,KAAKC,MAAMgF,UAChB,wBAAInF,UAAU,gBACV,kBAAC,IAAD,CACID,GAAG,0BAGX,yBAAKC,UAAU,QACX,4BAAI,gCACA,kBAAC,IAAD,CACID,GAAG,eACHO,eAAe,+BAI1B4B,EACAN,GAEL,0BAAM5B,UAAU,gBACZ,kBAAC,IAAD,CACID,GAAG,oCACHO,eAAe,6BAElB,IACD,kBAAC,OAAD,CACIF,GAAI,SAAWF,KAAKC,MAAMmC,SAASC,QAEnC,kBAAC,IAAD,CACIxC,GAAG,+BACHO,eAAe,iC,EArZ9BG,E,YACE,CACf6B,SAAU8C,IAAUC,OACpBf,SAAUc,IAAUE,KAAKC,WACzBzC,WAAYsC,IAAUE,KAAKC,WAC3BhB,iBAAkBa,IAAUE,KAAKC,WACjCf,WAAYY,IAAUE,KAAKC,WAC3BpD,sBAAuBiD,IAAUE,KAAKC,WACtC7C,uBAAwB0C,IAAUE,KAAKC,WACvCxC,uBAAwBqC,IAAUE,KAAKC,WACvCvC,0BAA2BoC,IAAUE,KAAKC,WAC1CtC,uBAAwBmC,IAAUE,KAAKC,WACvC/B,WAAY4B,IAAUE,KAAKC,WAC3BxB,WAAYqB,IAAUE,KAAKC,WAC3BvB,oBAAqBoB,IAAUI,OAC/BL,SAAUC,IAAUI,OACpBpB,WAAYgB,IAAUI,OACtB1B,mBAAoBsB,IAAUI,OAAOD,WACrCjC,iBAAkB8B,IAAUI,OAC5BrC,kBAAmBiC,IAAUI,OAC7BtE,QAASkE,IAAUK,MAAM,CACrBd,iBAAkBS,IAAUM,KAAKH,WACjC7D,kBAAmB0D,IAAUM,KAAKH,WAClCpE,wBAAyBiE,IAAUM,KAAKH,aACzCA,aC0BII,6BAvDf,SAAyBlB,EAAOmB,GAC5B,MAAMC,EAAUC,qBAAWrB,GACrBsB,EAASC,oBAAUvB,GAEnB3B,EAAa+C,GAAkC,SAAvBA,EAAQI,WAChC1B,EAA+C,SAA5BwB,EAAOG,iBAC1B1B,EAAmC,SAAtBuB,EAAOI,WACpBhE,EAAyD,SAAjC4D,EAAOK,sBAC/B1D,EAA2D,SAAlCqD,EAAOM,uBAChCtD,EAA2D,SAAlCgD,EAAOO,uBAChCtD,EAAiE,SAArC+C,EAAOQ,0BACnC/C,EAAmC,SAAtBuC,EAAOS,WACpBzC,EAAmC,SAAtBgC,EAAOU,WACpBzC,EAAsB+B,EAAOW,oBAC7B5C,EAAqBiC,EAAOY,mBAC5BxB,EAAWY,EAAOa,SAExB,IAAIxC,EACJ,GAAIwB,EAAStD,SAASC,OAAQ,CAE1B,IAAI1B,EADW,IAAI6C,gBAAgBkC,EAAStD,SAASC,QAClC8B,IAAI,KACV,MAATxD,IACAA,EAAQ,IAEZuD,EAAayC,YAAcpC,EAAO5D,EAAO,MAG7C,MAAO,CACHyD,SAAUwC,QAAQC,2BAAiBtC,IACnC3B,aACAyB,mBACAC,aACArC,wBACAO,yBACAK,yBACAC,4BACAQ,aACAO,aACAC,sBACAF,qBACAqB,WACAf,iBAIR,SAA4B4C,GACxB,MAAO,CACH9F,QAAS+F,6BAAmB,CACxBtC,qBACAjD,sCACAP,6BACD6F,MAIIrB,CAA6ClF","file":"20.91734c300ffd8ca56cc0.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/',\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","export default __webpack_public_path__ + \"files/ab8aa80cba445eb0fb75e6611c292567.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport {Client4} from 'mattermost-redux/client';\n\nimport {browserHistory} from 'utils/browser_history';\nimport * as GlobalActions from 'actions/global_actions';\nimport logoImage from 'images/logo.png';\nimport AnnouncementBar from 'components/announcement_bar';\nimport BackButton from 'components/common/back_button';\nimport FormError from 'components/form_error';\nimport LocalizedIcon from 'components/localized_icon';\n\nimport LoadingScreen from 'components/loading_screen';\nimport {Constants} from 'utils/constants';\nimport {t} from 'utils/i18n';\n\nexport default class SignupController extends React.PureComponent {\n    static propTypes = {\n        location: PropTypes.object,\n        loggedIn: PropTypes.bool.isRequired,\n        isLicensed: PropTypes.bool.isRequired,\n        enableOpenServer: PropTypes.bool.isRequired,\n        noAccounts: PropTypes.bool.isRequired,\n        enableSignUpWithEmail: PropTypes.bool.isRequired,\n        enableSignUpWithGitLab: PropTypes.bool.isRequired,\n        enableSignUpWithGoogle: PropTypes.bool.isRequired,\n        enableSignUpWithOffice365: PropTypes.bool.isRequired,\n        enableSignUpWithOpenId: PropTypes.bool.isRequired,\n        enableLDAP: PropTypes.bool.isRequired,\n        enableSAML: PropTypes.bool.isRequired,\n        samlLoginButtonText: PropTypes.string,\n        siteName: PropTypes.string,\n        usedBefore: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string.isRequired,\n        openidButtonText: PropTypes.string,\n        openidButtonColor: PropTypes.string,\n        actions: PropTypes.shape({\n            removeGlobalItem: PropTypes.func.isRequired,\n            getTeamInviteInfo: PropTypes.func.isRequired,\n            addUserToTeamFromInvite: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        let loading = false;\n        let serverError = '';\n        let noOpenServerError = false;\n        let usedBefore = false;\n\n        if (this.props.location.search) {\n            const params = new URLSearchParams(this.props.location.search);\n            let token = params.get('t');\n            if (token == null) {\n                token = '';\n            }\n            let inviteId = params.get('id');\n            if (inviteId == null) {\n                inviteId = '';\n            }\n\n            if (inviteId) {\n                loading = true;\n            } else if (!this.props.loggedIn) {\n                usedBefore = props.usedBefore;\n            } else if (!inviteId && !this.props.enableOpenServer && !this.props.noAccounts) {\n                noOpenServerError = true;\n                serverError = (\n                    <FormattedMessage\n                        id='signup_user_completed.no_open_server'\n                        defaultMessage='This server does not allow open signups.  Please speak with your Administrator to receive an invitation.'\n                    />\n                );\n            }\n        }\n\n        this.state = {\n            loading,\n            serverError,\n            noOpenServerError,\n            usedBefore,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.removeGlobalItem('team');\n        if (this.props.location.search) {\n            const params = new URLSearchParams(this.props.location.search);\n            const token = params.get('t') || '';\n            const inviteId = params.get('id') || '';\n\n            const userLoggedIn = this.props.loggedIn;\n\n            if ((inviteId || token) && userLoggedIn) {\n                this.addUserToTeamFromInvite(token, inviteId);\n            } else if (inviteId) {\n                this.getInviteInfo(inviteId);\n            } else if (userLoggedIn) {\n                GlobalActions.redirectUserToDefaultTeam();\n            }\n        }\n    }\n\n    addUserToTeamFromInvite = async (token, inviteId) => {\n        const {data: team, error} = await this.props.actions.addUserToTeamFromInvite(token, inviteId);\n        if (team) {\n            browserHistory.push('/' + team.name + `/channels/${Constants.DEFAULT_CHANNEL}`);\n        } else if (error) {\n            this.handleInvalidInvite(error);\n        }\n    }\n\n    getInviteInfo = async (inviteId) => {\n        const {data, error} = await this.props.actions.getTeamInviteInfo(inviteId);\n        if (data) {\n            this.setState({\n                serverError: '',\n                loading: false,\n            });\n        } else if (error) {\n            this.handleInvalidInvite(error);\n        }\n    }\n\n    handleInvalidInvite = (err) => {\n        let serverError;\n        if (err.server_error_id === 'store.sql_user.save.max_accounts.app_error') {\n            serverError = err.message;\n        } else if (err.server_error_id === 'api.team.add_user_to_team_from_invite.guest.app_error') {\n            serverError = err.message;\n        } else {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.invalid_invite'\n                    defaultMessage='The invite link was invalid.  Please speak with your Administrator to receive an invitation.'\n                />\n            );\n        }\n\n        this.setState({\n            noOpenServerError: true,\n            loading: false,\n            serverError,\n        });\n    }\n\n    renderSignupControls = () => {\n        let signupControls = [];\n\n        if (this.props.enableSignUpWithEmail) {\n            signupControls.push(\n                <Link\n                    className='btn btn-custom-login btn--full email'\n                    key='email'\n                    to={'/signup_email' + window.location.search}\n                >\n                    <span>\n                        <LocalizedIcon\n                            className='icon fa fa-envelope'\n                            component='span'\n                            title={{id: t('signup.email.icon'), defaultMessage: 'Email Icon'}}\n                        />\n                        <FormattedMessage\n                            id='signup.email'\n                            defaultMessage='Email and Password'\n                        />\n                    </span>\n                </Link>,\n            );\n        }\n\n        if (this.props.enableSignUpWithGitLab) {\n            signupControls.push(\n                <a\n                    className='btn btn-custom-login btn--full gitlab'\n                    key='gitlab'\n                    href={Client4.getOAuthRoute() + '/gitlab/signup' + window.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='signup.gitlab'\n                                defaultMessage='GitLab Single Sign-On'\n                            />\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableSignUpWithGoogle) {\n            signupControls.push(\n                <a\n                    className='btn btn-custom-login btn--full google'\n                    key='google'\n                    href={Client4.getOAuthRoute() + '/google/signup' + window.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='signup.google'\n                                defaultMessage='Google Account'\n                            />\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableSignUpWithOffice365) {\n            signupControls.push(\n                <a\n                    className='btn btn-custom-login btn--full office365'\n                    key='office365'\n                    href={Client4.getOAuthRoute() + '/office365/signup' + window.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='signup.office365'\n                                defaultMessage='Office 365'\n                            />\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableSignUpWithOpenId) {\n            const buttonStyle = {};\n            if (this.props.openidButtonColor) {\n                buttonStyle.backgroundColor = this.props.openidButtonColor;\n            }\n            let buttonText = (\n                <FormattedMessage\n                    id='login.openid'\n                    defaultMessage='Open Id'\n                />\n            );\n            if (this.props.openidButtonText) {\n                buttonText = this.props.openidButtonText;\n            }\n            signupControls.push(\n                <a\n                    id='OpenIdButton'\n                    className='btn btn-custom-login btn--full openid'\n                    style={buttonStyle}\n                    key='openid'\n                    href={Client4.getOAuthRoute() + '/openid/signup' + window.location.search}\n                >\n                    <span>\n                        <span>\n                            {buttonText}\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableLDAP) {\n            const params = new URLSearchParams(this.props.location.search);\n            params.append('extra', 'create_ldap');\n            const query = '?' + params.toString();\n\n            let LDAPText = (\n                <FormattedMessage\n                    id='signup.ldap'\n                    defaultMessage='AD/LDAP Credentials'\n                />\n            );\n            if (this.props.ldapLoginFieldName) {\n                LDAPText = this.props.ldapLoginFieldName;\n            }\n            signupControls.push(\n                <Link\n                    className='btn btn-custom-login btn--full ldap'\n                    key='ldap'\n                    to={'/login' + query}\n                >\n                    <span>\n                        <LocalizedIcon\n                            className='icon fa fa-folder-open fa--margin-top'\n                            component='span'\n                            title={{id: t('signup.ldap.icon'), defaultMessage: 'AD/LDAP Icon'}}\n                        />\n                        <span>\n                            {LDAPText}\n                        </span>\n                    </span>\n                </Link>,\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableSAML) {\n            let query = '';\n            if (window.location.search) {\n                query = '&action=signup';\n            } else {\n                query = '?action=signup';\n            }\n\n            signupControls.push(\n                <Link\n                    className='btn btn-custom-login btn--full saml'\n                    key='saml'\n                    to={'/login/sso/saml' + window.location.search + query}\n                >\n                    <span>\n                        <LocalizedIcon\n                            className='icon fa fa-lock fa--margin-top'\n                            component='span'\n                            title={{id: t('signup.saml.icon'), defaultMessage: 'SAML Icon'}}\n                        />\n                        <span>\n                            {this.props.samlLoginButtonText}\n                        </span>\n                    </span>\n                </Link>,\n            );\n        }\n\n        if (signupControls.length === 0) {\n            const signupDisabledError = (\n                <FormattedMessage\n                    id='signup_user_completed.none'\n                    defaultMessage='No user creation method has been enabled. Please contact an administrator for access.'\n                />\n            );\n            signupControls = (\n                <FormError\n                    error={signupDisabledError}\n                    margin={true}\n                />\n            );\n        } else if (signupControls.length === 1) {\n            if (this.props.enableSignUpWithEmail) {\n                return browserHistory.push('/signup_email' + window.location.search);\n            } else if (this.props.isLicensed && this.props.enableLDAP) {\n                return browserHistory.push('/login' + window.location.search);\n            }\n        }\n\n        return signupControls;\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (<LoadingScreen/>);\n        }\n\n        if (this.state.usedBefore) {\n            return (\n                <div>\n                    <FormattedMessage\n                        id='signup_user_completed.expired'\n                        defaultMessage=\"You've already completed the signup process for this invitation or this invitation has expired.\"\n                    />\n                </div>\n            );\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className={'form-group has-error'}>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        let signupControls;\n        if (this.state.noOpenServerError || this.state.usedBefore) {\n            signupControls = null;\n        } else {\n            signupControls = this.renderSignupControls();\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <h1>{this.props.siteName}</h1>\n                            <h4 className='color--light'>\n                                <FormattedMessage\n                                    id='web.root.signup_info'\n                                />\n                            </h4>\n                            <div className='mt-8'>\n                                <h5><strong>\n                                    <FormattedMessage\n                                        id='signup.title'\n                                        defaultMessage='Create an account with:'\n                                    />\n                                </strong></h5>\n                            </div>\n                            {signupControls}\n                            {serverError}\n                        </div>\n                        <span className='color--light'>\n                            <FormattedMessage\n                                id='signup_user_completed.haveAccount'\n                                defaultMessage='Already have an account?'\n                            />\n                            {' '}\n                            <Link\n                                to={'/login' + this.props.location.search}\n                            >\n                                <FormattedMessage\n                                    id='signup_user_completed.signIn'\n                                    defaultMessage='Click here to sign in.'\n                                />\n                            </Link>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getTeamInviteInfo} from 'mattermost-redux/actions/teams';\n\nimport {getGlobalItem} from 'selectors/storage';\nimport {removeGlobalItem} from 'actions/storage';\nimport {addUserToTeamFromInvite} from 'actions/team_actions';\n\nimport SignupController from './signup_controller.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const isLicensed = license && license.IsLicensed === 'true';\n    const enableOpenServer = config.EnableOpenServer === 'true';\n    const noAccounts = config.NoAccounts === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const enableLDAP = config.EnableLdap === 'true';\n    const enableSAML = config.EnableSaml === 'true';\n    const samlLoginButtonText = config.SamlLoginButtonText;\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n    const siteName = config.SiteName;\n\n    let usedBefore;\n    if (ownProps.location.search) {\n        const params = new URLSearchParams(ownProps.location.search);\n        let token = params.get('t');\n        if (token == null) {\n            token = '';\n        }\n        usedBefore = getGlobalItem(state, token, null);\n    }\n\n    return {\n        loggedIn: Boolean(getCurrentUserId(state)),\n        isLicensed,\n        enableOpenServer,\n        noAccounts,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOffice365,\n        enableLDAP,\n        enableSAML,\n        samlLoginButtonText,\n        ldapLoginFieldName,\n        siteName,\n        usedBefore,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            removeGlobalItem,\n            getTeamInviteInfo,\n            addUserToTeamFromInvite,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignupController);\n"],"sourceRoot":""}